Sat Nov 23 00:51:40 UTC 2024 - running command: lm_eval --model vllm --model_args pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42 --tasks meta_pretrain --batch_size auto --output_path eval_results --seed 42 --log_samples --limit 3
nohup: ignoring input
2024-11-23:00:51:53,276 INFO     [__main__.py:279] Verbosity set to INFO
2024-11-23:00:52:09,079 WARNING  [__main__.py:312]  --limit SHOULD ONLY BE USED FOR TESTING.REAL METRICS SHOULD NOT BE COMPUTED USING LIMIT.
2024-11-23:00:52:09,080 ERROR    [__main__.py:354] Tasks were not found: meta_pretrain
                                               Try `lm-eval --tasks list` for list of available tasks
Traceback (most recent call last):
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/.venv/bin/lm_eval", line 8, in <module>
    sys.exit(cli_evaluate())
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/lm_eval/__main__.py", line 358, in cli_evaluate
    raise ValueError(
ValueError: Tasks not found: meta_pretrain. Try `lm-eval --tasks {list_groups,list_subtasks,list_tags,list}` to list out all available names for task groupings; only (sub)tasks; tags; or all of the above, or pass '--verbosity DEBUG' to troubleshoot task registration issues.
end: Sat Nov 23 00:52:10 UTC 2024
Sat Nov 23 00:54:41 UTC 2024 - running command: lm_eval --model vllm --model_args pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42 --tasks meta_mmlu --batch_size auto --output_path eval_results --seed 42 --log_samples --limit 3
nohup: ignoring input
2024-11-23:00:54:50,051 INFO     [__main__.py:279] Verbosity set to INFO
2024-11-23:00:55:05,800 WARNING  [__main__.py:312]  --limit SHOULD ONLY BE USED FOR TESTING.REAL METRICS SHOULD NOT BE COMPUTED USING LIMIT.
2024-11-23:00:55:05,801 INFO     [__main__.py:376] Selected Tasks: ['meta_mmlu']
2024-11-23:00:55:05,808 INFO     [evaluator.py:164] Setting random seed to 42 | Setting numpy seed to 42 | Setting torch manual seed to 42 | Setting fewshot manual seed to 42
2024-11-23:00:55:05,808 INFO     [evaluator.py:201] Initializing vllm model, with arguments: {'pretrained': 'meta-llama/Llama-3.2-1B', 'tensor_parallel_size': 1, 'dtype': 'auto', 'gpu_memory_utilization': 0.25, 'data_parallel_size': 1, 'max_model_len': 8192, 'add_bos_token': True, 'seed': 42}
Traceback (most recent call last):
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/.venv/bin/lm_eval", line 8, in <module>
    sys.exit(cli_evaluate())
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/lm_eval/__main__.py", line 382, in cli_evaluate
    results = evaluator.simple_evaluate(
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/lm_eval/utils.py", line 397, in _wrapper
    return fn(*args, **kwargs)
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/lm_eval/evaluator.py", line 204, in simple_evaluate
    lm = lm_eval.api.registry.get_model(model).create_from_arg_string(
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/lm_eval/api/model.py", line 147, in create_from_arg_string
    return cls(**args, **args2)
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/lm_eval/models/vllm_causallms.py", line 68, in __init__
    raise ModuleNotFoundError(
ModuleNotFoundError: attempted to use 'vllm' LM type, but package `vllm` is not installed. Please install vllm via `pip install lm-eval[vllm]` or `pip install -e .[vllm]`
end: Sat Nov 23 00:55:06 UTC 2024
Sat Nov 23 00:58:52 UTC 2024 - running command: lm_eval --model vllm --model_args pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42 --tasks meta_mmlu --batch_size auto --output_path eval_results --seed 42 --log_samples --limit 3
nohup: ignoring input
2024-11-23:00:59:09,195 INFO     [__main__.py:279] Verbosity set to INFO
2024-11-23:00:59:24,953 WARNING  [__main__.py:312]  --limit SHOULD ONLY BE USED FOR TESTING.REAL METRICS SHOULD NOT BE COMPUTED USING LIMIT.
2024-11-23:00:59:24,954 INFO     [__main__.py:376] Selected Tasks: ['meta_mmlu']
2024-11-23:00:59:24,962 INFO     [evaluator.py:164] Setting random seed to 42 | Setting numpy seed to 42 | Setting torch manual seed to 42 | Setting fewshot manual seed to 42
2024-11-23:00:59:24,962 INFO     [evaluator.py:201] Initializing vllm model, with arguments: {'pretrained': 'meta-llama/Llama-3.2-1B', 'tensor_parallel_size': 1, 'dtype': 'auto', 'gpu_memory_utilization': 0.25, 'data_parallel_size': 1, 'max_model_len': 8192, 'add_bos_token': True, 'seed': 42}
Traceback (most recent call last):
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/.venv/lib/python3.10/site-packages/huggingface_hub/utils/_http.py", line 406, in hf_raise_for_status
    response.raise_for_status()
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/.venv/lib/python3.10/site-packages/requests/models.py", line 1024, in raise_for_status
    raise HTTPError(http_error_msg, response=self)
requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://huggingface.co/meta-llama/Llama-3.2-1B/resolve/main/sentence_bert_config.json

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/.venv/bin/lm_eval", line 8, in <module>
    sys.exit(cli_evaluate())
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/lm_eval/__main__.py", line 382, in cli_evaluate
    results = evaluator.simple_evaluate(
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/lm_eval/utils.py", line 397, in _wrapper
    return fn(*args, **kwargs)
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/lm_eval/evaluator.py", line 204, in simple_evaluate
    lm = lm_eval.api.registry.get_model(model).create_from_arg_string(
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/lm_eval/api/model.py", line 147, in create_from_arg_string
    return cls(**args, **args2)
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/lm_eval/models/vllm_causallms.py", line 103, in __init__
    self.model = LLM(**self.model_args)
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/.venv/lib/python3.10/site-packages/vllm/utils.py", line 1028, in inner
    return fn(*args, **kwargs)
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/.venv/lib/python3.10/site-packages/vllm/entrypoints/llm.py", line 210, in __init__
    self.llm_engine = self.engine_class.from_engine_args(
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/.venv/lib/python3.10/site-packages/vllm/engine/llm_engine.py", line 582, in from_engine_args
    engine_config = engine_args.create_engine_config()
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/.venv/lib/python3.10/site-packages/vllm/engine/arg_utils.py", line 959, in create_engine_config
    model_config = self.create_model_config()
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/.venv/lib/python3.10/site-packages/vllm/engine/arg_utils.py", line 891, in create_model_config
    return ModelConfig(
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/.venv/lib/python3.10/site-packages/vllm/config.py", line 214, in __init__
    self.encoder_config = self._get_encoder_config()
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/.venv/lib/python3.10/site-packages/vllm/config.py", line 287, in _get_encoder_config
    return get_sentence_transformer_tokenizer_config(
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/.venv/lib/python3.10/site-packages/vllm/transformers_utils/config.py", line 383, in get_sentence_transformer_tokenizer_config
    encoder_dict = get_hf_file_to_dict(config_name, model, revision, token)
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/.venv/lib/python3.10/site-packages/vllm/transformers_utils/config.py", line 263, in get_hf_file_to_dict
    if file_or_path_exists(model=model,
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/.venv/lib/python3.10/site-packages/vllm/transformers_utils/config.py", line 91, in file_or_path_exists
    return file_exists(model, config_name, revision=revision, token=token)
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/.venv/lib/python3.10/site-packages/huggingface_hub/utils/_validators.py", line 114, in _inner_fn
    return fn(*args, **kwargs)
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/.venv/lib/python3.10/site-packages/huggingface_hub/hf_api.py", line 2907, in file_exists
    get_hf_file_metadata(url, token=token)
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/.venv/lib/python3.10/site-packages/huggingface_hub/utils/_validators.py", line 114, in _inner_fn
    return fn(*args, **kwargs)
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/.venv/lib/python3.10/site-packages/huggingface_hub/file_download.py", line 1296, in get_hf_file_metadata
    r = _request_wrapper(
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/.venv/lib/python3.10/site-packages/huggingface_hub/file_download.py", line 277, in _request_wrapper
    response = _request_wrapper(
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/.venv/lib/python3.10/site-packages/huggingface_hub/file_download.py", line 301, in _request_wrapper
    hf_raise_for_status(response)
  File "/home/ubuntu/us-east-1/lm-evaluation-harness/.venv/lib/python3.10/site-packages/huggingface_hub/utils/_http.py", line 423, in hf_raise_for_status
    raise _format(GatedRepoError, message, response) from e
huggingface_hub.errors.GatedRepoError: 401 Client Error. (Request ID: Root=1-674128ed-62a09de82e46e76360a86804;530ef3bc-194c-449e-ae88-d0284b80001b)

Cannot access gated repo for url https://huggingface.co/meta-llama/Llama-3.2-1B/resolve/main/sentence_bert_config.json.
Access to model meta-llama/Llama-3.2-1B is restricted. You must have access to it and be authenticated to access it. Please log in.
end: Sat Nov 23 00:59:26 UTC 2024
Sat Nov 23 01:06:26 UTC 2024 - running command: lm_eval --model vllm --model_args pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42 --tasks meta_mmlu --batch_size auto --output_path eval_results --seed 42 --log_samples --limit 3
nohup: ignoring input
2024-11-23:01:06:39,058 INFO     [__main__.py:279] Verbosity set to INFO
2024-11-23:01:06:54,816 WARNING  [__main__.py:312]  --limit SHOULD ONLY BE USED FOR TESTING.REAL METRICS SHOULD NOT BE COMPUTED USING LIMIT.
2024-11-23:01:06:54,817 INFO     [__main__.py:376] Selected Tasks: ['meta_mmlu']
2024-11-23:01:06:54,826 INFO     [evaluator.py:164] Setting random seed to 42 | Setting numpy seed to 42 | Setting torch manual seed to 42 | Setting fewshot manual seed to 42
2024-11-23:01:06:54,826 INFO     [evaluator.py:201] Initializing vllm model, with arguments: {'pretrained': 'meta-llama/Llama-3.2-1B', 'tensor_parallel_size': 1, 'dtype': 'auto', 'gpu_memory_utilization': 0.25, 'data_parallel_size': 1, 'max_model_len': 8192, 'add_bos_token': True, 'seed': 42}
INFO 11-23 01:07:04 config.py:350] This model supports multiple tasks: {'generate', 'embedding'}. Defaulting to 'generate'.
INFO 11-23 01:07:04 llm_engine.py:249] Initializing an LLM engine (v0.6.4.post1) with config: model='meta-llama/Llama-3.2-1B', speculative_config=None, tokenizer='meta-llama/Llama-3.2-1B', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=42, served_model_name=meta-llama/Llama-3.2-1B, num_scheduler_steps=1, chunked_prefill_enabled=False multi_step_stream_outputs=True, enable_prefix_caching=False, use_async_output_proc=True, use_cached_outputs=False, chat_template_text_format=string, mm_processor_kwargs=None, pooler_config=None)
INFO 11-23 01:07:05 selector.py:135] Using Flash Attention backend.
INFO 11-23 01:07:06 model_runner.py:1072] Starting to load model meta-llama/Llama-3.2-1B...
INFO 11-23 01:07:06 weight_utils.py:243] Using model weights format ['*.safetensors']
INFO 11-23 01:07:06 weight_utils.py:288] No model.safetensors.index.json found in remote.
Loading safetensors checkpoint shards:   0% Completed | 0/1 [00:00<?, ?it/s]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:15<00:00, 15.19s/it]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:15<00:00, 15.19s/it]

INFO 11-23 01:07:22 model_runner.py:1077] Loading model weights took 2.3185 GB
INFO 11-23 01:07:23 worker.py:232] Memory profiling results: total_gpu_memory=39.38GiB initial_memory_usage=2.82GiB peak_torch_memory=3.52GiB memory_usage_post_profile=2.84GiB non_torch_memory=0.51GiB kv_cache_size=5.81GiB gpu_memory_utilization=0.25
INFO 11-23 01:07:23 gpu_executor.py:113] # GPU blocks: 11900, # CPU blocks: 8192
INFO 11-23 01:07:23 gpu_executor.py:117] Maximum concurrency for 8192 tokens per request: 23.24x
INFO 11-23 01:07:26 model_runner.py:1400] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 11-23 01:07:26 model_runner.py:1404] If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 11-23 01:07:37 model_runner.py:1518] Graph capturing finished in 11 secs, took 0.14 GiB
Generating latest split:   0%|          | 0/14042 [00:00<?, ? examples/s]Generating latest split:   7%|▋         | 1000/14042 [00:00<00:01, 9942.55 examples/s]Generating latest split:  28%|██▊       | 4000/14042 [00:00<00:00, 13961.34 examples/s]Generating latest split:  57%|█████▋    | 8000/14042 [00:00<00:00, 16943.97 examples/s]Generating latest split:  85%|████████▌ | 12000/14042 [00:00<00:00, 20288.47 examples/s]Generating latest split: 100%|██████████| 14042/14042 [00:00<00:00, 19112.19 examples/s]
2024-11-23:01:07:40,127 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
Map:   0%|          | 0/14042 [00:00<?, ? examples/s]Map:   7%|▋         | 1000/14042 [00:00<00:01, 7849.46 examples/s]Map:  14%|█▍        | 2000/14042 [00:00<00:01, 8695.61 examples/s]Map:  22%|██▏       | 3109/14042 [00:00<00:01, 9685.31 examples/s]Map:  34%|███▎      | 4715/14042 [00:00<00:01, 6334.57 examples/s]Map:  41%|████      | 5749/14042 [00:00<00:01, 7208.37 examples/s]Map:  49%|████▉     | 6872/14042 [00:00<00:00, 8166.95 examples/s]Map:  57%|█████▋    | 7989/14042 [00:00<00:00, 8928.24 examples/s]Map:  66%|██████▋   | 9312/14042 [00:01<00:00, 8887.44 examples/s]Map:  77%|███████▋  | 10820/14042 [00:01<00:00, 9711.80 examples/s]Map:  85%|████████▌ | 12000/14042 [00:01<00:00, 9698.76 examples/s]Map:  93%|█████████▎| 13126/14042 [00:01<00:00, 10092.52 examples/s]Map: 100%|██████████| 14042/14042 [00:01<00:00, 8666.32 examples/s] 
Map:   0%|          | 0/14042 [00:00<?, ? examples/s]Map:   7%|▋         | 1000/14042 [00:00<00:01, 9414.82 examples/s]Map:  14%|█▍        | 2000/14042 [00:00<00:01, 9476.70 examples/s]Map:  21%|██▏       | 3003/14042 [00:00<00:01, 9720.60 examples/s]Map:  28%|██▊       | 4000/14042 [00:00<00:01, 9466.48 examples/s]Map:  36%|███▌      | 5002/14042 [00:00<00:00, 9656.19 examples/s]Map:  43%|████▎     | 6036/14042 [00:00<00:00, 9881.80 examples/s]Map:  50%|█████     | 7043/14042 [00:00<00:00, 9940.95 examples/s]Map:  62%|██████▏   | 8718/14042 [00:00<00:00, 10163.80 examples/s]Map:  71%|███████   | 10000/14042 [00:01<00:00, 9296.99 examples/s]Map:  79%|███████▊  | 11024/14042 [00:01<00:00, 9531.66 examples/s]Map:  86%|████████▌ | 12082/14042 [00:01<00:00, 9806.83 examples/s]Map:  97%|█████████▋| 13673/14042 [00:01<00:00, 10077.90 examples/s]Map: 100%|██████████| 14042/14042 [00:01<00:00, 9064.09 examples/s] 
2024-11-23:01:07:43,315 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
2024-11-23:01:07:45,118 INFO     [task.py:415] Building contexts for meta_mmlu on rank 0...
  0%|          | 0/3 [00:00<?, ?it/s]100%|██████████| 3/3 [00:00<00:00, 27594.11it/s]
2024-11-23:01:07:45,133 INFO     [evaluator.py:496] Running loglikelihood requests
Running loglikelihood requests:   0%|          | 0/12 [00:00<?, ?it/s]
Processed prompts:   0%|          | 0/12 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s][A
Processed prompts:   8%|▊         | 1/12 [00:00<00:03,  3.40it/s, est. speed input: 1796.04 toks/s, output: 3.40 toks/s][AProcessed prompts: 100%|██████████| 12/12 [00:00<00:00, 40.34it/s, est. speed input: 20464.71 toks/s, output: 40.35 toks/s]
Running loglikelihood requests:   8%|▊         | 1/12 [00:00<00:03,  3.30it/s]Running loglikelihood requests: 100%|██████████| 12/12 [00:00<00:00, 38.85it/s]
2024-11-23:01:07:47,685 INFO     [evaluation_tracker.py:206] Saving results aggregated
2024-11-23:01:07:47,702 INFO     [evaluation_tracker.py:287] Saving per-sample results for: meta_mmlu
vllm (pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42), gen_kwargs: (None), limit: 3.0, num_fewshot: None, batch_size: auto
|  Tasks  |Version|Filter|n-shot| Metric |   |Value|   |Stderr|
|---------|------:|------|-----:|--------|---|----:|---|-----:|
|meta_mmlu|      1|none  |     0|acc     |↑  |    0|±  |     0|
|         |       |none  |     0|acc_norm|↑  |    0|±  |     0|

[rank0]:[W1123 01:07:48.824108486 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
end: Sat Nov 23 01:07:50 UTC 2024
Sat Nov 23 01:16:59 UTC 2024 - running command: lm_eval --model vllm --model_args pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42 --tasks meta_mmlu --batch_size auto --output_path eval_results --seed 42 --log_samples --limit 2
nohup: ignoring input
bash: line 1: lm_eval: command not found
end: Sat Nov 23 01:16:59 UTC 2024
Sat Nov 23 01:19:13 UTC 2024 - running command: lm_eval --model vllm --model_args pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42 --tasks meta_mmlu --batch_size auto --output_path eval_results --seed 42 --log_samples --limit 2
nohup: ignoring input
2024-11-23:01:19:23,923 INFO     [__main__.py:279] Verbosity set to INFO
2024-11-23:01:19:39,490 WARNING  [__main__.py:312]  --limit SHOULD ONLY BE USED FOR TESTING.REAL METRICS SHOULD NOT BE COMPUTED USING LIMIT.
2024-11-23:01:19:39,491 INFO     [__main__.py:376] Selected Tasks: ['meta_mmlu']
2024-11-23:01:19:39,500 INFO     [evaluator.py:164] Setting random seed to 42 | Setting numpy seed to 42 | Setting torch manual seed to 42 | Setting fewshot manual seed to 42
2024-11-23:01:19:39,500 INFO     [evaluator.py:201] Initializing vllm model, with arguments: {'pretrained': 'meta-llama/Llama-3.2-1B', 'tensor_parallel_size': 1, 'dtype': 'auto', 'gpu_memory_utilization': 0.25, 'data_parallel_size': 1, 'max_model_len': 8192, 'add_bos_token': True, 'seed': 42}
INFO 11-23 01:19:48 config.py:350] This model supports multiple tasks: {'embedding', 'generate'}. Defaulting to 'generate'.
INFO 11-23 01:19:48 llm_engine.py:249] Initializing an LLM engine (v0.6.4.post1) with config: model='meta-llama/Llama-3.2-1B', speculative_config=None, tokenizer='meta-llama/Llama-3.2-1B', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=42, served_model_name=meta-llama/Llama-3.2-1B, num_scheduler_steps=1, chunked_prefill_enabled=False multi_step_stream_outputs=True, enable_prefix_caching=False, use_async_output_proc=True, use_cached_outputs=False, chat_template_text_format=string, mm_processor_kwargs=None, pooler_config=None)
INFO 11-23 01:19:49 selector.py:135] Using Flash Attention backend.
INFO 11-23 01:19:49 model_runner.py:1072] Starting to load model meta-llama/Llama-3.2-1B...
INFO 11-23 01:19:49 weight_utils.py:243] Using model weights format ['*.safetensors']
INFO 11-23 01:19:50 weight_utils.py:288] No model.safetensors.index.json found in remote.
Loading safetensors checkpoint shards:   0% Completed | 0/1 [00:00<?, ?it/s]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:01<00:00,  1.78s/it]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:01<00:00,  1.78s/it]

INFO 11-23 01:19:52 model_runner.py:1077] Loading model weights took 2.3185 GB
INFO 11-23 01:19:52 worker.py:232] Memory profiling results: total_gpu_memory=39.38GiB initial_memory_usage=2.82GiB peak_torch_memory=3.52GiB memory_usage_post_profile=2.84GiB non_torch_memory=0.51GiB kv_cache_size=5.81GiB gpu_memory_utilization=0.25
INFO 11-23 01:19:52 gpu_executor.py:113] # GPU blocks: 11900, # CPU blocks: 8192
INFO 11-23 01:19:52 gpu_executor.py:117] Maximum concurrency for 8192 tokens per request: 23.24x
INFO 11-23 01:19:56 model_runner.py:1400] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 11-23 01:19:56 model_runner.py:1404] If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 11-23 01:20:07 model_runner.py:1518] Graph capturing finished in 11 secs, took 0.14 GiB
2024-11-23:01:20:08,421 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
2024-11-23:01:20:08,434 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
2024-11-23:01:20:10,261 INFO     [task.py:415] Building contexts for meta_mmlu on rank 0...
  0%|          | 0/2 [00:00<?, ?it/s]100%|██████████| 2/2 [00:00<00:00, 21620.12it/s]
2024-11-23:01:20:10,276 INFO     [evaluator.py:496] Running loglikelihood requests
Running loglikelihood requests:   0%|          | 0/8 [00:00<?, ?it/s]
Processed prompts:   0%|          | 0/8 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s][A
Processed prompts:  12%|█▎        | 1/8 [00:00<00:01,  6.08it/s, est. speed input: 3210.78 toks/s, output: 6.08 toks/s][AProcessed prompts: 100%|██████████| 8/8 [00:00<00:00, 47.55it/s, est. speed input: 24199.01 toks/s, output: 47.57 toks/s]
Running loglikelihood requests:  12%|█▎        | 1/8 [00:00<00:01,  5.77it/s]Running loglikelihood requests: 100%|██████████| 8/8 [00:00<00:00, 44.95it/s]
2024-11-23:01:20:12,543 INFO     [evaluation_tracker.py:206] Saving results aggregated
2024-11-23:01:20:12,551 INFO     [evaluation_tracker.py:287] Saving per-sample results for: meta_mmlu
[(-1.1178319454193115, True), (-1.1178319454193115, True), (-1.4928319454193115, False), (-2.1178319454193115, False), (-1.0755325555801392, False), (-0.8255325555801392, True), (-1.8255325555801392, False), (-2.8255324363708496, False)]
vllm (pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42), gen_kwargs: (None), limit: 2.0, num_fewshot: None, batch_size: auto
|  Tasks  |Version|Filter|n-shot| Metric |   |Value|   |Stderr|
|---------|------:|------|-----:|--------|---|----:|---|-----:|
|meta_mmlu|      1|none  |     0|acc     |↑  |    0|±  |     0|
|         |       |none  |     0|acc_norm|↑  |    0|±  |     0|

[rank0]:[W1123 01:20:13.610801404 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
end: Sat Nov 23 01:20:15 UTC 2024
Sat Nov 23 01:21:51 UTC 2024 - running command: lm_eval --model vllm --model_args pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42 --tasks meta_mmlu --batch_size auto --output_path eval_results --seed 42 --log_samples --limit 2
nohup: ignoring input
2024-11-23:01:22:01,809 INFO     [__main__.py:279] Verbosity set to INFO
2024-11-23:01:22:17,735 WARNING  [__main__.py:312]  --limit SHOULD ONLY BE USED FOR TESTING.REAL METRICS SHOULD NOT BE COMPUTED USING LIMIT.
2024-11-23:01:22:17,736 INFO     [__main__.py:376] Selected Tasks: ['meta_mmlu']
2024-11-23:01:22:17,744 INFO     [evaluator.py:164] Setting random seed to 42 | Setting numpy seed to 42 | Setting torch manual seed to 42 | Setting fewshot manual seed to 42
2024-11-23:01:22:17,744 INFO     [evaluator.py:201] Initializing vllm model, with arguments: {'pretrained': 'meta-llama/Llama-3.2-1B', 'tensor_parallel_size': 1, 'dtype': 'auto', 'gpu_memory_utilization': 0.25, 'data_parallel_size': 1, 'max_model_len': 8192, 'add_bos_token': True, 'seed': 42}
INFO 11-23 01:22:27 config.py:350] This model supports multiple tasks: {'generate', 'embedding'}. Defaulting to 'generate'.
INFO 11-23 01:22:27 llm_engine.py:249] Initializing an LLM engine (v0.6.4.post1) with config: model='meta-llama/Llama-3.2-1B', speculative_config=None, tokenizer='meta-llama/Llama-3.2-1B', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=42, served_model_name=meta-llama/Llama-3.2-1B, num_scheduler_steps=1, chunked_prefill_enabled=False multi_step_stream_outputs=True, enable_prefix_caching=False, use_async_output_proc=True, use_cached_outputs=False, chat_template_text_format=string, mm_processor_kwargs=None, pooler_config=None)
INFO 11-23 01:22:28 selector.py:135] Using Flash Attention backend.
INFO 11-23 01:22:28 model_runner.py:1072] Starting to load model meta-llama/Llama-3.2-1B...
INFO 11-23 01:22:28 weight_utils.py:243] Using model weights format ['*.safetensors']
INFO 11-23 01:22:28 weight_utils.py:288] No model.safetensors.index.json found in remote.
Loading safetensors checkpoint shards:   0% Completed | 0/1 [00:00<?, ?it/s]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:01<00:00,  1.84s/it]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:01<00:00,  1.84s/it]

INFO 11-23 01:22:30 model_runner.py:1077] Loading model weights took 2.3185 GB
INFO 11-23 01:22:31 worker.py:232] Memory profiling results: total_gpu_memory=39.38GiB initial_memory_usage=2.82GiB peak_torch_memory=3.52GiB memory_usage_post_profile=2.84GiB non_torch_memory=0.51GiB kv_cache_size=5.81GiB gpu_memory_utilization=0.25
INFO 11-23 01:22:31 gpu_executor.py:113] # GPU blocks: 11900, # CPU blocks: 8192
INFO 11-23 01:22:31 gpu_executor.py:117] Maximum concurrency for 8192 tokens per request: 23.24x
INFO 11-23 01:22:34 model_runner.py:1400] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 11-23 01:22:34 model_runner.py:1404] If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 11-23 01:22:46 model_runner.py:1518] Graph capturing finished in 12 secs, took 0.14 GiB
2024-11-23:01:22:48,440 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
2024-11-23:01:22:48,453 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
2024-11-23:01:22:50,278 INFO     [task.py:415] Building contexts for meta_mmlu on rank 0...
  0%|          | 0/2 [00:00<?, ?it/s]100%|██████████| 2/2 [00:00<00:00, 21732.15it/s]
2024-11-23:01:22:50,293 INFO     [evaluator.py:496] Running loglikelihood requests
Running loglikelihood requests:   0%|          | 0/8 [00:00<?, ?it/s]
Processed prompts:   0%|          | 0/8 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s][A
Processed prompts:  12%|█▎        | 1/8 [00:00<00:01,  6.12it/s, est. speed input: 3232.64 toks/s, output: 6.12 toks/s][AProcessed prompts: 100%|██████████| 8/8 [00:00<00:00, 48.05it/s, est. speed input: 24454.83 toks/s, output: 48.08 toks/s]
Running loglikelihood requests:  12%|█▎        | 1/8 [00:00<00:01,  5.84it/s]Running loglikelihood requests: 100%|██████████| 8/8 [00:00<00:00, 45.71it/s]
2024-11-23:01:22:52,519 INFO     [evaluation_tracker.py:206] Saving results aggregated
2024-11-23:01:22:52,527 INFO     [evaluation_tracker.py:287] Saving per-sample results for: meta_mmlu
Requests returned from model:  [(-1.1178319454193115, True), (-1.1178319454193115, True), (-1.4928319454193115, False), (-2.1178319454193115, False), (-1.0755325555801392, False), (-0.8255325555801392, True), (-1.8255325555801392, False), (-2.8255324363708496, False)]
vllm (pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42), gen_kwargs: (None), limit: 2.0, num_fewshot: None, batch_size: auto
|  Tasks  |Version|Filter|n-shot| Metric |   |Value|   |Stderr|
|---------|------:|------|-----:|--------|---|----:|---|-----:|
|meta_mmlu|      1|none  |     0|acc     |↑  |    0|±  |     0|
|         |       |none  |     0|acc_norm|↑  |    0|±  |     0|

[rank0]:[W1123 01:22:53.586665969 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
end: Sat Nov 23 01:22:55 UTC 2024
Sat Nov 23 01:23:38 UTC 2024 - running command: lm_eval --model vllm --model_args pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42 --tasks meta_mmlu --batch_size auto --output_path eval_results --seed 42 --log_samples --limit 2
nohup: ignoring input
2024-11-23:01:23:50,820 INFO     [__main__.py:279] Verbosity set to INFO
2024-11-23:01:24:06,685 WARNING  [__main__.py:312]  --limit SHOULD ONLY BE USED FOR TESTING.REAL METRICS SHOULD NOT BE COMPUTED USING LIMIT.
2024-11-23:01:24:06,686 INFO     [__main__.py:376] Selected Tasks: ['meta_mmlu']
2024-11-23:01:24:06,695 INFO     [evaluator.py:164] Setting random seed to 42 | Setting numpy seed to 42 | Setting torch manual seed to 42 | Setting fewshot manual seed to 42
2024-11-23:01:24:06,696 INFO     [evaluator.py:201] Initializing vllm model, with arguments: {'pretrained': 'meta-llama/Llama-3.2-1B', 'tensor_parallel_size': 1, 'dtype': 'auto', 'gpu_memory_utilization': 0.25, 'data_parallel_size': 1, 'max_model_len': 8192, 'add_bos_token': True, 'seed': 42}
INFO 11-23 01:24:15 config.py:350] This model supports multiple tasks: {'embedding', 'generate'}. Defaulting to 'generate'.
INFO 11-23 01:24:15 llm_engine.py:249] Initializing an LLM engine (v0.6.4.post1) with config: model='meta-llama/Llama-3.2-1B', speculative_config=None, tokenizer='meta-llama/Llama-3.2-1B', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=42, served_model_name=meta-llama/Llama-3.2-1B, num_scheduler_steps=1, chunked_prefill_enabled=False multi_step_stream_outputs=True, enable_prefix_caching=False, use_async_output_proc=True, use_cached_outputs=False, chat_template_text_format=string, mm_processor_kwargs=None, pooler_config=None)
INFO 11-23 01:24:16 selector.py:135] Using Flash Attention backend.
INFO 11-23 01:24:16 model_runner.py:1072] Starting to load model meta-llama/Llama-3.2-1B...
INFO 11-23 01:24:17 weight_utils.py:243] Using model weights format ['*.safetensors']
INFO 11-23 01:24:17 weight_utils.py:288] No model.safetensors.index.json found in remote.
Loading safetensors checkpoint shards:   0% Completed | 0/1 [00:00<?, ?it/s]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:01<00:00,  1.84s/it]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:01<00:00,  1.84s/it]

INFO 11-23 01:24:19 model_runner.py:1077] Loading model weights took 2.3185 GB
INFO 11-23 01:24:19 worker.py:232] Memory profiling results: total_gpu_memory=39.38GiB initial_memory_usage=2.82GiB peak_torch_memory=3.52GiB memory_usage_post_profile=2.84GiB non_torch_memory=0.51GiB kv_cache_size=5.81GiB gpu_memory_utilization=0.25
INFO 11-23 01:24:20 gpu_executor.py:113] # GPU blocks: 11900, # CPU blocks: 8192
INFO 11-23 01:24:20 gpu_executor.py:117] Maximum concurrency for 8192 tokens per request: 23.24x
INFO 11-23 01:24:23 model_runner.py:1400] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 11-23 01:24:23 model_runner.py:1404] If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 11-23 01:24:34 model_runner.py:1518] Graph capturing finished in 11 secs, took 0.14 GiB
2024-11-23:01:24:36,045 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
2024-11-23:01:24:36,057 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
2024-11-23:01:24:37,914 INFO     [task.py:415] Building contexts for meta_mmlu on rank 0...
  0%|          | 0/2 [00:00<?, ?it/s]100%|██████████| 2/2 [00:00<00:00, 20867.18it/s]
2024-11-23:01:24:37,929 INFO     [evaluator.py:496] Running loglikelihood requests
reqtype:  loglikelihood
reqs:  [Instance(request_type='loglikelihood', doc={'input_question': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'input_correct_responses': ['Answer: C'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '2f9f3789c31bccfee18249d4e2b191cf856e5b1ef05272817f7703c85f7bca7f', 'input_choice_list': {'A': '6 and 10', 'B': '5 and 12', 'C': '10 and 12', 'D': '12 and 15'}, 'output_prediction_text': None, 'problem': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'answer': 2}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer:', ' A'), idx=0, metadata=('meta_mmlu', 0, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=0, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'input_correct_responses': ['Answer: C'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '2f9f3789c31bccfee18249d4e2b191cf856e5b1ef05272817f7703c85f7bca7f', 'input_choice_list': {'A': '6 and 10', 'B': '5 and 12', 'C': '10 and 12', 'D': '12 and 15'}, 'output_prediction_text': None, 'problem': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'answer': 2}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer:', ' B'), idx=1, metadata=('meta_mmlu', 0, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=0, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'input_correct_responses': ['Answer: C'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '2f9f3789c31bccfee18249d4e2b191cf856e5b1ef05272817f7703c85f7bca7f', 'input_choice_list': {'A': '6 and 10', 'B': '5 and 12', 'C': '10 and 12', 'D': '12 and 15'}, 'output_prediction_text': None, 'problem': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'answer': 2}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer:', ' C'), idx=2, metadata=('meta_mmlu', 0, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=0, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'input_correct_responses': ['Answer: C'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '2f9f3789c31bccfee18249d4e2b191cf856e5b1ef05272817f7703c85f7bca7f', 'input_choice_list': {'A': '6 and 10', 'B': '5 and 12', 'C': '10 and 12', 'D': '12 and 15'}, 'output_prediction_text': None, 'problem': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'answer': 2}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer:', ' D'), idx=3, metadata=('meta_mmlu', 0, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=0, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Evaluate −2(x − 3) for x = 2.', 'input_correct_responses': ['Answer: D'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '3260939534b25679362acf409872c321ede427a5117d95bf4eb2cb1d11575b8f', 'input_choice_list': {'A': '−4', 'B': '−2', 'C': '10', 'D': '2'}, 'output_prediction_text': None, 'problem': 'Evaluate −2(x − 3) for x = 2.', 'answer': 3}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer:', ' A'), idx=0, metadata=('meta_mmlu', 1, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=1, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Evaluate −2(x − 3) for x = 2.', 'input_correct_responses': ['Answer: D'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '3260939534b25679362acf409872c321ede427a5117d95bf4eb2cb1d11575b8f', 'input_choice_list': {'A': '−4', 'B': '−2', 'C': '10', 'D': '2'}, 'output_prediction_text': None, 'problem': 'Evaluate −2(x − 3) for x = 2.', 'answer': 3}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer:', ' B'), idx=1, metadata=('meta_mmlu', 1, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=1, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Evaluate −2(x − 3) for x = 2.', 'input_correct_responses': ['Answer: D'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '3260939534b25679362acf409872c321ede427a5117d95bf4eb2cb1d11575b8f', 'input_choice_list': {'A': '−4', 'B': '−2', 'C': '10', 'D': '2'}, 'output_prediction_text': None, 'problem': 'Evaluate −2(x − 3) for x = 2.', 'answer': 3}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer:', ' C'), idx=2, metadata=('meta_mmlu', 1, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=1, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Evaluate −2(x − 3) for x = 2.', 'input_correct_responses': ['Answer: D'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '3260939534b25679362acf409872c321ede427a5117d95bf4eb2cb1d11575b8f', 'input_choice_list': {'A': '−4', 'B': '−2', 'C': '10', 'D': '2'}, 'output_prediction_text': None, 'problem': 'Evaluate −2(x − 3) for x = 2.', 'answer': 3}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer:', ' D'), idx=3, metadata=('meta_mmlu', 1, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=1, repeats=1)]
Running loglikelihood requests:   0%|          | 0/8 [00:00<?, ?it/s]
Processed prompts:   0%|          | 0/8 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s][A
Processed prompts:  12%|█▎        | 1/8 [00:00<00:01,  6.11it/s, est. speed input: 3229.60 toks/s, output: 6.11 toks/s][AProcessed prompts: 100%|██████████| 8/8 [00:00<00:00, 47.75it/s, est. speed input: 24304.97 toks/s, output: 47.78 toks/s]
Running loglikelihood requests:  12%|█▎        | 1/8 [00:00<00:01,  5.43it/s]Running loglikelihood requests: 100%|██████████| 8/8 [00:00<00:00, 42.28it/s]
2024-11-23:01:24:40,121 INFO     [evaluation_tracker.py:206] Saving results aggregated
2024-11-23:01:24:40,131 INFO     [evaluation_tracker.py:287] Saving per-sample results for: meta_mmlu
Requests returned from model:  [(-1.1178319454193115, True), (-1.1178319454193115, True), (-1.4928319454193115, False), (-2.1178319454193115, False), (-1.0755325555801392, False), (-0.8255325555801392, True), (-1.8255325555801392, False), (-2.8255324363708496, False)]
vllm (pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42), gen_kwargs: (None), limit: 2.0, num_fewshot: None, batch_size: auto
|  Tasks  |Version|Filter|n-shot| Metric |   |Value|   |Stderr|
|---------|------:|------|-----:|--------|---|----:|---|-----:|
|meta_mmlu|      1|none  |     0|acc     |↑  |    0|±  |     0|
|         |       |none  |     0|acc_norm|↑  |    0|±  |     0|

[rank0]:[W1123 01:24:40.165746126 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
end: Sat Nov 23 01:24:43 UTC 2024
Sat Nov 23 02:38:03 UTC 2024 - running command: lm_eval --model vllm --model_args pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42 --tasks meta_mmlu --batch_size auto --output_path eval_results --seed 42 --log_samples --limit 2
nohup: ignoring input
2024-11-23:02:38:13,916 INFO     [__main__.py:279] Verbosity set to INFO
2024-11-23:02:38:29,871 WARNING  [__main__.py:312]  --limit SHOULD ONLY BE USED FOR TESTING.REAL METRICS SHOULD NOT BE COMPUTED USING LIMIT.
2024-11-23:02:38:29,872 INFO     [__main__.py:376] Selected Tasks: ['meta_mmlu']
2024-11-23:02:38:29,883 INFO     [evaluator.py:164] Setting random seed to 42 | Setting numpy seed to 42 | Setting torch manual seed to 42 | Setting fewshot manual seed to 42
2024-11-23:02:38:29,883 INFO     [evaluator.py:201] Initializing vllm model, with arguments: {'pretrained': 'meta-llama/Llama-3.2-1B', 'tensor_parallel_size': 1, 'dtype': 'auto', 'gpu_memory_utilization': 0.25, 'data_parallel_size': 1, 'max_model_len': 8192, 'add_bos_token': True, 'seed': 42}
INFO 11-23 02:38:38 config.py:350] This model supports multiple tasks: {'generate', 'embedding'}. Defaulting to 'generate'.
INFO 11-23 02:38:38 llm_engine.py:249] Initializing an LLM engine (v0.6.4.post1) with config: model='meta-llama/Llama-3.2-1B', speculative_config=None, tokenizer='meta-llama/Llama-3.2-1B', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=42, served_model_name=meta-llama/Llama-3.2-1B, num_scheduler_steps=1, chunked_prefill_enabled=False multi_step_stream_outputs=True, enable_prefix_caching=False, use_async_output_proc=True, use_cached_outputs=False, chat_template_text_format=string, mm_processor_kwargs=None, pooler_config=None)
INFO 11-23 02:38:39 selector.py:135] Using Flash Attention backend.
INFO 11-23 02:38:40 model_runner.py:1072] Starting to load model meta-llama/Llama-3.2-1B...
INFO 11-23 02:38:40 weight_utils.py:243] Using model weights format ['*.safetensors']
INFO 11-23 02:38:40 weight_utils.py:288] No model.safetensors.index.json found in remote.
Loading safetensors checkpoint shards:   0% Completed | 0/1 [00:00<?, ?it/s]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:01<00:00,  1.82s/it]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:01<00:00,  1.82s/it]

INFO 11-23 02:38:42 model_runner.py:1077] Loading model weights took 2.3185 GB
INFO 11-23 02:38:42 worker.py:232] Memory profiling results: total_gpu_memory=39.38GiB initial_memory_usage=2.82GiB peak_torch_memory=3.52GiB memory_usage_post_profile=2.84GiB non_torch_memory=0.51GiB kv_cache_size=5.81GiB gpu_memory_utilization=0.25
INFO 11-23 02:38:42 gpu_executor.py:113] # GPU blocks: 11900, # CPU blocks: 8192
INFO 11-23 02:38:42 gpu_executor.py:117] Maximum concurrency for 8192 tokens per request: 23.24x
INFO 11-23 02:38:46 model_runner.py:1400] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 11-23 02:38:46 model_runner.py:1404] If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 11-23 02:38:57 model_runner.py:1518] Graph capturing finished in 11 secs, took 0.14 GiB
2024-11-23:02:38:59,067 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
2024-11-23:02:38:59,079 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
2024-11-23:02:39:00,905 INFO     [task.py:415] Building contexts for meta_mmlu on rank 0...
  0%|          | 0/2 [00:00<?, ?it/s]100%|██████████| 2/2 [00:00<00:00, 21024.08it/s]
2024-11-23:02:39:00,920 INFO     [evaluator.py:496] Running loglikelihood requests
reqtype:  loglikelihood
reqs:  [Instance(request_type='loglikelihood', doc={'input_question': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'input_correct_responses': ['Answer: C'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '2f9f3789c31bccfee18249d4e2b191cf856e5b1ef05272817f7703c85f7bca7f', 'input_choice_list': {'A': '6 and 10', 'B': '5 and 12', 'C': '10 and 12', 'D': '12 and 15'}, 'output_prediction_text': None, 'problem': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'answer': 2}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer:', ' A'), idx=0, metadata=('meta_mmlu', 0, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=0, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'input_correct_responses': ['Answer: C'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '2f9f3789c31bccfee18249d4e2b191cf856e5b1ef05272817f7703c85f7bca7f', 'input_choice_list': {'A': '6 and 10', 'B': '5 and 12', 'C': '10 and 12', 'D': '12 and 15'}, 'output_prediction_text': None, 'problem': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'answer': 2}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer:', ' B'), idx=1, metadata=('meta_mmlu', 0, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=0, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'input_correct_responses': ['Answer: C'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '2f9f3789c31bccfee18249d4e2b191cf856e5b1ef05272817f7703c85f7bca7f', 'input_choice_list': {'A': '6 and 10', 'B': '5 and 12', 'C': '10 and 12', 'D': '12 and 15'}, 'output_prediction_text': None, 'problem': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'answer': 2}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer:', ' C'), idx=2, metadata=('meta_mmlu', 0, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=0, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'input_correct_responses': ['Answer: C'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '2f9f3789c31bccfee18249d4e2b191cf856e5b1ef05272817f7703c85f7bca7f', 'input_choice_list': {'A': '6 and 10', 'B': '5 and 12', 'C': '10 and 12', 'D': '12 and 15'}, 'output_prediction_text': None, 'problem': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'answer': 2}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer:', ' D'), idx=3, metadata=('meta_mmlu', 0, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=0, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Evaluate −2(x − 3) for x = 2.', 'input_correct_responses': ['Answer: D'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '3260939534b25679362acf409872c321ede427a5117d95bf4eb2cb1d11575b8f', 'input_choice_list': {'A': '−4', 'B': '−2', 'C': '10', 'D': '2'}, 'output_prediction_text': None, 'problem': 'Evaluate −2(x − 3) for x = 2.', 'answer': 3}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer:', ' A'), idx=0, metadata=('meta_mmlu', 1, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=1, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Evaluate −2(x − 3) for x = 2.', 'input_correct_responses': ['Answer: D'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '3260939534b25679362acf409872c321ede427a5117d95bf4eb2cb1d11575b8f', 'input_choice_list': {'A': '−4', 'B': '−2', 'C': '10', 'D': '2'}, 'output_prediction_text': None, 'problem': 'Evaluate −2(x − 3) for x = 2.', 'answer': 3}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer:', ' B'), idx=1, metadata=('meta_mmlu', 1, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=1, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Evaluate −2(x − 3) for x = 2.', 'input_correct_responses': ['Answer: D'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '3260939534b25679362acf409872c321ede427a5117d95bf4eb2cb1d11575b8f', 'input_choice_list': {'A': '−4', 'B': '−2', 'C': '10', 'D': '2'}, 'output_prediction_text': None, 'problem': 'Evaluate −2(x − 3) for x = 2.', 'answer': 3}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer:', ' C'), idx=2, metadata=('meta_mmlu', 1, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=1, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Evaluate −2(x − 3) for x = 2.', 'input_correct_responses': ['Answer: D'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '3260939534b25679362acf409872c321ede427a5117d95bf4eb2cb1d11575b8f', 'input_choice_list': {'A': '−4', 'B': '−2', 'C': '10', 'D': '2'}, 'output_prediction_text': None, 'problem': 'Evaluate −2(x − 3) for x = 2.', 'answer': 3}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer:', ' D'), idx=3, metadata=('meta_mmlu', 1, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=1, repeats=1)]
Running loglikelihood requests:   0%|          | 0/8 [00:00<?, ?it/s]
Processed prompts:   0%|          | 0/8 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s][A
Processed prompts:  12%|█▎        | 1/8 [00:00<00:01,  6.12it/s, est. speed input: 3231.67 toks/s, output: 6.12 toks/s][AProcessed prompts: 100%|██████████| 8/8 [00:00<00:00, 48.03it/s, est. speed input: 24451.68 toks/s, output: 48.07 toks/s]
Running loglikelihood requests:  12%|█▎        | 1/8 [00:00<00:01,  5.80it/s]Running loglikelihood requests: 100%|██████████| 8/8 [00:00<00:00, 45.25it/s]
2024-11-23:02:39:03,143 INFO     [evaluation_tracker.py:206] Saving results aggregated
2024-11-23:02:39:03,149 INFO     [evaluation_tracker.py:287] Saving per-sample results for: meta_mmlu
Requests returned from model:  [(-1.1178319454193115, True), (-1.1178319454193115, True), (-1.4928319454193115, False), (-2.1178319454193115, False), (-1.0755325555801392, False), (-0.8255325555801392, True), (-1.8255325555801392, False), (-2.8255324363708496, False)]
vllm (pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42), gen_kwargs: (None), limit: 2.0, num_fewshot: None, batch_size: auto
|  Tasks  |Version|Filter|n-shot| Metric |   |Value|   |Stderr|
|---------|------:|------|-----:|--------|---|----:|---|-----:|
|meta_mmlu|      1|none  |     0|acc     |↑  |    0|±  |     0|
|         |       |none  |     0|acc_norm|↑  |    0|±  |     0|

[rank0]:[W1123 02:39:03.222039069 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
end: Sat Nov 23 02:39:06 UTC 2024
Sat Nov 23 02:43:16 UTC 2024 - running command: lm_eval --model vllm --model_args pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42 --tasks meta_mmlu --batch_size auto --output_path eval_results --seed 42 --log_samples --limit 2
nohup: ignoring input
2024-11-23:02:43:26,076 INFO     [__main__.py:279] Verbosity set to INFO
2024-11-23:02:43:41,896 WARNING  [__main__.py:312]  --limit SHOULD ONLY BE USED FOR TESTING.REAL METRICS SHOULD NOT BE COMPUTED USING LIMIT.
2024-11-23:02:43:41,896 INFO     [__main__.py:376] Selected Tasks: ['meta_mmlu']
2024-11-23:02:43:41,904 INFO     [evaluator.py:164] Setting random seed to 42 | Setting numpy seed to 42 | Setting torch manual seed to 42 | Setting fewshot manual seed to 42
2024-11-23:02:43:41,905 INFO     [evaluator.py:201] Initializing vllm model, with arguments: {'pretrained': 'meta-llama/Llama-3.2-1B', 'tensor_parallel_size': 1, 'dtype': 'auto', 'gpu_memory_utilization': 0.25, 'data_parallel_size': 1, 'max_model_len': 8192, 'add_bos_token': True, 'seed': 42}
INFO 11-23 02:43:50 config.py:350] This model supports multiple tasks: {'generate', 'embedding'}. Defaulting to 'generate'.
INFO 11-23 02:43:50 llm_engine.py:249] Initializing an LLM engine (v0.6.4.post1) with config: model='meta-llama/Llama-3.2-1B', speculative_config=None, tokenizer='meta-llama/Llama-3.2-1B', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=42, served_model_name=meta-llama/Llama-3.2-1B, num_scheduler_steps=1, chunked_prefill_enabled=False multi_step_stream_outputs=True, enable_prefix_caching=False, use_async_output_proc=True, use_cached_outputs=False, chat_template_text_format=string, mm_processor_kwargs=None, pooler_config=None)
INFO 11-23 02:43:51 selector.py:135] Using Flash Attention backend.
INFO 11-23 02:43:51 model_runner.py:1072] Starting to load model meta-llama/Llama-3.2-1B...
INFO 11-23 02:43:51 weight_utils.py:243] Using model weights format ['*.safetensors']
INFO 11-23 02:43:52 weight_utils.py:288] No model.safetensors.index.json found in remote.
Loading safetensors checkpoint shards:   0% Completed | 0/1 [00:00<?, ?it/s]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:01<00:00,  1.83s/it]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:01<00:00,  1.83s/it]

INFO 11-23 02:43:54 model_runner.py:1077] Loading model weights took 2.3185 GB
INFO 11-23 02:43:54 worker.py:232] Memory profiling results: total_gpu_memory=39.38GiB initial_memory_usage=2.82GiB peak_torch_memory=3.52GiB memory_usage_post_profile=2.84GiB non_torch_memory=0.51GiB kv_cache_size=5.81GiB gpu_memory_utilization=0.25
INFO 11-23 02:43:54 gpu_executor.py:113] # GPU blocks: 11900, # CPU blocks: 8192
INFO 11-23 02:43:54 gpu_executor.py:117] Maximum concurrency for 8192 tokens per request: 23.24x
INFO 11-23 02:43:58 model_runner.py:1400] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 11-23 02:43:58 model_runner.py:1404] If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 11-23 02:44:09 model_runner.py:1518] Graph capturing finished in 11 secs, took 0.14 GiB
2024-11-23:02:44:10,947 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
2024-11-23:02:44:10,959 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
2024-11-23:02:44:12,793 INFO     [task.py:415] Building contexts for meta_mmlu on rank 0...
  0%|          | 0/2 [00:00<?, ?it/s]100%|██████████| 2/2 [00:00<00:00, 21129.99it/s]
2024-11-23:02:44:12,807 INFO     [evaluator.py:496] Running loglikelihood requests
<lm_eval.models.vllm_causallms.VLLM object at 0x7e126fcfac50>
reqtype:  loglikelihood
reqs:  [Instance(request_type='loglikelihood', doc={'input_question': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'input_correct_responses': ['Answer: C'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '2f9f3789c31bccfee18249d4e2b191cf856e5b1ef05272817f7703c85f7bca7f', 'input_choice_list': {'A': '6 and 10', 'B': '5 and 12', 'C': '10 and 12', 'D': '12 and 15'}, 'output_prediction_text': None, 'problem': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'answer': 2}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer:', ' A'), idx=0, metadata=('meta_mmlu', 0, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=0, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'input_correct_responses': ['Answer: C'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '2f9f3789c31bccfee18249d4e2b191cf856e5b1ef05272817f7703c85f7bca7f', 'input_choice_list': {'A': '6 and 10', 'B': '5 and 12', 'C': '10 and 12', 'D': '12 and 15'}, 'output_prediction_text': None, 'problem': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'answer': 2}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer:', ' B'), idx=1, metadata=('meta_mmlu', 0, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=0, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'input_correct_responses': ['Answer: C'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '2f9f3789c31bccfee18249d4e2b191cf856e5b1ef05272817f7703c85f7bca7f', 'input_choice_list': {'A': '6 and 10', 'B': '5 and 12', 'C': '10 and 12', 'D': '12 and 15'}, 'output_prediction_text': None, 'problem': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'answer': 2}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer:', ' C'), idx=2, metadata=('meta_mmlu', 0, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=0, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'input_correct_responses': ['Answer: C'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '2f9f3789c31bccfee18249d4e2b191cf856e5b1ef05272817f7703c85f7bca7f', 'input_choice_list': {'A': '6 and 10', 'B': '5 and 12', 'C': '10 and 12', 'D': '12 and 15'}, 'output_prediction_text': None, 'problem': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'answer': 2}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer:', ' D'), idx=3, metadata=('meta_mmlu', 0, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=0, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Evaluate −2(x − 3) for x = 2.', 'input_correct_responses': ['Answer: D'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '3260939534b25679362acf409872c321ede427a5117d95bf4eb2cb1d11575b8f', 'input_choice_list': {'A': '−4', 'B': '−2', 'C': '10', 'D': '2'}, 'output_prediction_text': None, 'problem': 'Evaluate −2(x − 3) for x = 2.', 'answer': 3}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer:', ' A'), idx=0, metadata=('meta_mmlu', 1, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=1, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Evaluate −2(x − 3) for x = 2.', 'input_correct_responses': ['Answer: D'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '3260939534b25679362acf409872c321ede427a5117d95bf4eb2cb1d11575b8f', 'input_choice_list': {'A': '−4', 'B': '−2', 'C': '10', 'D': '2'}, 'output_prediction_text': None, 'problem': 'Evaluate −2(x − 3) for x = 2.', 'answer': 3}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer:', ' B'), idx=1, metadata=('meta_mmlu', 1, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=1, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Evaluate −2(x − 3) for x = 2.', 'input_correct_responses': ['Answer: D'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '3260939534b25679362acf409872c321ede427a5117d95bf4eb2cb1d11575b8f', 'input_choice_list': {'A': '−4', 'B': '−2', 'C': '10', 'D': '2'}, 'output_prediction_text': None, 'problem': 'Evaluate −2(x − 3) for x = 2.', 'answer': 3}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer:', ' C'), idx=2, metadata=('meta_mmlu', 1, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=1, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Evaluate −2(x − 3) for x = 2.', 'input_correct_responses': ['Answer: D'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '3260939534b25679362acf409872c321ede427a5117d95bf4eb2cb1d11575b8f', 'input_choice_list': {'A': '−4', 'B': '−2', 'C': '10', 'D': '2'}, 'output_prediction_text': None, 'problem': 'Evaluate −2(x − 3) for x = 2.', 'answer': 3}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer:', ' D'), idx=3, metadata=('meta_mmlu', 1, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=1, repeats=1)]
Running loglikelihood requests:   0%|          | 0/8 [00:00<?, ?it/s]
Processed prompts:   0%|          | 0/8 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s][A
Processed prompts:  12%|█▎        | 1/8 [00:00<00:01,  6.12it/s, est. speed input: 3233.79 toks/s, output: 6.12 toks/s][AProcessed prompts: 100%|██████████| 8/8 [00:00<00:00, 47.85it/s, est. speed input: 24355.10 toks/s, output: 47.88 toks/s]
Running loglikelihood requests:  12%|█▎        | 1/8 [00:00<00:01,  5.79it/s]Running loglikelihood requests: 100%|██████████| 8/8 [00:00<00:00, 44.99it/s]
2024-11-23:02:44:15,097 INFO     [evaluation_tracker.py:206] Saving results aggregated
2024-11-23:02:44:15,102 INFO     [evaluation_tracker.py:287] Saving per-sample results for: meta_mmlu
Requests returned from model:  [(-1.1178319454193115, True), (-1.1178319454193115, True), (-1.4928319454193115, False), (-2.1178319454193115, False), (-1.0755325555801392, False), (-0.8255325555801392, True), (-1.8255325555801392, False), (-2.8255324363708496, False)]
vllm (pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42), gen_kwargs: (None), limit: 2.0, num_fewshot: None, batch_size: auto
|  Tasks  |Version|Filter|n-shot| Metric |   |Value|   |Stderr|
|---------|------:|------|-----:|--------|---|----:|---|-----:|
|meta_mmlu|      1|none  |     0|acc     |↑  |    0|±  |     0|
|         |       |none  |     0|acc_norm|↑  |    0|±  |     0|

[rank0]:[W1123 02:44:15.177666792 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
end: Sat Nov 23 02:44:18 UTC 2024
Sat Nov 23 02:49:23 UTC 2024 - running command: lm_eval --model vllm --model_args pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42 --tasks meta_mmlu --batch_size auto --output_path eval_results --seed 42 --log_samples --limit 2
nohup: ignoring input
2024-11-23:02:49:33,771 INFO     [__main__.py:279] Verbosity set to INFO
2024-11-23:02:49:49,150 WARNING  [__main__.py:312]  --limit SHOULD ONLY BE USED FOR TESTING.REAL METRICS SHOULD NOT BE COMPUTED USING LIMIT.
2024-11-23:02:49:49,150 INFO     [__main__.py:376] Selected Tasks: ['meta_mmlu']
2024-11-23:02:49:49,158 INFO     [evaluator.py:164] Setting random seed to 42 | Setting numpy seed to 42 | Setting torch manual seed to 42 | Setting fewshot manual seed to 42
2024-11-23:02:49:49,158 INFO     [evaluator.py:201] Initializing vllm model, with arguments: {'pretrained': 'meta-llama/Llama-3.2-1B', 'tensor_parallel_size': 1, 'dtype': 'auto', 'gpu_memory_utilization': 0.25, 'data_parallel_size': 1, 'max_model_len': 8192, 'add_bos_token': True, 'seed': 42}
INFO 11-23 02:49:57 config.py:350] This model supports multiple tasks: {'embedding', 'generate'}. Defaulting to 'generate'.
INFO 11-23 02:49:57 llm_engine.py:249] Initializing an LLM engine (v0.6.4.post1) with config: model='meta-llama/Llama-3.2-1B', speculative_config=None, tokenizer='meta-llama/Llama-3.2-1B', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=42, served_model_name=meta-llama/Llama-3.2-1B, num_scheduler_steps=1, chunked_prefill_enabled=False multi_step_stream_outputs=True, enable_prefix_caching=False, use_async_output_proc=True, use_cached_outputs=False, chat_template_text_format=string, mm_processor_kwargs=None, pooler_config=None)
INFO 11-23 02:49:58 selector.py:135] Using Flash Attention backend.
INFO 11-23 02:49:59 model_runner.py:1072] Starting to load model meta-llama/Llama-3.2-1B...
INFO 11-23 02:49:59 weight_utils.py:243] Using model weights format ['*.safetensors']
INFO 11-23 02:49:59 weight_utils.py:288] No model.safetensors.index.json found in remote.
Loading safetensors checkpoint shards:   0% Completed | 0/1 [00:00<?, ?it/s]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:01<00:00,  1.81s/it]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:01<00:00,  1.81s/it]

INFO 11-23 02:50:01 model_runner.py:1077] Loading model weights took 2.3185 GB
INFO 11-23 02:50:01 worker.py:232] Memory profiling results: total_gpu_memory=39.38GiB initial_memory_usage=2.82GiB peak_torch_memory=3.52GiB memory_usage_post_profile=2.84GiB non_torch_memory=0.51GiB kv_cache_size=5.81GiB gpu_memory_utilization=0.25
INFO 11-23 02:50:02 gpu_executor.py:113] # GPU blocks: 11900, # CPU blocks: 8192
INFO 11-23 02:50:02 gpu_executor.py:117] Maximum concurrency for 8192 tokens per request: 23.24x
INFO 11-23 02:50:05 model_runner.py:1400] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 11-23 02:50:05 model_runner.py:1404] If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 11-23 02:50:16 model_runner.py:1518] Graph capturing finished in 11 secs, took 0.14 GiB
2024-11-23:02:50:18,002 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
2024-11-23:02:50:18,015 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
2024-11-23:02:50:19,875 INFO     [task.py:415] Building contexts for meta_mmlu on rank 0...
  0%|          | 0/2 [00:00<?, ?it/s]100%|██████████| 2/2 [00:00<00:00, 21129.99it/s]
2024-11-23:02:50:19,891 INFO     [evaluator.py:496] Running loglikelihood requests
lm:  <lm_eval.models.vllm_causallms.VLLM object at 0x7f0cf8101180>
reqtype:  loglikelihood
reqs:  [Instance(request_type='loglikelihood', doc={'input_question': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'input_correct_responses': ['Answer: C'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '2f9f3789c31bccfee18249d4e2b191cf856e5b1ef05272817f7703c85f7bca7f', 'input_choice_list': {'A': '6 and 10', 'B': '5 and 12', 'C': '10 and 12', 'D': '12 and 15'}, 'output_prediction_text': None, 'problem': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'answer': 2}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer:', ' A'), idx=0, metadata=('meta_mmlu', 0, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=0, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'input_correct_responses': ['Answer: C'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '2f9f3789c31bccfee18249d4e2b191cf856e5b1ef05272817f7703c85f7bca7f', 'input_choice_list': {'A': '6 and 10', 'B': '5 and 12', 'C': '10 and 12', 'D': '12 and 15'}, 'output_prediction_text': None, 'problem': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'answer': 2}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer:', ' B'), idx=1, metadata=('meta_mmlu', 0, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=0, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'input_correct_responses': ['Answer: C'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '2f9f3789c31bccfee18249d4e2b191cf856e5b1ef05272817f7703c85f7bca7f', 'input_choice_list': {'A': '6 and 10', 'B': '5 and 12', 'C': '10 and 12', 'D': '12 and 15'}, 'output_prediction_text': None, 'problem': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'answer': 2}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer:', ' C'), idx=2, metadata=('meta_mmlu', 0, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=0, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'input_correct_responses': ['Answer: C'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '2f9f3789c31bccfee18249d4e2b191cf856e5b1ef05272817f7703c85f7bca7f', 'input_choice_list': {'A': '6 and 10', 'B': '5 and 12', 'C': '10 and 12', 'D': '12 and 15'}, 'output_prediction_text': None, 'problem': 'Two whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?', 'answer': 2}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nTwo whole numbers have a least common multiple of 60. Each number is less than or equal to 12. The greatest common factor of the two numbersis 2. What are the two numbers?\nA. 6 and 10\nB. 5 and 12\nC. 10 and 12\nD. 12 and 15\nAnswer:', ' D'), idx=3, metadata=('meta_mmlu', 0, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=0, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Evaluate −2(x − 3) for x = 2.', 'input_correct_responses': ['Answer: D'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '3260939534b25679362acf409872c321ede427a5117d95bf4eb2cb1d11575b8f', 'input_choice_list': {'A': '−4', 'B': '−2', 'C': '10', 'D': '2'}, 'output_prediction_text': None, 'problem': 'Evaluate −2(x − 3) for x = 2.', 'answer': 3}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer:', ' A'), idx=0, metadata=('meta_mmlu', 1, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=1, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Evaluate −2(x − 3) for x = 2.', 'input_correct_responses': ['Answer: D'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '3260939534b25679362acf409872c321ede427a5117d95bf4eb2cb1d11575b8f', 'input_choice_list': {'A': '−4', 'B': '−2', 'C': '10', 'D': '2'}, 'output_prediction_text': None, 'problem': 'Evaluate −2(x − 3) for x = 2.', 'answer': 3}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer:', ' B'), idx=1, metadata=('meta_mmlu', 1, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=1, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Evaluate −2(x − 3) for x = 2.', 'input_correct_responses': ['Answer: D'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '3260939534b25679362acf409872c321ede427a5117d95bf4eb2cb1d11575b8f', 'input_choice_list': {'A': '−4', 'B': '−2', 'C': '10', 'D': '2'}, 'output_prediction_text': None, 'problem': 'Evaluate −2(x − 3) for x = 2.', 'answer': 3}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer:', ' C'), idx=2, metadata=('meta_mmlu', 1, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=1, repeats=1), Instance(request_type='loglikelihood', doc={'input_question': 'Evaluate −2(x − 3) for x = 2.', 'input_correct_responses': ['Answer: D'], 'input_final_prompts': ['The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: A', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: B', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: C', 'The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer: D'], 'previously_is_correct': False, 'input_question_hash': '3260939534b25679362acf409872c321ede427a5117d95bf4eb2cb1d11575b8f', 'input_choice_list': {'A': '−4', 'B': '−2', 'C': '10', 'D': '2'}, 'output_prediction_text': None, 'problem': 'Evaluate −2(x − 3) for x = 2.', 'answer': 3}, arguments=('The following are multiple choice questions (with answers) about elementary mathematics.\n\nThe population of the city where Michelle was born is 145,826. What is the value of the 5 in the number 145,826?\nA. 5 thousands\nB. 5 hundreds\nC. 5 tens\nD. 5 ones\nAnswer: A\n\nOlivia used the rule "Add 11" to create the number pattern shown below. 10, 21, 32, 43, 54 Which statement about the number pattern is true?\nA. The 10th number in the pattern will be an even number.\nB. The number pattern will never have two even numbers next to each other.\nC. The next two numbers in the pattern will be an even number then an odd number.\nD. If the number pattern started with an odd number then the pattern would have only odd numbers in it.\nAnswer: B\n\nA total of 30 players will play basketball at a park. There will be exactly 5 players on each team. Which statement correctly explains how to find the number of teams needed?\nA. Add 5 to 30 to find 35 teams.\nB. Divide 30 by 5 to find 6 teams.\nC. Multiply 30 and 5 to find 150 teams.\nD. Subtract 5 from 30 to find 25 teams.\nAnswer: B\n\nA store sells 107 different colors of paint. They have 25 cans of each color in storage. The number of cans of paint the store has in storage can be found using the expression below. 107 × 25. How many cans of paint does the store have in storage?\nA. 749\nB. 2,675\nC. 2,945\nD. 4,250\nAnswer: B\n\nWhich expression is equivalent to 5 x 9?\nA. (5 x 4) x (6 x 5)\nB. (5 x 5) + (5 x 4)\nC. (5 x 5) + (5 x 9)\nD. (5 x 9) x (6 x 9)\nAnswer: B\n\nEvaluate −2(x − 3) for x = 2.\nA. −4\nB. −2\nC. 10\nD. 2\nAnswer:', ' D'), idx=3, metadata=('meta_mmlu', 1, 1), resps=[], filtered_resps={}, task_name='meta_mmlu', doc_id=1, repeats=1)]
Running loglikelihood requests:   0%|          | 0/8 [00:00<?, ?it/s]Model Inputs:  [[128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 11874, 4459, 5219, 617, 264, 3325, 4279, 5361, 315, 220, 1399, 13, 9062, 1396, 374, 2753, 1109, 477, 6273, 311, 220, 717, 13, 578, 12474, 4279, 8331, 315, 279, 1403, 5219, 285, 220, 17, 13, 3639, 527, 279, 1403, 5219, 5380, 32, 13, 220, 21, 323, 220, 605, 198, 33, 13, 220, 20, 323, 220, 717, 198, 34, 13, 220, 605, 323, 220, 717, 198, 35, 13, 220, 717, 323, 220, 868, 198, 16533, 25, 356], [128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 11874, 4459, 5219, 617, 264, 3325, 4279, 5361, 315, 220, 1399, 13, 9062, 1396, 374, 2753, 1109, 477, 6273, 311, 220, 717, 13, 578, 12474, 4279, 8331, 315, 279, 1403, 5219, 285, 220, 17, 13, 3639, 527, 279, 1403, 5219, 5380, 32, 13, 220, 21, 323, 220, 605, 198, 33, 13, 220, 20, 323, 220, 717, 198, 34, 13, 220, 605, 323, 220, 717, 198, 35, 13, 220, 717, 323, 220, 868, 198, 16533, 25, 362], [128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 11874, 4459, 5219, 617, 264, 3325, 4279, 5361, 315, 220, 1399, 13, 9062, 1396, 374, 2753, 1109, 477, 6273, 311, 220, 717, 13, 578, 12474, 4279, 8331, 315, 279, 1403, 5219, 285, 220, 17, 13, 3639, 527, 279, 1403, 5219, 5380, 32, 13, 220, 21, 323, 220, 605, 198, 33, 13, 220, 20, 323, 220, 717, 198, 34, 13, 220, 605, 323, 220, 717, 198, 35, 13, 220, 717, 323, 220, 868, 198, 16533, 25, 423], [128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 11874, 4459, 5219, 617, 264, 3325, 4279, 5361, 315, 220, 1399, 13, 9062, 1396, 374, 2753, 1109, 477, 6273, 311, 220, 717, 13, 578, 12474, 4279, 8331, 315, 279, 1403, 5219, 285, 220, 17, 13, 3639, 527, 279, 1403, 5219, 5380, 32, 13, 220, 21, 323, 220, 605, 198, 33, 13, 220, 20, 323, 220, 717, 198, 34, 13, 220, 605, 323, 220, 717, 198, 35, 13, 220, 717, 323, 220, 868, 198, 16533, 25, 426], [128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 83445, 25173, 17, 2120, 25173, 220, 18, 8, 369, 865, 284, 220, 17, 627, 32, 13, 25173, 19, 198, 33, 13, 25173, 17, 198, 34, 13, 220, 605, 198, 35, 13, 220, 17, 198, 16533, 25, 356], [128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 83445, 25173, 17, 2120, 25173, 220, 18, 8, 369, 865, 284, 220, 17, 627, 32, 13, 25173, 19, 198, 33, 13, 25173, 17, 198, 34, 13, 220, 605, 198, 35, 13, 220, 17, 198, 16533, 25, 362], [128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 83445, 25173, 17, 2120, 25173, 220, 18, 8, 369, 865, 284, 220, 17, 627, 32, 13, 25173, 19, 198, 33, 13, 25173, 17, 198, 34, 13, 220, 605, 198, 35, 13, 220, 17, 198, 16533, 25, 423], [128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 83445, 25173, 17, 2120, 25173, 220, 18, 8, 369, 865, 284, 220, 17, 627, 32, 13, 25173, 19, 198, 33, 13, 25173, 17, 198, 34, 13, 220, 605, 198, 35, 13, 220, 17, 198, 16533, 25, 426]]

Processed prompts:   0%|          | 0/8 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s][A
Processed prompts:  12%|█▎        | 1/8 [00:00<00:01,  6.15it/s, est. speed input: 3246.47 toks/s, output: 6.15 toks/s][AProcessed prompts: 100%|██████████| 8/8 [00:00<00:00, 48.04it/s, est. speed input: 24451.26 toks/s, output: 48.07 toks/s]
Running loglikelihood requests:  12%|█▎        | 1/8 [00:00<00:01,  4.83it/s]Running loglikelihood requests: 100%|██████████| 8/8 [00:00<00:00, 38.00it/s]
2024-11-23:02:50:22,169 INFO     [evaluation_tracker.py:206] Saving results aggregated
2024-11-23:02:50:22,175 INFO     [evaluation_tracker.py:287] Saving per-sample results for: meta_mmlu
Model Outputs:  [RequestOutput(request_id=0, prompt=None, prompt_token_ids=[128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 11874, 4459, 5219, 617, 264, 3325, 4279, 5361, 315, 220, 1399, 13, 9062, 1396, 374, 2753, 1109, 477, 6273, 311, 220, 717, 13, 578, 12474, 4279, 8331, 315, 279, 1403, 5219, 285, 220, 17, 13, 3639, 527, 279, 1403, 5219, 5380, 32, 13, 220, 21, 323, 220, 605, 198, 33, 13, 220, 20, 323, 220, 717, 198, 34, 13, 220, 605, 323, 220, 717, 198, 35, 13, 220, 717, 323, 220, 868, 198, 16533, 25, 356], encoder_prompt=None, encoder_prompt_token_ids=None, prompt_logprobs=[None, {791: Logprob(logprob=-3.620506763458252, rank=4, decoded_token=None), 14924: Logprob(logprob=-1.1830066442489624, rank=1, decoded_token=None)}, {2768: Logprob(logprob=-4.267952919006348, rank=2, decoded_token=None), 220: Logprob(logprob=-3.7054529190063477, rank=1, decoded_token=None)}, {527: Logprob(logprob=-3.0935873985290527, rank=3, decoded_token=None), 374: Logprob(logprob=-1.9685872793197632, rank=1, decoded_token=None)}, {5361: Logprob(logprob=-9.361089706420898, rank=708, decoded_token=None), 279: Logprob(logprob=-1.5485893487930298, rank=1, decoded_token=None)}, {5873: Logprob(logprob=-1.1175264120101929, rank=1, decoded_token=None)}, {4860: Logprob(logprob=-0.15363378822803497, rank=1, decoded_token=None)}, {320: Logprob(logprob=-3.388906955718994, rank=9, decoded_token=None), 389: Logprob(logprob=-1.7639068365097046, rank=1, decoded_token=None)}, {4291: Logprob(logprob=-3.4973137378692627, rank=2, decoded_token=None), 11865: Logprob(logprob=-0.6223137378692627, rank=1, decoded_token=None)}, {11503: Logprob(logprob=-0.987357497215271, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.4506547451019287, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.8773975372314453, rank=4, decoded_token=None), 389: Logprob(logprob=-1.5023976564407349, rank=1, decoded_token=None)}, {36256: Logprob(logprob=-8.630099296569824, rank=577, decoded_token=None), 279: Logprob(logprob=-1.1925991773605347, rank=1, decoded_token=None)}, {38696: Logprob(logprob=-3.769948959350586, rank=8, decoded_token=None), 19320: Logprob(logprob=-2.144948959350586, rank=1, decoded_token=None)}, {382: Logprob(logprob=-5.472397804260254, rank=18, decoded_token=None), 13: Logprob(logprob=-1.0973976850509644, rank=1, decoded_token=None)}, {791: Logprob(logprob=-3.5461583137512207, rank=5, decoded_token=None), 16: Logprob(logprob=-1.4211583137512207, rank=1, decoded_token=None)}, {7187: Logprob(logprob=-7.392093658447266, rank=164, decoded_token=None), 2768: Logprob(logprob=-2.3295936584472656, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.11663393676280975, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.73690128326416, rank=2, decoded_token=None), 264: Logprob(logprob=-0.48690128326416016, rank=1, decoded_token=None)}, {3363: Logprob(logprob=-1.8540297746658325, rank=1, decoded_token=None)}, {1405: Logprob(logprob=-5.987232208251953, rank=13, decoded_token=None), 315: Logprob(logprob=-0.23723231256008148, rank=1, decoded_token=None)}, {33126: Logprob(logprob=-9.044610023498535, rank=315, decoded_token=None), 358: Logprob(logprob=-1.2946101427078247, rank=1, decoded_token=None)}, {574: Logprob(logprob=-5.429495334625244, rank=8, decoded_token=None), 6439: Logprob(logprob=-0.4294951558113098, rank=1, decoded_token=None)}, {9405: Logprob(logprob=-0.40476104617118835, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.5629992485046387, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.7537806630134583, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-7.209847450256348, rank=134, decoded_token=None), 1041: Logprob(logprob=-2.7098476886749268, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.7134871482849121, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-8.75186538696289, rank=571, decoded_token=None), 931: Logprob(logprob=-0.376865029335022, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.47577813267707825, rank=1, decoded_token=None)}, {3639: Logprob(logprob=-4.106588840484619, rank=8, decoded_token=None), 578: Logprob(logprob=-1.2315888404846191, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.30162209272384644, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.16182462871074677, rank=1, decoded_token=None)}, {907: Logprob(logprob=-5.745996475219727, rank=27, decoded_token=None), 7187: Logprob(logprob=-0.8084966540336609, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.032959938049316406, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.9882255792617798, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.205665588378906, rank=12, decoded_token=None), 7187: Logprob(logprob=-1.2056655883789062, rank=1, decoded_token=None)}, {20: Logprob(logprob=-3.386111259460449, rank=3, decoded_token=None), 605: Logprob(logprob=-3.011111259460449, rank=1, decoded_token=None)}, {304: Logprob(logprob=-6.863307952880859, rank=33, decoded_token=None), 339: Logprob(logprob=-0.48830777406692505, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.4937672019004822, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.7949767112731934, rank=9, decoded_token=None), 2768: Logprob(logprob=-1.6699767112731934, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.8562200665473938, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-0.46025389432907104, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.35301274061203003, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-0.0504663847386837, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-3.7009406089782715, rank=5, decoded_token=None), 1980: Logprob(logprob=-0.8259406685829163, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.014418125152588, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.2552250325679779, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.18280577659606934, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.9818596839904785, rank=1, decoded_token=None)}, {9214: Logprob(logprob=-7.26568078994751, rank=42, decoded_token=None), 11: Logprob(logprob=-0.6406807899475098, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.34480056166648865, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0036241819616407156, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0007076143519952893, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021493716165423393, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.265846848487854, rank=1, decoded_token=None)}, {11758: Logprob(logprob=-1.8974242210388184, rank=2, decoded_token=None), 11990: Logprob(logprob=-1.3974242210388184, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.008312508463859558, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0016896746819838881, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000583597575314343, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006553467363119125, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.09962913393974304, rank=1, decoded_token=None)}, {22781: Logprob(logprob=-0.696441113948822, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.007642554119229317, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0023322305642068386, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0006073060794733465, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.019782857969403267, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.06486474722623825, rank=1, decoded_token=None)}, {6305: Logprob(logprob=-0.6396012306213379, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.25918030738830566, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.9573916792869568, rank=1, decoded_token=None), 36: Logprob(logprob=-0.9573916792869568, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.06022197753190994, rank=1, decoded_token=None)}, {362: Logprob(logprob=-1.2654039859771729, rank=2, decoded_token=None), 423: Logprob(logprob=-1.1404039859771729, rank=1, decoded_token=None)}, {271: Logprob(logprob=-1.2457599639892578, rank=2, decoded_token=None), 128001: Logprob(logprob=-0.7457600235939026, rank=1, decoded_token=None)}, {43819: Logprob(logprob=-12.215432167053223, rank=2611, decoded_token=None), 791: Logprob(logprob=-0.8404321670532227, rank=1, decoded_token=None)}, {21475: Logprob(logprob=-0.7314256429672241, rank=1, decoded_token=None)}, {1511: Logprob(logprob=-6.56179141998291, rank=48, decoded_token=None), 374: Logprob(logprob=-1.999291181564331, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.3226728439331055, rank=3, decoded_token=None), 264: Logprob(logprob=-1.322672724723816, rank=1, decoded_token=None)}, {6037: Logprob(logprob=-6.163534164428711, rank=55, decoded_token=None), 15150: Logprob(logprob=-2.538533926010132, rank=1, decoded_token=None)}, {330: Logprob(logprob=-3.6627614498138428, rank=9, decoded_token=None), 315: Logprob(logprob=-1.5377614498138428, rank=1, decoded_token=None)}, {2261: Logprob(logprob=-4.202095985412598, rank=14, decoded_token=None), 2746: Logprob(logprob=-2.7020959854125977, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.6789430379867554, rank=1, decoded_token=None)}, {806: Logprob(logprob=-4.852216720581055, rank=17, decoded_token=None), 20: Logprob(logprob=-1.4772168397903442, rank=1, decoded_token=None)}, {1: Logprob(logprob=-1.4486876726150513, rank=2, decoded_token=None), 311: Logprob(logprob=-0.9486876726150513, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.5747750997543335, rank=1, decoded_token=None)}, {1893: Logprob(logprob=-6.229022026062012, rank=44, decoded_token=None), 1505: Logprob(logprob=-1.4790222644805908, rank=1, decoded_token=None)}, {279: Logprob(logprob=-1.2839043140411377, rank=2, decoded_token=None), 264: Logprob(logprob=-0.7839043140411377, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.3298133611679077, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-6.342275142669678, rank=23, decoded_token=None), 220: Logprob(logprob=-0.27977514266967773, rank=1, decoded_token=None)}, {6982: Logprob(logprob=-2.9779157638549805, rank=5, decoded_token=None), 220: Logprob(logprob=-1.2279157638549805, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-0.6994138956069946, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.4830473065376282, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.417629241943359, rank=9, decoded_token=None), 3639: Logprob(logprob=-0.7926291227340698, rank=1, decoded_token=None)}, {605: Logprob(logprob=-4.466213703155518, rank=13, decoded_token=None), 806: Logprob(logprob=-2.0912137031555176, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.9247885942459106, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.1273905634880066, rank=1, decoded_token=None)}, {1691: Logprob(logprob=-0.8227850198745728, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.007400361355394125, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.01602531410753727, rank=1, decoded_token=None)}, {843: Logprob(logprob=-0.14333274960517883, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.03991517424583435, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.19991245865821838, rank=1, decoded_token=None)}, {3391: Logprob(logprob=-0.02759881317615509, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.08311088383197784, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3676953911781311, rank=1, decoded_token=None)}, {4370: Logprob(logprob=-0.017791442573070526, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-9.866714477539062, rank=126, decoded_token=None), 11: Logprob(logprob=-0.17921476066112518, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-4.3207597732543945, rank=8, decoded_token=None), 1396: Logprob(logprob=-1.0707597732543945, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.38952898979187, rank=2, decoded_token=None), 374: Logprob(logprob=-0.5145289897918701, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.5315698385238647, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.11095929145813, rank=3, decoded_token=None), 6037: Logprob(logprob=-0.8609593510627747, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.3972514867782593, rank=1, decoded_token=None), 220: Logprob(logprob=-1.3972514867782593, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.22985251247882843, rank=1, decoded_token=None)}, {837: Logprob(logprob=-0.6552088856697083, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.3445965349674225, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.07507845014333725, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.009831340983510017, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.5897692441940308, rank=1, decoded_token=None)}, {220: Logprob(logprob=-2.430539608001709, rank=5, decoded_token=None), 1176: Logprob(logprob=-2.055539608001709, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.135545015335083, rank=3, decoded_token=None), 806: Logprob(logprob=-1.885545015335083, rank=1, decoded_token=None)}, {339: Logprob(logprob=-0.6885674595832825, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.1400470733642578, rank=2, decoded_token=None), 4751: Logprob(logprob=-0.5150470733642578, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.2480833530426025, rank=2, decoded_token=None), 374: Logprob(logprob=-0.4980833828449249, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.013370846398174763, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.1963651180267334, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.482834815979004, rank=2, decoded_token=None), 374: Logprob(logprob=-0.10783478617668152, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.2007579803466797, rank=1, decoded_token=None)}, {459: Logprob(logprob=-4.266760349273682, rank=6, decoded_token=None), 220: Logprob(logprob=-0.5167602300643921, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.4180258810520172, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.021704640239477158, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.2175983190536499, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0018430643249303102, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0003660247311927378, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.05719471722841263, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.4022200107574463, rank=4, decoded_token=None), 220: Logprob(logprob=-0.2772199809551239, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.5990962982177734, rank=4, decoded_token=None), 220: Logprob(logprob=-1.849096417427063, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.754885196685791, rank=1, decoded_token=None)}, {2646: Logprob(logprob=-3.085150718688965, rank=8, decoded_token=None), 3136: Logprob(logprob=-1.8351507186889648, rank=1, decoded_token=None)}, {617: Logprob(logprob=-2.3687305450439453, rank=3, decoded_token=None), 842: Logprob(logprob=-1.1187306642532349, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.649540424346924, rank=8, decoded_token=None), 264: Logprob(logprob=-0.8995404243469238, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-2.7209155559539795, rank=4, decoded_token=None), 24871: Logprob(logprob=-0.7209156155586243, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.07320179790258408, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-3.1266684532165527, rank=4, decoded_token=None), 304: Logprob(logprob=-0.8766685128211975, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.01429002359509468, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-0.0503406785428524, rank=1, decoded_token=None)}, {1023: Logprob(logprob=-0.0030884684529155493, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03331640362739563, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.011476805433630943, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002609150833450258, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.14198358356952667, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-5.121759414672852, rank=9, decoded_token=None), 1396: Logprob(logprob=-0.8717594742774963, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.605440855026245, rank=4, decoded_token=None), 1396: Logprob(logprob=-0.23044079542160034, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.1128024309873581, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.31675779819488525, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.007474906742572784, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.02105293981730938, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.08588151633739471, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.4892382323741913, rank=1, decoded_token=None)}, {459: Logprob(logprob=-3.0233283042907715, rank=5, decoded_token=None), 220: Logprob(logprob=-1.7733283042907715, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.8158836364746094, rank=2, decoded_token=None), 10535: Logprob(logprob=-0.6908836364746094, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.0712813287973404, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-7.487314224243164, rank=28, decoded_token=None), 627: Logprob(logprob=-0.6123140454292297, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.1590193808078766, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.011315456591546535, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.005359092261642218, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03135305643081665, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.02188076637685299, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000491021724883467, rank=1, decoded_token=None)}, {1442: Logprob(logprob=-4.837580680847168, rank=7, decoded_token=None), 578: Logprob(logprob=-0.3375808596611023, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.5674490332603455, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.3511098623275757, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.2133203744888306, rank=1, decoded_token=None), 374: Logprob(logprob=-1.2133203744888306, rank=1, decoded_token=None)}, {3940: Logprob(logprob=-4.17018461227417, rank=14, decoded_token=None), 374: Logprob(logprob=-1.42018461227417, rank=1, decoded_token=None)}, {449: Logprob(logprob=-0.05720282346010208, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.9503310322761536, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.7719177007675171, rank=2, decoded_token=None), 1524: Logprob(logprob=-0.6469177007675171, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.008971618488430977, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-2.8240914344787598, rank=2, decoded_token=None), 11: Logprob(logprob=-0.19909141957759857, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.6145686507225037, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.596506357192993, rank=3, decoded_token=None), 1828: Logprob(logprob=-0.47150641679763794, rank=1, decoded_token=None)}, {1053: Logprob(logprob=-2.0979936122894287, rank=2, decoded_token=None), 690: Logprob(logprob=-0.22299352288246155, rank=1, decoded_token=None)}, {617: Logprob(logprob=-3.0427448749542236, rank=6, decoded_token=None), 2646: Logprob(logprob=-0.9177448153495789, rank=1, decoded_token=None)}, {1193: Logprob(logprob=-3.433971643447876, rank=7, decoded_token=None), 459: Logprob(logprob=-0.8089715838432312, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.313199520111084, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.01859915629029274, rank=1, decoded_token=None)}, {304: Logprob(logprob=-2.8377554416656494, rank=2, decoded_token=None), 627: Logprob(logprob=-0.33775535225868225, rank=1, decoded_token=None)}, {433: Logprob(logprob=-0.3653806447982788, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.20377226173877716, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.02473527193069458, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0027272433508187532, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.1850049495697021, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.19033809006214142, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.309290647506714, rank=2, decoded_token=None), 791: Logprob(logprob=-1.9342906475067139, rank=1, decoded_token=None)}, {2860: Logprob(logprob=-5.905457496643066, rank=57, decoded_token=None), 1396: Logprob(logprob=-2.5929572582244873, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.027499310672283173, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.23535610735416412, rank=1, decoded_token=None)}, {966: Logprob(logprob=-4.081752777099609, rank=3, decoded_token=None), 605: Logprob(logprob=-3.8317525386810303, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-6.079629898071289, rank=50, decoded_token=None), 4236: Logprob(logprob=-1.7046300172805786, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.493253231048584, rank=7, decoded_token=None), 31408: Logprob(logprob=-1.9932533502578735, rank=1, decoded_token=None)}, {1514: Logprob(logprob=-1.6049902439117432, rank=2, decoded_token=None), 387: Logprob(logprob=-0.9799902439117432, rank=1, decoded_token=None)}, {19794: Logprob(logprob=-4.2269792556762695, rank=6, decoded_token=None), 304: Logprob(logprob=-0.7269791960716248, rank=1, decoded_token=None)}, {520: Logprob(logprob=-2.5716304779052734, rank=4, decoded_token=None), 304: Logprob(logprob=-0.6966304779052734, rank=1, decoded_token=None)}, {264: Logprob(logprob=-0.8206021785736084, rank=1, decoded_token=None)}, {6246: Logprob(logprob=-5.323214530944824, rank=24, decoded_token=None), 16520: Logprob(logprob=-1.0732142925262451, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.8638421297073364, rank=1, decoded_token=None)}, {2684: Logprob(logprob=-3.016662120819092, rank=7, decoded_token=None), 1442: Logprob(logprob=-1.7666622400283813, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.6918129324913025, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.022499410435557365, rank=1, decoded_token=None)}, {7041: Logprob(logprob=-3.962672472000122, rank=6, decoded_token=None), 220: Logprob(logprob=-0.3376724421977997, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3280467987060547, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.23579740524292, rank=1, decoded_token=None), 17: Logprob(logprob=-2.23579740524292, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-0.6167428493499756, rank=1, decoded_token=None)}, {389: Logprob(logprob=-2.094090461730957, rank=4, decoded_token=None), 505: Logprob(logprob=-1.719090461730957, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-1.238318681716919, rank=2, decoded_token=None), 279: Logprob(logprob=-0.4883187413215637, rank=1, decoded_token=None)}, {2128: Logprob(logprob=-0.10444443672895432, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.15527960658073425, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-2.8790693283081055, rank=4, decoded_token=None), 2650: Logprob(logprob=-1.004069447517395, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-1.269631266593933, rank=2, decoded_token=None), 315: Logprob(logprob=-1.019631266593933, rank=1, decoded_token=None)}, {12722: Logprob(logprob=-4.804388999938965, rank=9, decoded_token=None), 374: Logprob(logprob=-0.5543891191482544, rank=1, decoded_token=None)}, {15100: Logprob(logprob=-3.970444679260254, rank=7, decoded_token=None), 16964: Logprob(logprob=-0.5954446792602539, rank=1, decoded_token=None)}, {1268: Logprob(logprob=-1.029451847076416, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.8737099170684814, rank=3, decoded_token=None), 279: Logprob(logprob=-1.2487099170684814, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-1.841010332107544, rank=2, decoded_token=None), 8417: Logprob(logprob=-1.091010332107544, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.113349549472332, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.29112255573272705, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.009947842918336391, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.8003526926040649, rank=1, decoded_token=None)}, {4460: Logprob(logprob=-3.4189629554748535, rank=3, decoded_token=None), 430: Logprob(logprob=-0.7939630150794983, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9348305463790894, rank=2, decoded_token=None), 311: Logprob(logprob=-0.8098305463790894, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.037669867277145386, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0022645562421530485, rank=1, decoded_token=None)}, {2758: Logprob(logprob=-3.4584977626800537, rank=8, decoded_token=None), 578: Logprob(logprob=-2.0834977626800537, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3807215392589569, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.9317857027053833, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.39621296525001526, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.3208718299865723, rank=2, decoded_token=None), 279: Logprob(logprob=-0.44587182998657227, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.10219656676054001, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.7788331508636475, rank=2, decoded_token=None), 627: Logprob(logprob=-0.7788332104682922, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.45813241600990295, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.933356761932373, rank=4, decoded_token=None), 279: Logprob(logprob=-0.05835668370127678, rank=1, decoded_token=None)}, {1758: Logprob(logprob=-0.9147714376449585, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.909633994102478, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.44750797748565674, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0014780559577047825, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001387499796692282, rank=1, decoded_token=None)}, {64002: Logprob(logprob=-2.5448737144470215, rank=3, decoded_token=None), 94310: Logprob(logprob=-0.544873833656311, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04134264215826988, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.1306612491607666, rank=1, decoded_token=None)}, {555: Logprob(logprob=-0.03507496044039726, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0044165924191474915, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.013939524069428444, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.09804058820009232, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.0629529133439064, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.240189328789711, rank=1, decoded_token=None)}, {21: Logprob(logprob=-0.03781026229262352, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.01011602021753788, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.05886910483241081, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0013978243805468082, rank=1, decoded_token=None)}, {13: Logprob(logprob=-9.798523387871683e-05, rank=1, decoded_token=None)}, {72159: Logprob(logprob=-1.417578935623169, rank=2, decoded_token=None), 94310: Logprob(logprob=-0.792578935623169, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.02184729278087616, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.16513295471668243, rank=1, decoded_token=None)}, {323: Logprob(logprob=-5.760368347167969, rank=2, decoded_token=None), 555: Logprob(logprob=-0.010368410497903824, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.004999872762709856, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.10827615857124329, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.17176643013954163, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.027458835393190384, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04579097405076027, rank=1, decoded_token=None)}, {3965: Logprob(logprob=-0.16355350613594055, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.10822748392820358, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.008487226441502571, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0020695950370281935, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000342191313393414, rank=1, decoded_token=None)}, {94310: Logprob(logprob=-0.7333000302314758, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.024686889722943306, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.6213490962982178, rank=1, decoded_token=None)}, {505: Logprob(logprob=-0.10929779708385468, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.010756724514067173, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.05260276049375534, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.02710282802581787, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.014247246086597443, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04090675339102745, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.008638868108391762, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.0173895675688982, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.05997175723314285, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.00443486962467432, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0005690624238923192, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.335664987564087, rank=3, decoded_token=None), 356: Logprob(logprob=-1.210664987564087, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.20828098058700562, rank=1, decoded_token=None)}, {32: Logprob(logprob=-1.9398690462112427, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-5.220652103424072, rank=28, decoded_token=None), 2860: Logprob(logprob=-3.0956521034240723, rank=1, decoded_token=None)}, {31878: Logprob(logprob=-1.599919319152832, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.733023762702942, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-8.531267166137695, rank=187, decoded_token=None), 18: Logprob(logprob=-2.531266689300537, rank=1, decoded_token=None)}, {2204: Logprob(logprob=-2.716043472290039, rank=2, decoded_token=None), 13840: Logprob(logprob=-2.466043472290039, rank=1, decoded_token=None)}, {8146: Logprob(logprob=-5.786083698272705, rank=26, decoded_token=None), 4595: Logprob(logprob=-1.411083698272705, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.025601888075470924, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-3.9537112712860107, rank=11, decoded_token=None), 37824: Logprob(logprob=-2.8287112712860107, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.3711868226528168, rank=1, decoded_token=None)}, {2435: Logprob(logprob=-4.847472190856934, rank=13, decoded_token=None), 1442: Logprob(logprob=-1.4724724292755127, rank=1, decoded_token=None)}, {617: Logprob(logprob=-1.45283043384552, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.8435330986976624, rank=1, decoded_token=None)}, {914: Logprob(logprob=-4.36965799331665, rank=21, decoded_token=None), 18: Logprob(logprob=-2.9946579933166504, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-4.7997283935546875, rank=13, decoded_token=None), 2204: Logprob(logprob=-1.0497283935546875, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.16669881343841553, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-2.0677084922790527, rank=2, decoded_token=None), 2579: Logprob(logprob=-1.8177084922790527, rank=1, decoded_token=None)}, {1933: Logprob(logprob=-0.1227213442325592, rank=1, decoded_token=None)}, {304: Logprob(logprob=-3.446204662322998, rank=5, decoded_token=None), 13: Logprob(logprob=-0.4462047219276428, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-7.250609874725342, rank=17, decoded_token=None), 5708: Logprob(logprob=-0.25060996413230896, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.1065310388803482, rank=1, decoded_token=None)}, {578: Logprob(logprob=-2.566020965576172, rank=5, decoded_token=None), 2650: Logprob(logprob=-1.3160210847854614, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.9273428916931152, rank=3, decoded_token=None), 3637: Logprob(logprob=-0.8023430109024048, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.08843708783388138, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.6100079417228699, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.7515377402305603, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-2.1421217918395996, rank=2, decoded_token=None), 1855: Logprob(logprob=-0.5171217322349548, rank=1, decoded_token=None)}, {279: Logprob(logprob=-3.456434965133667, rank=6, decoded_token=None), 304: Logprob(logprob=-1.331434965133667, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.02585725486278534, rank=1, decoded_token=None)}, {706: Logprob(logprob=-0.38343092799186707, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.708461880683899, rank=2, decoded_token=None), 374: Logprob(logprob=-1.083461880683899, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.23030529916286469, rank=1, decoded_token=None)}, {649: Logprob(logprob=-2.6108829975128174, rank=2, decoded_token=None), 374: Logprob(logprob=-0.36088305711746216, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.057374272495508194, rank=1, decoded_token=None)}, {1766: Logprob(logprob=-2.6309587955474854, rank=4, decoded_token=None), 5439: Logprob(logprob=-1.1309587955474854, rank=1, decoded_token=None)}, {1701: Logprob(logprob=-2.2968969345092773, rank=2, decoded_token=None), 555: Logprob(logprob=-0.17189693450927734, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.41828861832618713, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-3.6377298831939697, rank=7, decoded_token=None), 6037: Logprob(logprob=-1.2627298831939697, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-4.555124759674072, rank=14, decoded_token=None), 220: Logprob(logprob=-1.3051248788833618, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.17938224971294403, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.9476473331451416, rank=2, decoded_token=None), 3639: Logprob(logprob=-1.1976473331451416, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-0.4874989986419678, rank=1, decoded_token=None)}, {25800: Logprob(logprob=-3.846048593521118, rank=9, decoded_token=None), 11: Logprob(logprob=-1.7835485935211182, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.18882788717746735, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.07510089874267578, rank=1, decoded_token=None)}, {13: Logprob(logprob=-2.343728542327881, rank=3, decoded_token=None), 284: Logprob(logprob=-1.5937285423278809, rank=1, decoded_token=None)}, {2650: Logprob(logprob=-3.1135451793670654, rank=3, decoded_token=None), 3639: Logprob(logprob=-0.6135452389717102, rank=1, decoded_token=None)}, {1690: Logprob(logprob=-0.08424817770719528, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.7079728245735168, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.14217698574066162, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-0.18304136395454407, rank=1, decoded_token=None)}, {1587: Logprob(logprob=-0.9694701433181763, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.025537513196468353, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.003264813916757703, rank=1, decoded_token=None)}, {617: Logprob(logprob=-0.09910587221384048, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.1510932743549347, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.03838161751627922, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.09627294540405273, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.07186505943536758, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.002630585338920355, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021421492099761963, rank=1, decoded_token=None)}, {25541: Logprob(logprob=-10.88266658782959, rank=909, decoded_token=None), 7699: Logprob(logprob=-2.2576663494110107, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.7218905091285706, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0011835244949907064, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00015138434537220746, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0014886498684063554, rank=1, decoded_token=None)}, {17: Logprob(logprob=-3.907280206680298, rank=6, decoded_token=None), 7699: Logprob(logprob=-3.032280206680298, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.0223177969455719, rank=1, decoded_token=None)}, {21129: Logprob(logprob=-5.540557861328125, rank=44, decoded_token=None), 2636: Logprob(logprob=-3.540557622909546, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.008849094621837139, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.00032646095496602356, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001445904199499637, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0016035091830417514, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.3098583221435547, rank=2, decoded_token=None), 20: Logprob(logprob=-2.1848583221435547, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.006650575902312994, rank=1, decoded_token=None)}, {24599: Logprob(logprob=-6.172876358032227, rank=80, decoded_token=None), 21129: Logprob(logprob=-2.5478761196136475, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.004533370956778526, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0005069877952337265, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002643712505232543, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.00395266804844141, rank=1, decoded_token=None)}, {19: Logprob(logprob=-2.4699602127075195, rank=3, decoded_token=None), 18: Logprob(logprob=-0.84496009349823, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.0012282931711524725, rank=1, decoded_token=None)}, {5154: Logprob(logprob=-5.722906112670898, rank=71, decoded_token=None), 18070: Logprob(logprob=-2.8479063510894775, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.48243021965026855, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004707326181232929, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0004094000905752182, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.0903127193450928, rank=1, decoded_token=None), 362: Logprob(logprob=-1.0903127193450928, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.21004998683929443, rank=1, decoded_token=None)}, {23956: Logprob(logprob=-3.7082245349884033, rank=5, decoded_token=None), 32: Logprob(logprob=-1.7082245349884033, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-2.328795909881592, rank=3, decoded_token=None), 315: Logprob(logprob=-1.4537959098815918, rank=1, decoded_token=None)}, {374: Logprob(logprob=-1.3939491510391235, rank=1, decoded_token=None)}, {13890: Logprob(logprob=-0.3086131513118744, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.004158303141593933, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.5719388723373413, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.611593246459961, rank=3, decoded_token=None), 17: Logprob(logprob=-2.486593246459961, rank=1, decoded_token=None)}, {865: Logprob(logprob=-3.814181327819824, rank=6, decoded_token=None), 25800: Logprob(logprob=-0.9391812086105347, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.21246875822544098, rank=1, decoded_token=None)}, {24: Logprob(logprob=-3.2393479347229004, rank=8, decoded_token=None), 17: Logprob(logprob=-2.1143479347229004, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9484657645225525, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.02641945704817772, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0019446763908490539, rank=1, decoded_token=None)}, {320: Logprob(logprob=-4.043663024902344, rank=2, decoded_token=None), 220: Logprob(logprob=-0.0436631478369236, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3292904496192932, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7795792818069458, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.019342729821801186, rank=1, decoded_token=None)}, {19: Logprob(logprob=-3.8902170658111572, rank=6, decoded_token=None), 24: Logprob(logprob=-0.2652171552181244, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.05693596974015236, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7711688876152039, rank=1, decoded_token=None)}, {320: Logprob(logprob=-1.7098952531814575, rank=2, decoded_token=None), 220: Logprob(logprob=-0.2098952829837799, rank=1, decoded_token=None)}, {21: Logprob(logprob=-3.9887096881866455, rank=6, decoded_token=None), 20: Logprob(logprob=-0.8637097477912903, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.05180598795413971, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006352707277983427, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.6478800773620605, rank=5, decoded_token=None), 18: Logprob(logprob=-1.1478800773620605, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.06078224629163742, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0037563731893897057, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00020287363440729678, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.5973082780838013, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3547166585922241, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.1522906869649887, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.119587242603302, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.250182867050171, rank=4, decoded_token=None), 24: Logprob(logprob=-1.250182867050171, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.21551699936389923, rank=1, decoded_token=None)}, {489: Logprob(logprob=-4.195828914642334, rank=3, decoded_token=None), 865: Logprob(logprob=-0.0708288699388504, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.3979986310005188, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.6019997596740723, rank=3, decoded_token=None), 21: Logprob(logprob=-1.2269997596740723, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.012111456133425236, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.02054995857179165, rank=1, decoded_token=None)}, {19: Logprob(logprob=-1.0867620706558228, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.14609402418136597, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0014072287594899535, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00014137222024146467, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.401207834482193, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.18403267860412598, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.15473514795303345, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.06539695709943771, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.4415698051452637, rank=3, decoded_token=None), 19: Logprob(logprob=-1.1915698051452637, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.11237519979476929, rank=1, decoded_token=None)}, {489: Logprob(logprob=-0.7666293382644653, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.39565205574035645, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.5823985934257507, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.031112726777791977, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.06674905866384506, rank=1, decoded_token=None)}, {24: Logprob(logprob=-1.1196229457855225, rank=2, decoded_token=None), 19: Logprob(logprob=-0.9946228861808777, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.013978317379951477, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.000894146622158587, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002002515539061278, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.19024042785167694, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.08259163796901703, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.11528829485177994, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04026882350444794, rank=1, decoded_token=None)}, {24: Logprob(logprob=-0.6260170340538025, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.025457678362727165, rank=1, decoded_token=None)}, {865: Logprob(logprob=-4.2807393074035645, rank=4, decoded_token=None), 489: Logprob(logprob=-0.15573909878730774, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.06027596443891525, rank=1, decoded_token=None)}, {21: Logprob(logprob=-1.8035647869110107, rank=2, decoded_token=None), 20: Logprob(logprob=-0.42856475710868835, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.025070033967494965, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.002612869720906019, rank=1, decoded_token=None)}, {24: Logprob(logprob=-4.944259166717529, rank=4, decoded_token=None), 20: Logprob(logprob=-0.19425919651985168, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.016041269525885582, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004313688259571791, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0003240775258745998, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.1086416244506836, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.18588051199913025, rank=1, decoded_token=None)}, {11874: Logprob(logprob=-5.220853328704834, rank=13, decoded_token=None), 32: Logprob(logprob=-1.8458532094955444, rank=1, decoded_token=None)}, {4459: Logprob(logprob=-6.961170196533203, rank=118, decoded_token=None), 5219: Logprob(logprob=-1.836169958114624, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.7194890975952148, rank=1, decoded_token=None)}, {617: Logprob(logprob=-1.3559916019439697, rank=2, decoded_token=None), 527: Logprob(logprob=-1.2309916019439697, rank=1, decoded_token=None)}, {264: Logprob(logprob=-0.6008616089820862, rank=1, decoded_token=None)}, {3325: Logprob(logprob=-9.21973705291748, rank=37, decoded_token=None), 2694: Logprob(logprob=-0.2822372615337372, rank=1, decoded_token=None)}, {4279: Logprob(logprob=-0.05753443390130997, rank=1, decoded_token=None)}, {5361: Logprob(logprob=-0.45470237731933594, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.1912495344877243, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.023397311568260193, rank=1, decoded_token=None)}, {1399: Logprob(logprob=-3.9711475372314453, rank=14, decoded_token=None), 717: Logprob(logprob=-2.3461475372314453, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.09623148292303085, rank=1, decoded_token=None)}, {9062: Logprob(logprob=-5.050774574279785, rank=12, decoded_token=None), 578: Logprob(logprob=-1.175774335861206, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.6333088874816895, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.35156384110450745, rank=1, decoded_token=None)}, {2753: Logprob(logprob=-2.4849326610565186, rank=3, decoded_token=None), 220: Logprob(logprob=-1.1099326610565186, rank=1, decoded_token=None)}, {1109: Logprob(logprob=-0.003735114587470889, rank=1, decoded_token=None)}, {477: Logprob(logprob=-2.9097344875335693, rank=3, decoded_token=None), 220: Logprob(logprob=-0.40973448753356934, rank=1, decoded_token=None)}, {6273: Logprob(logprob=-0.013717547990381718, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.005777327343821526, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.09111858904361725, rank=1, decoded_token=None)}, {717: Logprob(logprob=-5.106393337249756, rank=27, decoded_token=None), 1041: Logprob(logprob=-1.9813933372497559, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.1538446694612503, rank=1, decoded_token=None)}, {578: Logprob(logprob=-1.602337121963501, rank=3, decoded_token=None), 16299: Logprob(logprob=-0.977337121963501, rank=1, decoded_token=None)}, {12474: Logprob(logprob=-2.6630983352661133, rank=4, decoded_token=None), 3325: Logprob(logprob=-1.2880984544754028, rank=1, decoded_token=None)}, {4279: Logprob(logprob=-0.6888583898544312, rank=1, decoded_token=None)}, {8331: Logprob(logprob=-0.4009769856929779, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.16255250573158264, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.33479413390159607, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-0.20367619395256042, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.26733827590942383, rank=1, decoded_token=None)}, {285: Logprob(logprob=-9.538082122802734, rank=41, decoded_token=None), 374: Logprob(logprob=-0.03808215260505676, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.9306405186653137, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.007215976715088, rank=2, decoded_token=None), 21: Logprob(logprob=-1.6322158575057983, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.17282874882221222, rank=1, decoded_token=None)}, {3639: Logprob(logprob=-1.127549409866333, rank=2, decoded_token=None), 16299: Logprob(logprob=-0.877549409866333, rank=1, decoded_token=None)}, {527: Logprob(logprob=-2.004128932952881, rank=2, decoded_token=None), 374: Logprob(logprob=-0.2541288137435913, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.08610685169696808, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-0.31307634711265564, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.6419362425804138, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.09086183458566666, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.015456883236765862, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0013862771447747946, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.038329992443323135, rank=1, decoded_token=None)}, {21: Logprob(logprob=-1.907236099243164, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.24684971570968628, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.005438295193016529, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.3189382553100586, rank=3, decoded_token=None), 717: Logprob(logprob=-1.443938136100769, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.02410171739757061, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0009358317474834621, rank=1, decoded_token=None)}, {13: Logprob(logprob=-7.128461584215984e-05, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.004888962022960186, rank=1, decoded_token=None)}, {20: Logprob(logprob=-3.057605028152466, rank=7, decoded_token=None), 21: Logprob(logprob=-1.5576050281524658, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.02449881099164486, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0014962679706513882, rank=1, decoded_token=None)}, {717: Logprob(logprob=-1.258972406387329, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0013371107634156942, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.00025960413040593266, rank=1, decoded_token=None)}, {13: Logprob(logprob=-7.068861305015162e-05, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.005708463490009308, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.931321620941162, rank=7, decoded_token=None), 19: Logprob(logprob=-1.4313217401504517, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.003584271762520075, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0014222278259694576, rank=1, decoded_token=None)}, {717: Logprob(logprob=-0.7489094734191895, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0011520899133756757, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0003152588615193963, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00017391123401466757, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.015513576567173004, rank=1, decoded_token=None)}, {717: Logprob(logprob=-2.203749179840088, rank=3, decoded_token=None), 21: Logprob(logprob=-1.203749179840088, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.002027838258072734, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0010093123419210315, rank=1, decoded_token=None)}, {868: Logprob(logprob=-2.2409543991088867, rank=2, decoded_token=None), 605: Logprob(logprob=-0.9909543395042419, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.02810521610081196, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.0029396675527095795, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0005796659388579428, rank=1, decoded_token=None)}, {356: Logprob(logprob=-1.4928319454193115, rank=3, decoded_token=None), 362: Logprob(logprob=-1.1178319454193115, rank=1, decoded_token=None)}], outputs=[CompletionOutput(index=0, text='', token_ids=(271,), cumulative_logprob=None, logprobs=None, finish_reason=length, stop_reason=None)], finished=True, metrics=RequestMetrics(arrival_time=1732330219.912572, last_token_time=1732330219.912572, first_scheduled_time=1732330219.9404528, first_token_time=1732330220.0975826, time_in_queue=0.02788090705871582, finished_time=1732330220.0984511, scheduler_time=0.002440982001644443, model_forward_time=None, model_execute_time=None), lora_request=None, num_cached_tokens=0), RequestOutput(request_id=1, prompt=None, prompt_token_ids=[128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 11874, 4459, 5219, 617, 264, 3325, 4279, 5361, 315, 220, 1399, 13, 9062, 1396, 374, 2753, 1109, 477, 6273, 311, 220, 717, 13, 578, 12474, 4279, 8331, 315, 279, 1403, 5219, 285, 220, 17, 13, 3639, 527, 279, 1403, 5219, 5380, 32, 13, 220, 21, 323, 220, 605, 198, 33, 13, 220, 20, 323, 220, 717, 198, 34, 13, 220, 605, 323, 220, 717, 198, 35, 13, 220, 717, 323, 220, 868, 198, 16533, 25, 362], encoder_prompt=None, encoder_prompt_token_ids=None, prompt_logprobs=[None, {791: Logprob(logprob=-3.620506763458252, rank=4, decoded_token=None), 14924: Logprob(logprob=-1.1830066442489624, rank=1, decoded_token=None)}, {2768: Logprob(logprob=-4.267952919006348, rank=2, decoded_token=None), 220: Logprob(logprob=-3.7054529190063477, rank=1, decoded_token=None)}, {527: Logprob(logprob=-3.0935873985290527, rank=3, decoded_token=None), 374: Logprob(logprob=-1.9685872793197632, rank=1, decoded_token=None)}, {5361: Logprob(logprob=-9.361089706420898, rank=708, decoded_token=None), 279: Logprob(logprob=-1.5485893487930298, rank=1, decoded_token=None)}, {5873: Logprob(logprob=-1.1175264120101929, rank=1, decoded_token=None)}, {4860: Logprob(logprob=-0.15363378822803497, rank=1, decoded_token=None)}, {320: Logprob(logprob=-3.388906955718994, rank=9, decoded_token=None), 389: Logprob(logprob=-1.7639068365097046, rank=1, decoded_token=None)}, {4291: Logprob(logprob=-3.4973137378692627, rank=2, decoded_token=None), 11865: Logprob(logprob=-0.6223137378692627, rank=1, decoded_token=None)}, {11503: Logprob(logprob=-0.987357497215271, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.4506547451019287, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.8773975372314453, rank=4, decoded_token=None), 389: Logprob(logprob=-1.5023976564407349, rank=1, decoded_token=None)}, {36256: Logprob(logprob=-8.630099296569824, rank=577, decoded_token=None), 279: Logprob(logprob=-1.1925991773605347, rank=1, decoded_token=None)}, {38696: Logprob(logprob=-3.769948959350586, rank=8, decoded_token=None), 19320: Logprob(logprob=-2.144948959350586, rank=1, decoded_token=None)}, {382: Logprob(logprob=-5.472397804260254, rank=18, decoded_token=None), 13: Logprob(logprob=-1.0973976850509644, rank=1, decoded_token=None)}, {791: Logprob(logprob=-3.5461583137512207, rank=5, decoded_token=None), 16: Logprob(logprob=-1.4211583137512207, rank=1, decoded_token=None)}, {7187: Logprob(logprob=-7.392093658447266, rank=164, decoded_token=None), 2768: Logprob(logprob=-2.3295936584472656, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.11663393676280975, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.73690128326416, rank=2, decoded_token=None), 264: Logprob(logprob=-0.48690128326416016, rank=1, decoded_token=None)}, {3363: Logprob(logprob=-1.8540297746658325, rank=1, decoded_token=None)}, {1405: Logprob(logprob=-5.987232208251953, rank=13, decoded_token=None), 315: Logprob(logprob=-0.23723231256008148, rank=1, decoded_token=None)}, {33126: Logprob(logprob=-9.044610023498535, rank=315, decoded_token=None), 358: Logprob(logprob=-1.2946101427078247, rank=1, decoded_token=None)}, {574: Logprob(logprob=-5.429495334625244, rank=8, decoded_token=None), 6439: Logprob(logprob=-0.4294951558113098, rank=1, decoded_token=None)}, {9405: Logprob(logprob=-0.40476104617118835, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.5629992485046387, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.7537806630134583, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-7.209847450256348, rank=134, decoded_token=None), 1041: Logprob(logprob=-2.7098476886749268, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.7134871482849121, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-8.75186538696289, rank=571, decoded_token=None), 931: Logprob(logprob=-0.376865029335022, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.47577813267707825, rank=1, decoded_token=None)}, {3639: Logprob(logprob=-4.106588840484619, rank=8, decoded_token=None), 578: Logprob(logprob=-1.2315888404846191, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.30162209272384644, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.16182462871074677, rank=1, decoded_token=None)}, {907: Logprob(logprob=-5.745996475219727, rank=27, decoded_token=None), 7187: Logprob(logprob=-0.8084966540336609, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.032959938049316406, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.9882255792617798, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.205665588378906, rank=12, decoded_token=None), 7187: Logprob(logprob=-1.2056655883789062, rank=1, decoded_token=None)}, {20: Logprob(logprob=-3.386111259460449, rank=3, decoded_token=None), 605: Logprob(logprob=-3.011111259460449, rank=1, decoded_token=None)}, {304: Logprob(logprob=-6.863307952880859, rank=33, decoded_token=None), 339: Logprob(logprob=-0.48830777406692505, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.4937672019004822, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.7949767112731934, rank=9, decoded_token=None), 2768: Logprob(logprob=-1.6699767112731934, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.8562200665473938, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-0.46025389432907104, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.35301274061203003, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-0.0504663847386837, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-3.7009406089782715, rank=5, decoded_token=None), 1980: Logprob(logprob=-0.8259406685829163, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.014418125152588, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.2552250325679779, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.18280577659606934, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.9818596839904785, rank=1, decoded_token=None)}, {9214: Logprob(logprob=-7.26568078994751, rank=42, decoded_token=None), 11: Logprob(logprob=-0.6406807899475098, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.34480056166648865, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0036241819616407156, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0007076143519952893, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021493716165423393, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.265846848487854, rank=1, decoded_token=None)}, {11758: Logprob(logprob=-1.8974242210388184, rank=2, decoded_token=None), 11990: Logprob(logprob=-1.3974242210388184, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.008312508463859558, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0016896746819838881, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000583597575314343, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006553467363119125, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.09962913393974304, rank=1, decoded_token=None)}, {22781: Logprob(logprob=-0.696441113948822, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.007642554119229317, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0023322305642068386, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0006073060794733465, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.019782857969403267, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.06486474722623825, rank=1, decoded_token=None)}, {6305: Logprob(logprob=-0.6396012306213379, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.25918030738830566, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.9573916792869568, rank=1, decoded_token=None), 36: Logprob(logprob=-0.9573916792869568, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.06022197753190994, rank=1, decoded_token=None)}, {362: Logprob(logprob=-1.2654039859771729, rank=2, decoded_token=None), 423: Logprob(logprob=-1.1404039859771729, rank=1, decoded_token=None)}, {271: Logprob(logprob=-1.2457599639892578, rank=2, decoded_token=None), 128001: Logprob(logprob=-0.7457600235939026, rank=1, decoded_token=None)}, {43819: Logprob(logprob=-12.215432167053223, rank=2611, decoded_token=None), 791: Logprob(logprob=-0.8404321670532227, rank=1, decoded_token=None)}, {21475: Logprob(logprob=-0.7314256429672241, rank=1, decoded_token=None)}, {1511: Logprob(logprob=-6.56179141998291, rank=48, decoded_token=None), 374: Logprob(logprob=-1.999291181564331, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.3226728439331055, rank=3, decoded_token=None), 264: Logprob(logprob=-1.322672724723816, rank=1, decoded_token=None)}, {6037: Logprob(logprob=-6.163534164428711, rank=55, decoded_token=None), 15150: Logprob(logprob=-2.538533926010132, rank=1, decoded_token=None)}, {330: Logprob(logprob=-3.6627614498138428, rank=9, decoded_token=None), 315: Logprob(logprob=-1.5377614498138428, rank=1, decoded_token=None)}, {2261: Logprob(logprob=-4.202095985412598, rank=14, decoded_token=None), 2746: Logprob(logprob=-2.7020959854125977, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.6789430379867554, rank=1, decoded_token=None)}, {806: Logprob(logprob=-4.852216720581055, rank=17, decoded_token=None), 20: Logprob(logprob=-1.4772168397903442, rank=1, decoded_token=None)}, {1: Logprob(logprob=-1.4486876726150513, rank=2, decoded_token=None), 311: Logprob(logprob=-0.9486876726150513, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.5747750997543335, rank=1, decoded_token=None)}, {1893: Logprob(logprob=-6.229022026062012, rank=44, decoded_token=None), 1505: Logprob(logprob=-1.4790222644805908, rank=1, decoded_token=None)}, {279: Logprob(logprob=-1.2839043140411377, rank=2, decoded_token=None), 264: Logprob(logprob=-0.7839043140411377, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.3298133611679077, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-6.342275142669678, rank=23, decoded_token=None), 220: Logprob(logprob=-0.27977514266967773, rank=1, decoded_token=None)}, {6982: Logprob(logprob=-2.9779157638549805, rank=5, decoded_token=None), 220: Logprob(logprob=-1.2279157638549805, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-0.6994138956069946, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.4830473065376282, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.417629241943359, rank=9, decoded_token=None), 3639: Logprob(logprob=-0.7926291227340698, rank=1, decoded_token=None)}, {605: Logprob(logprob=-4.466213703155518, rank=13, decoded_token=None), 806: Logprob(logprob=-2.0912137031555176, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.9247885942459106, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.1273905634880066, rank=1, decoded_token=None)}, {1691: Logprob(logprob=-0.8227850198745728, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.007400361355394125, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.01602531410753727, rank=1, decoded_token=None)}, {843: Logprob(logprob=-0.14333274960517883, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.03991517424583435, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.19991245865821838, rank=1, decoded_token=None)}, {3391: Logprob(logprob=-0.02759881317615509, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.08311088383197784, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3676953911781311, rank=1, decoded_token=None)}, {4370: Logprob(logprob=-0.017791442573070526, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-9.866714477539062, rank=126, decoded_token=None), 11: Logprob(logprob=-0.17921476066112518, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-4.3207597732543945, rank=8, decoded_token=None), 1396: Logprob(logprob=-1.0707597732543945, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.38952898979187, rank=2, decoded_token=None), 374: Logprob(logprob=-0.5145289897918701, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.5315698385238647, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.11095929145813, rank=3, decoded_token=None), 6037: Logprob(logprob=-0.8609593510627747, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.3972514867782593, rank=1, decoded_token=None), 220: Logprob(logprob=-1.3972514867782593, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.22985251247882843, rank=1, decoded_token=None)}, {837: Logprob(logprob=-0.6552088856697083, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.3445965349674225, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.07507845014333725, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.009831340983510017, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.5897692441940308, rank=1, decoded_token=None)}, {220: Logprob(logprob=-2.430539608001709, rank=5, decoded_token=None), 1176: Logprob(logprob=-2.055539608001709, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.135545015335083, rank=3, decoded_token=None), 806: Logprob(logprob=-1.885545015335083, rank=1, decoded_token=None)}, {339: Logprob(logprob=-0.6885674595832825, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.1400470733642578, rank=2, decoded_token=None), 4751: Logprob(logprob=-0.5150470733642578, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.2480833530426025, rank=2, decoded_token=None), 374: Logprob(logprob=-0.4980833828449249, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.013370846398174763, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.1963651180267334, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.482834815979004, rank=2, decoded_token=None), 374: Logprob(logprob=-0.10783478617668152, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.2007579803466797, rank=1, decoded_token=None)}, {459: Logprob(logprob=-4.266760349273682, rank=6, decoded_token=None), 220: Logprob(logprob=-0.5167602300643921, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.4180258810520172, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.021704640239477158, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.2175983190536499, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0018430643249303102, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0003660247311927378, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.05719471722841263, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.4022200107574463, rank=4, decoded_token=None), 220: Logprob(logprob=-0.2772199809551239, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.5990962982177734, rank=4, decoded_token=None), 220: Logprob(logprob=-1.849096417427063, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.754885196685791, rank=1, decoded_token=None)}, {2646: Logprob(logprob=-3.085150718688965, rank=8, decoded_token=None), 3136: Logprob(logprob=-1.8351507186889648, rank=1, decoded_token=None)}, {617: Logprob(logprob=-2.3687305450439453, rank=3, decoded_token=None), 842: Logprob(logprob=-1.1187306642532349, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.649540424346924, rank=8, decoded_token=None), 264: Logprob(logprob=-0.8995404243469238, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-2.7209155559539795, rank=4, decoded_token=None), 24871: Logprob(logprob=-0.7209156155586243, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.07320179790258408, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-3.1266684532165527, rank=4, decoded_token=None), 304: Logprob(logprob=-0.8766685128211975, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.01429002359509468, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-0.0503406785428524, rank=1, decoded_token=None)}, {1023: Logprob(logprob=-0.0030884684529155493, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03331640362739563, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.011476805433630943, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002609150833450258, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.14198358356952667, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-5.121759414672852, rank=9, decoded_token=None), 1396: Logprob(logprob=-0.8717594742774963, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.605440855026245, rank=4, decoded_token=None), 1396: Logprob(logprob=-0.23044079542160034, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.1128024309873581, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.31675779819488525, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.007474906742572784, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.02105293981730938, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.08588151633739471, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.4892382323741913, rank=1, decoded_token=None)}, {459: Logprob(logprob=-3.0233283042907715, rank=5, decoded_token=None), 220: Logprob(logprob=-1.7733283042907715, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.8158836364746094, rank=2, decoded_token=None), 10535: Logprob(logprob=-0.6908836364746094, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.0712813287973404, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-7.487314224243164, rank=28, decoded_token=None), 627: Logprob(logprob=-0.6123140454292297, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.1590193808078766, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.011315456591546535, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.005359092261642218, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03135305643081665, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.02188076637685299, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000491021724883467, rank=1, decoded_token=None)}, {1442: Logprob(logprob=-4.837580680847168, rank=7, decoded_token=None), 578: Logprob(logprob=-0.3375808596611023, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.5674490332603455, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.3511098623275757, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.2133203744888306, rank=1, decoded_token=None), 374: Logprob(logprob=-1.2133203744888306, rank=1, decoded_token=None)}, {3940: Logprob(logprob=-4.17018461227417, rank=14, decoded_token=None), 374: Logprob(logprob=-1.42018461227417, rank=1, decoded_token=None)}, {449: Logprob(logprob=-0.05720282346010208, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.9503310322761536, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.7719177007675171, rank=2, decoded_token=None), 1524: Logprob(logprob=-0.6469177007675171, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.008971618488430977, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-2.8240914344787598, rank=2, decoded_token=None), 11: Logprob(logprob=-0.19909141957759857, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.6145686507225037, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.596506357192993, rank=3, decoded_token=None), 1828: Logprob(logprob=-0.47150641679763794, rank=1, decoded_token=None)}, {1053: Logprob(logprob=-2.0979936122894287, rank=2, decoded_token=None), 690: Logprob(logprob=-0.22299352288246155, rank=1, decoded_token=None)}, {617: Logprob(logprob=-3.0427448749542236, rank=6, decoded_token=None), 2646: Logprob(logprob=-0.9177448153495789, rank=1, decoded_token=None)}, {1193: Logprob(logprob=-3.433971643447876, rank=7, decoded_token=None), 459: Logprob(logprob=-0.8089715838432312, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.313199520111084, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.01859915629029274, rank=1, decoded_token=None)}, {304: Logprob(logprob=-2.8377554416656494, rank=2, decoded_token=None), 627: Logprob(logprob=-0.33775535225868225, rank=1, decoded_token=None)}, {433: Logprob(logprob=-0.3653806447982788, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.20377226173877716, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.02473527193069458, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0027272433508187532, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.1850049495697021, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.19033809006214142, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.309290647506714, rank=2, decoded_token=None), 791: Logprob(logprob=-1.9342906475067139, rank=1, decoded_token=None)}, {2860: Logprob(logprob=-5.905457496643066, rank=57, decoded_token=None), 1396: Logprob(logprob=-2.5929572582244873, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.027499310672283173, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.23535610735416412, rank=1, decoded_token=None)}, {966: Logprob(logprob=-4.081752777099609, rank=3, decoded_token=None), 605: Logprob(logprob=-3.8317525386810303, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-6.079629898071289, rank=50, decoded_token=None), 4236: Logprob(logprob=-1.7046300172805786, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.493253231048584, rank=7, decoded_token=None), 31408: Logprob(logprob=-1.9932533502578735, rank=1, decoded_token=None)}, {1514: Logprob(logprob=-1.6049902439117432, rank=2, decoded_token=None), 387: Logprob(logprob=-0.9799902439117432, rank=1, decoded_token=None)}, {19794: Logprob(logprob=-4.2269792556762695, rank=6, decoded_token=None), 304: Logprob(logprob=-0.7269791960716248, rank=1, decoded_token=None)}, {520: Logprob(logprob=-2.5716304779052734, rank=4, decoded_token=None), 304: Logprob(logprob=-0.6966304779052734, rank=1, decoded_token=None)}, {264: Logprob(logprob=-0.8206021785736084, rank=1, decoded_token=None)}, {6246: Logprob(logprob=-5.323214530944824, rank=24, decoded_token=None), 16520: Logprob(logprob=-1.0732142925262451, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.8638421297073364, rank=1, decoded_token=None)}, {2684: Logprob(logprob=-3.016662120819092, rank=7, decoded_token=None), 1442: Logprob(logprob=-1.7666622400283813, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.6918129324913025, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.022499410435557365, rank=1, decoded_token=None)}, {7041: Logprob(logprob=-3.962672472000122, rank=6, decoded_token=None), 220: Logprob(logprob=-0.3376724421977997, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3280467987060547, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.23579740524292, rank=1, decoded_token=None), 17: Logprob(logprob=-2.23579740524292, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-0.6167428493499756, rank=1, decoded_token=None)}, {389: Logprob(logprob=-2.094090461730957, rank=4, decoded_token=None), 505: Logprob(logprob=-1.719090461730957, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-1.238318681716919, rank=2, decoded_token=None), 279: Logprob(logprob=-0.4883187413215637, rank=1, decoded_token=None)}, {2128: Logprob(logprob=-0.10444443672895432, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.15527960658073425, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-2.8790693283081055, rank=4, decoded_token=None), 2650: Logprob(logprob=-1.004069447517395, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-1.269631266593933, rank=2, decoded_token=None), 315: Logprob(logprob=-1.019631266593933, rank=1, decoded_token=None)}, {12722: Logprob(logprob=-4.804388999938965, rank=9, decoded_token=None), 374: Logprob(logprob=-0.5543891191482544, rank=1, decoded_token=None)}, {15100: Logprob(logprob=-3.970444679260254, rank=7, decoded_token=None), 16964: Logprob(logprob=-0.5954446792602539, rank=1, decoded_token=None)}, {1268: Logprob(logprob=-1.029451847076416, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.8737099170684814, rank=3, decoded_token=None), 279: Logprob(logprob=-1.2487099170684814, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-1.841010332107544, rank=2, decoded_token=None), 8417: Logprob(logprob=-1.091010332107544, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.113349549472332, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.29112255573272705, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.009947842918336391, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.8003526926040649, rank=1, decoded_token=None)}, {4460: Logprob(logprob=-3.4189629554748535, rank=3, decoded_token=None), 430: Logprob(logprob=-0.7939630150794983, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9348305463790894, rank=2, decoded_token=None), 311: Logprob(logprob=-0.8098305463790894, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.037669867277145386, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0022645562421530485, rank=1, decoded_token=None)}, {2758: Logprob(logprob=-3.4584977626800537, rank=8, decoded_token=None), 578: Logprob(logprob=-2.0834977626800537, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3807215392589569, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.9317857027053833, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.39621296525001526, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.3208718299865723, rank=2, decoded_token=None), 279: Logprob(logprob=-0.44587182998657227, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.10219656676054001, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.7788331508636475, rank=2, decoded_token=None), 627: Logprob(logprob=-0.7788332104682922, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.45813241600990295, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.933356761932373, rank=4, decoded_token=None), 279: Logprob(logprob=-0.05835668370127678, rank=1, decoded_token=None)}, {1758: Logprob(logprob=-0.9147714376449585, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.909633994102478, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.44750797748565674, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0014780559577047825, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001387499796692282, rank=1, decoded_token=None)}, {64002: Logprob(logprob=-2.5448737144470215, rank=3, decoded_token=None), 94310: Logprob(logprob=-0.544873833656311, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04134264215826988, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.1306612491607666, rank=1, decoded_token=None)}, {555: Logprob(logprob=-0.03507496044039726, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0044165924191474915, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.013939524069428444, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.09804058820009232, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.0629529133439064, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.240189328789711, rank=1, decoded_token=None)}, {21: Logprob(logprob=-0.03781026229262352, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.01011602021753788, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.05886910483241081, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0013978243805468082, rank=1, decoded_token=None)}, {13: Logprob(logprob=-9.798523387871683e-05, rank=1, decoded_token=None)}, {72159: Logprob(logprob=-1.417578935623169, rank=2, decoded_token=None), 94310: Logprob(logprob=-0.792578935623169, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.02184729278087616, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.16513295471668243, rank=1, decoded_token=None)}, {323: Logprob(logprob=-5.760368347167969, rank=2, decoded_token=None), 555: Logprob(logprob=-0.010368410497903824, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.004999872762709856, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.10827615857124329, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.17176643013954163, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.027458835393190384, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04579097405076027, rank=1, decoded_token=None)}, {3965: Logprob(logprob=-0.16355350613594055, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.10822748392820358, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.008487226441502571, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0020695950370281935, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000342191313393414, rank=1, decoded_token=None)}, {94310: Logprob(logprob=-0.7333000302314758, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.024686889722943306, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.6213490962982178, rank=1, decoded_token=None)}, {505: Logprob(logprob=-0.10929779708385468, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.010756724514067173, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.05260276049375534, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.02710282802581787, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.014247246086597443, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04090675339102745, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.008638868108391762, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.0173895675688982, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.05997175723314285, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.00443486962467432, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0005690624238923192, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.335664987564087, rank=3, decoded_token=None), 356: Logprob(logprob=-1.210664987564087, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.20828098058700562, rank=1, decoded_token=None)}, {32: Logprob(logprob=-1.9398690462112427, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-5.220652103424072, rank=28, decoded_token=None), 2860: Logprob(logprob=-3.0956521034240723, rank=1, decoded_token=None)}, {31878: Logprob(logprob=-1.599919319152832, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.733023762702942, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-8.531267166137695, rank=187, decoded_token=None), 18: Logprob(logprob=-2.531266689300537, rank=1, decoded_token=None)}, {2204: Logprob(logprob=-2.716043472290039, rank=2, decoded_token=None), 13840: Logprob(logprob=-2.466043472290039, rank=1, decoded_token=None)}, {8146: Logprob(logprob=-5.786083698272705, rank=26, decoded_token=None), 4595: Logprob(logprob=-1.411083698272705, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.025601888075470924, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-3.9537112712860107, rank=11, decoded_token=None), 37824: Logprob(logprob=-2.8287112712860107, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.3711868226528168, rank=1, decoded_token=None)}, {2435: Logprob(logprob=-4.847472190856934, rank=13, decoded_token=None), 1442: Logprob(logprob=-1.4724724292755127, rank=1, decoded_token=None)}, {617: Logprob(logprob=-1.45283043384552, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.8435330986976624, rank=1, decoded_token=None)}, {914: Logprob(logprob=-4.36965799331665, rank=21, decoded_token=None), 18: Logprob(logprob=-2.9946579933166504, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-4.7997283935546875, rank=13, decoded_token=None), 2204: Logprob(logprob=-1.0497283935546875, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.16669881343841553, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-2.0677084922790527, rank=2, decoded_token=None), 2579: Logprob(logprob=-1.8177084922790527, rank=1, decoded_token=None)}, {1933: Logprob(logprob=-0.1227213442325592, rank=1, decoded_token=None)}, {304: Logprob(logprob=-3.446204662322998, rank=5, decoded_token=None), 13: Logprob(logprob=-0.4462047219276428, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-7.250609874725342, rank=17, decoded_token=None), 5708: Logprob(logprob=-0.25060996413230896, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.1065310388803482, rank=1, decoded_token=None)}, {578: Logprob(logprob=-2.566020965576172, rank=5, decoded_token=None), 2650: Logprob(logprob=-1.3160210847854614, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.9273428916931152, rank=3, decoded_token=None), 3637: Logprob(logprob=-0.8023430109024048, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.08843708783388138, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.6100079417228699, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.7515377402305603, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-2.1421217918395996, rank=2, decoded_token=None), 1855: Logprob(logprob=-0.5171217322349548, rank=1, decoded_token=None)}, {279: Logprob(logprob=-3.456434965133667, rank=6, decoded_token=None), 304: Logprob(logprob=-1.331434965133667, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.02585725486278534, rank=1, decoded_token=None)}, {706: Logprob(logprob=-0.38343092799186707, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.708461880683899, rank=2, decoded_token=None), 374: Logprob(logprob=-1.083461880683899, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.23030529916286469, rank=1, decoded_token=None)}, {649: Logprob(logprob=-2.6108829975128174, rank=2, decoded_token=None), 374: Logprob(logprob=-0.36088305711746216, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.057374272495508194, rank=1, decoded_token=None)}, {1766: Logprob(logprob=-2.6309587955474854, rank=4, decoded_token=None), 5439: Logprob(logprob=-1.1309587955474854, rank=1, decoded_token=None)}, {1701: Logprob(logprob=-2.2968969345092773, rank=2, decoded_token=None), 555: Logprob(logprob=-0.17189693450927734, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.41828861832618713, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-3.6377298831939697, rank=7, decoded_token=None), 6037: Logprob(logprob=-1.2627298831939697, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-4.555124759674072, rank=14, decoded_token=None), 220: Logprob(logprob=-1.3051248788833618, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.17938224971294403, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.9476473331451416, rank=2, decoded_token=None), 3639: Logprob(logprob=-1.1976473331451416, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-0.4874989986419678, rank=1, decoded_token=None)}, {25800: Logprob(logprob=-3.846048593521118, rank=9, decoded_token=None), 11: Logprob(logprob=-1.7835485935211182, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.18882788717746735, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.07510089874267578, rank=1, decoded_token=None)}, {13: Logprob(logprob=-2.343728542327881, rank=3, decoded_token=None), 284: Logprob(logprob=-1.5937285423278809, rank=1, decoded_token=None)}, {2650: Logprob(logprob=-3.1135451793670654, rank=3, decoded_token=None), 3639: Logprob(logprob=-0.6135452389717102, rank=1, decoded_token=None)}, {1690: Logprob(logprob=-0.08424817770719528, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.7079728245735168, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.14217698574066162, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-0.18304136395454407, rank=1, decoded_token=None)}, {1587: Logprob(logprob=-0.9694701433181763, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.025537513196468353, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.003264813916757703, rank=1, decoded_token=None)}, {617: Logprob(logprob=-0.09910587221384048, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.1510932743549347, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.03838161751627922, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.09627294540405273, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.07186505943536758, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.002630585338920355, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021421492099761963, rank=1, decoded_token=None)}, {25541: Logprob(logprob=-10.88266658782959, rank=909, decoded_token=None), 7699: Logprob(logprob=-2.2576663494110107, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.7218905091285706, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0011835244949907064, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00015138434537220746, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0014886498684063554, rank=1, decoded_token=None)}, {17: Logprob(logprob=-3.907280206680298, rank=6, decoded_token=None), 7699: Logprob(logprob=-3.032280206680298, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.0223177969455719, rank=1, decoded_token=None)}, {21129: Logprob(logprob=-5.540557861328125, rank=44, decoded_token=None), 2636: Logprob(logprob=-3.540557622909546, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.008849094621837139, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.00032646095496602356, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001445904199499637, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0016035091830417514, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.3098583221435547, rank=2, decoded_token=None), 20: Logprob(logprob=-2.1848583221435547, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.006650575902312994, rank=1, decoded_token=None)}, {24599: Logprob(logprob=-6.172876358032227, rank=80, decoded_token=None), 21129: Logprob(logprob=-2.5478761196136475, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.004533370956778526, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0005069877952337265, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002643712505232543, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.00395266804844141, rank=1, decoded_token=None)}, {19: Logprob(logprob=-2.4699602127075195, rank=3, decoded_token=None), 18: Logprob(logprob=-0.84496009349823, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.0012282931711524725, rank=1, decoded_token=None)}, {5154: Logprob(logprob=-5.722906112670898, rank=71, decoded_token=None), 18070: Logprob(logprob=-2.8479063510894775, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.48243021965026855, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004707326181232929, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0004094000905752182, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.0903127193450928, rank=1, decoded_token=None), 362: Logprob(logprob=-1.0903127193450928, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.21004998683929443, rank=1, decoded_token=None)}, {23956: Logprob(logprob=-3.7082245349884033, rank=5, decoded_token=None), 32: Logprob(logprob=-1.7082245349884033, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-2.328795909881592, rank=3, decoded_token=None), 315: Logprob(logprob=-1.4537959098815918, rank=1, decoded_token=None)}, {374: Logprob(logprob=-1.3939491510391235, rank=1, decoded_token=None)}, {13890: Logprob(logprob=-0.3086131513118744, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.004158303141593933, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.5719388723373413, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.611593246459961, rank=3, decoded_token=None), 17: Logprob(logprob=-2.486593246459961, rank=1, decoded_token=None)}, {865: Logprob(logprob=-3.814181327819824, rank=6, decoded_token=None), 25800: Logprob(logprob=-0.9391812086105347, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.21246875822544098, rank=1, decoded_token=None)}, {24: Logprob(logprob=-3.2393479347229004, rank=8, decoded_token=None), 17: Logprob(logprob=-2.1143479347229004, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9484657645225525, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.02641945704817772, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0019446763908490539, rank=1, decoded_token=None)}, {320: Logprob(logprob=-4.043663024902344, rank=2, decoded_token=None), 220: Logprob(logprob=-0.0436631478369236, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3292904496192932, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7795792818069458, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.019342729821801186, rank=1, decoded_token=None)}, {19: Logprob(logprob=-3.8902170658111572, rank=6, decoded_token=None), 24: Logprob(logprob=-0.2652171552181244, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.05693596974015236, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7711688876152039, rank=1, decoded_token=None)}, {320: Logprob(logprob=-1.7098952531814575, rank=2, decoded_token=None), 220: Logprob(logprob=-0.2098952829837799, rank=1, decoded_token=None)}, {21: Logprob(logprob=-3.9887096881866455, rank=6, decoded_token=None), 20: Logprob(logprob=-0.8637097477912903, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.05180598795413971, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006352707277983427, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.6478800773620605, rank=5, decoded_token=None), 18: Logprob(logprob=-1.1478800773620605, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.06078224629163742, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0037563731893897057, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00020287363440729678, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.5973082780838013, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3547166585922241, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.1522906869649887, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.119587242603302, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.250182867050171, rank=4, decoded_token=None), 24: Logprob(logprob=-1.250182867050171, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.21551699936389923, rank=1, decoded_token=None)}, {489: Logprob(logprob=-4.195828914642334, rank=3, decoded_token=None), 865: Logprob(logprob=-0.0708288699388504, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.3979986310005188, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.6019997596740723, rank=3, decoded_token=None), 21: Logprob(logprob=-1.2269997596740723, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.012111456133425236, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.02054995857179165, rank=1, decoded_token=None)}, {19: Logprob(logprob=-1.0867620706558228, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.14609402418136597, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0014072287594899535, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00014137222024146467, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.401207834482193, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.18403267860412598, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.15473514795303345, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.06539695709943771, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.4415698051452637, rank=3, decoded_token=None), 19: Logprob(logprob=-1.1915698051452637, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.11237519979476929, rank=1, decoded_token=None)}, {489: Logprob(logprob=-0.7666293382644653, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.39565205574035645, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.5823985934257507, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.031112726777791977, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.06674905866384506, rank=1, decoded_token=None)}, {24: Logprob(logprob=-1.1196229457855225, rank=2, decoded_token=None), 19: Logprob(logprob=-0.9946228861808777, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.013978317379951477, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.000894146622158587, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002002515539061278, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.19024042785167694, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.08259163796901703, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.11528829485177994, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04026882350444794, rank=1, decoded_token=None)}, {24: Logprob(logprob=-0.6260170340538025, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.025457678362727165, rank=1, decoded_token=None)}, {865: Logprob(logprob=-4.2807393074035645, rank=4, decoded_token=None), 489: Logprob(logprob=-0.15573909878730774, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.06027596443891525, rank=1, decoded_token=None)}, {21: Logprob(logprob=-1.8035647869110107, rank=2, decoded_token=None), 20: Logprob(logprob=-0.42856475710868835, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.025070033967494965, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.002612869720906019, rank=1, decoded_token=None)}, {24: Logprob(logprob=-4.944259166717529, rank=4, decoded_token=None), 20: Logprob(logprob=-0.19425919651985168, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.016041269525885582, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004313688259571791, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0003240775258745998, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.1086416244506836, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.18588051199913025, rank=1, decoded_token=None)}, {11874: Logprob(logprob=-5.220853328704834, rank=13, decoded_token=None), 32: Logprob(logprob=-1.8458532094955444, rank=1, decoded_token=None)}, {4459: Logprob(logprob=-6.961170196533203, rank=118, decoded_token=None), 5219: Logprob(logprob=-1.836169958114624, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.7194890975952148, rank=1, decoded_token=None)}, {617: Logprob(logprob=-1.3559916019439697, rank=2, decoded_token=None), 527: Logprob(logprob=-1.2309916019439697, rank=1, decoded_token=None)}, {264: Logprob(logprob=-0.6008616089820862, rank=1, decoded_token=None)}, {3325: Logprob(logprob=-9.21973705291748, rank=37, decoded_token=None), 2694: Logprob(logprob=-0.2822372615337372, rank=1, decoded_token=None)}, {4279: Logprob(logprob=-0.05753443390130997, rank=1, decoded_token=None)}, {5361: Logprob(logprob=-0.45470237731933594, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.1912495344877243, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.023397311568260193, rank=1, decoded_token=None)}, {1399: Logprob(logprob=-3.9711475372314453, rank=14, decoded_token=None), 717: Logprob(logprob=-2.3461475372314453, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.09623148292303085, rank=1, decoded_token=None)}, {9062: Logprob(logprob=-5.050774574279785, rank=12, decoded_token=None), 578: Logprob(logprob=-1.175774335861206, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.6333088874816895, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.35156384110450745, rank=1, decoded_token=None)}, {2753: Logprob(logprob=-2.4849326610565186, rank=3, decoded_token=None), 220: Logprob(logprob=-1.1099326610565186, rank=1, decoded_token=None)}, {1109: Logprob(logprob=-0.003735114587470889, rank=1, decoded_token=None)}, {477: Logprob(logprob=-2.9097344875335693, rank=3, decoded_token=None), 220: Logprob(logprob=-0.40973448753356934, rank=1, decoded_token=None)}, {6273: Logprob(logprob=-0.013717547990381718, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.005777327343821526, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.09111858904361725, rank=1, decoded_token=None)}, {717: Logprob(logprob=-5.106393337249756, rank=27, decoded_token=None), 1041: Logprob(logprob=-1.9813933372497559, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.1538446694612503, rank=1, decoded_token=None)}, {578: Logprob(logprob=-1.602337121963501, rank=3, decoded_token=None), 16299: Logprob(logprob=-0.977337121963501, rank=1, decoded_token=None)}, {12474: Logprob(logprob=-2.6630983352661133, rank=4, decoded_token=None), 3325: Logprob(logprob=-1.2880984544754028, rank=1, decoded_token=None)}, {4279: Logprob(logprob=-0.6888583898544312, rank=1, decoded_token=None)}, {8331: Logprob(logprob=-0.4009769856929779, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.16255250573158264, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.33479413390159607, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-0.20367619395256042, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.26733827590942383, rank=1, decoded_token=None)}, {285: Logprob(logprob=-9.538082122802734, rank=41, decoded_token=None), 374: Logprob(logprob=-0.03808215260505676, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.9306405186653137, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.007215976715088, rank=2, decoded_token=None), 21: Logprob(logprob=-1.6322158575057983, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.17282874882221222, rank=1, decoded_token=None)}, {3639: Logprob(logprob=-1.127549409866333, rank=2, decoded_token=None), 16299: Logprob(logprob=-0.877549409866333, rank=1, decoded_token=None)}, {527: Logprob(logprob=-2.004128932952881, rank=2, decoded_token=None), 374: Logprob(logprob=-0.2541288137435913, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.08610685169696808, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-0.31307634711265564, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.6419362425804138, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.09086183458566666, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.015456883236765862, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0013862771447747946, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.038329992443323135, rank=1, decoded_token=None)}, {21: Logprob(logprob=-1.907236099243164, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.24684971570968628, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.005438295193016529, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.3189382553100586, rank=3, decoded_token=None), 717: Logprob(logprob=-1.443938136100769, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.02410171739757061, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0009358317474834621, rank=1, decoded_token=None)}, {13: Logprob(logprob=-7.128461584215984e-05, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.004888962022960186, rank=1, decoded_token=None)}, {20: Logprob(logprob=-3.057605028152466, rank=7, decoded_token=None), 21: Logprob(logprob=-1.5576050281524658, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.02449881099164486, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0014962679706513882, rank=1, decoded_token=None)}, {717: Logprob(logprob=-1.258972406387329, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0013371107634156942, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.00025960413040593266, rank=1, decoded_token=None)}, {13: Logprob(logprob=-7.068861305015162e-05, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.005708463490009308, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.931321620941162, rank=7, decoded_token=None), 19: Logprob(logprob=-1.4313217401504517, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.003584271762520075, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0014222278259694576, rank=1, decoded_token=None)}, {717: Logprob(logprob=-0.7489094734191895, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0011520899133756757, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0003152588615193963, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00017391123401466757, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.015513576567173004, rank=1, decoded_token=None)}, {717: Logprob(logprob=-2.203749179840088, rank=3, decoded_token=None), 21: Logprob(logprob=-1.203749179840088, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.002027838258072734, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0010093123419210315, rank=1, decoded_token=None)}, {868: Logprob(logprob=-2.2409543991088867, rank=2, decoded_token=None), 605: Logprob(logprob=-0.9909543395042419, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.02810521610081196, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.0029396675527095795, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0005796659388579428, rank=1, decoded_token=None)}, {362: Logprob(logprob=-1.1178319454193115, rank=1, decoded_token=None)}], outputs=[CompletionOutput(index=0, text='', token_ids=(271,), cumulative_logprob=None, logprobs=None, finish_reason=length, stop_reason=None)], finished=True, metrics=RequestMetrics(arrival_time=1732330219.912852, last_token_time=1732330219.912852, first_scheduled_time=1732330219.9404528, first_token_time=1732330220.0975826, time_in_queue=0.027600765228271484, finished_time=1732330220.0984735, scheduler_time=0.002440982001644443, model_forward_time=None, model_execute_time=None), lora_request=None, num_cached_tokens=0), RequestOutput(request_id=2, prompt=None, prompt_token_ids=[128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 11874, 4459, 5219, 617, 264, 3325, 4279, 5361, 315, 220, 1399, 13, 9062, 1396, 374, 2753, 1109, 477, 6273, 311, 220, 717, 13, 578, 12474, 4279, 8331, 315, 279, 1403, 5219, 285, 220, 17, 13, 3639, 527, 279, 1403, 5219, 5380, 32, 13, 220, 21, 323, 220, 605, 198, 33, 13, 220, 20, 323, 220, 717, 198, 34, 13, 220, 605, 323, 220, 717, 198, 35, 13, 220, 717, 323, 220, 868, 198, 16533, 25, 423], encoder_prompt=None, encoder_prompt_token_ids=None, prompt_logprobs=[None, {791: Logprob(logprob=-3.620506763458252, rank=4, decoded_token=None), 14924: Logprob(logprob=-1.1830066442489624, rank=1, decoded_token=None)}, {2768: Logprob(logprob=-4.267952919006348, rank=2, decoded_token=None), 220: Logprob(logprob=-3.7054529190063477, rank=1, decoded_token=None)}, {527: Logprob(logprob=-3.0935873985290527, rank=3, decoded_token=None), 374: Logprob(logprob=-1.9685872793197632, rank=1, decoded_token=None)}, {5361: Logprob(logprob=-9.361089706420898, rank=708, decoded_token=None), 279: Logprob(logprob=-1.5485893487930298, rank=1, decoded_token=None)}, {5873: Logprob(logprob=-1.1175264120101929, rank=1, decoded_token=None)}, {4860: Logprob(logprob=-0.15363378822803497, rank=1, decoded_token=None)}, {320: Logprob(logprob=-3.388906955718994, rank=9, decoded_token=None), 389: Logprob(logprob=-1.7639068365097046, rank=1, decoded_token=None)}, {4291: Logprob(logprob=-3.4973137378692627, rank=2, decoded_token=None), 11865: Logprob(logprob=-0.6223137378692627, rank=1, decoded_token=None)}, {11503: Logprob(logprob=-0.987357497215271, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.4506547451019287, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.8773975372314453, rank=4, decoded_token=None), 389: Logprob(logprob=-1.5023976564407349, rank=1, decoded_token=None)}, {36256: Logprob(logprob=-8.630099296569824, rank=577, decoded_token=None), 279: Logprob(logprob=-1.1925991773605347, rank=1, decoded_token=None)}, {38696: Logprob(logprob=-3.769948959350586, rank=8, decoded_token=None), 19320: Logprob(logprob=-2.144948959350586, rank=1, decoded_token=None)}, {382: Logprob(logprob=-5.472397804260254, rank=18, decoded_token=None), 13: Logprob(logprob=-1.0973976850509644, rank=1, decoded_token=None)}, {791: Logprob(logprob=-3.5461583137512207, rank=5, decoded_token=None), 16: Logprob(logprob=-1.4211583137512207, rank=1, decoded_token=None)}, {7187: Logprob(logprob=-7.392093658447266, rank=164, decoded_token=None), 2768: Logprob(logprob=-2.3295936584472656, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.11663393676280975, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.73690128326416, rank=2, decoded_token=None), 264: Logprob(logprob=-0.48690128326416016, rank=1, decoded_token=None)}, {3363: Logprob(logprob=-1.8540297746658325, rank=1, decoded_token=None)}, {1405: Logprob(logprob=-5.987232208251953, rank=13, decoded_token=None), 315: Logprob(logprob=-0.23723231256008148, rank=1, decoded_token=None)}, {33126: Logprob(logprob=-9.044610023498535, rank=315, decoded_token=None), 358: Logprob(logprob=-1.2946101427078247, rank=1, decoded_token=None)}, {574: Logprob(logprob=-5.429495334625244, rank=8, decoded_token=None), 6439: Logprob(logprob=-0.4294951558113098, rank=1, decoded_token=None)}, {9405: Logprob(logprob=-0.40476104617118835, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.5629992485046387, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.7537806630134583, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-7.209847450256348, rank=134, decoded_token=None), 1041: Logprob(logprob=-2.7098476886749268, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.7134871482849121, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-8.75186538696289, rank=571, decoded_token=None), 931: Logprob(logprob=-0.376865029335022, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.47577813267707825, rank=1, decoded_token=None)}, {3639: Logprob(logprob=-4.106588840484619, rank=8, decoded_token=None), 578: Logprob(logprob=-1.2315888404846191, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.30162209272384644, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.16182462871074677, rank=1, decoded_token=None)}, {907: Logprob(logprob=-5.745996475219727, rank=27, decoded_token=None), 7187: Logprob(logprob=-0.8084966540336609, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.032959938049316406, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.9882255792617798, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.205665588378906, rank=12, decoded_token=None), 7187: Logprob(logprob=-1.2056655883789062, rank=1, decoded_token=None)}, {20: Logprob(logprob=-3.386111259460449, rank=3, decoded_token=None), 605: Logprob(logprob=-3.011111259460449, rank=1, decoded_token=None)}, {304: Logprob(logprob=-6.863307952880859, rank=33, decoded_token=None), 339: Logprob(logprob=-0.48830777406692505, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.4937672019004822, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.7949767112731934, rank=9, decoded_token=None), 2768: Logprob(logprob=-1.6699767112731934, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.8562200665473938, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-0.46025389432907104, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.35301274061203003, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-0.0504663847386837, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-3.7009406089782715, rank=5, decoded_token=None), 1980: Logprob(logprob=-0.8259406685829163, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.014418125152588, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.2552250325679779, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.18280577659606934, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.9818596839904785, rank=1, decoded_token=None)}, {9214: Logprob(logprob=-7.26568078994751, rank=42, decoded_token=None), 11: Logprob(logprob=-0.6406807899475098, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.34480056166648865, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0036241819616407156, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0007076143519952893, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021493716165423393, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.265846848487854, rank=1, decoded_token=None)}, {11758: Logprob(logprob=-1.8974242210388184, rank=2, decoded_token=None), 11990: Logprob(logprob=-1.3974242210388184, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.008312508463859558, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0016896746819838881, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000583597575314343, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006553467363119125, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.09962913393974304, rank=1, decoded_token=None)}, {22781: Logprob(logprob=-0.696441113948822, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.007642554119229317, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0023322305642068386, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0006073060794733465, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.019782857969403267, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.06486474722623825, rank=1, decoded_token=None)}, {6305: Logprob(logprob=-0.6396012306213379, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.25918030738830566, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.9573916792869568, rank=1, decoded_token=None), 36: Logprob(logprob=-0.9573916792869568, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.06022197753190994, rank=1, decoded_token=None)}, {362: Logprob(logprob=-1.2654039859771729, rank=2, decoded_token=None), 423: Logprob(logprob=-1.1404039859771729, rank=1, decoded_token=None)}, {271: Logprob(logprob=-1.2457599639892578, rank=2, decoded_token=None), 128001: Logprob(logprob=-0.7457600235939026, rank=1, decoded_token=None)}, {43819: Logprob(logprob=-12.215432167053223, rank=2611, decoded_token=None), 791: Logprob(logprob=-0.8404321670532227, rank=1, decoded_token=None)}, {21475: Logprob(logprob=-0.7314256429672241, rank=1, decoded_token=None)}, {1511: Logprob(logprob=-6.56179141998291, rank=48, decoded_token=None), 374: Logprob(logprob=-1.999291181564331, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.3226728439331055, rank=3, decoded_token=None), 264: Logprob(logprob=-1.322672724723816, rank=1, decoded_token=None)}, {6037: Logprob(logprob=-6.163534164428711, rank=55, decoded_token=None), 15150: Logprob(logprob=-2.538533926010132, rank=1, decoded_token=None)}, {330: Logprob(logprob=-3.6627614498138428, rank=9, decoded_token=None), 315: Logprob(logprob=-1.5377614498138428, rank=1, decoded_token=None)}, {2261: Logprob(logprob=-4.202095985412598, rank=14, decoded_token=None), 2746: Logprob(logprob=-2.7020959854125977, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.6789430379867554, rank=1, decoded_token=None)}, {806: Logprob(logprob=-4.852216720581055, rank=17, decoded_token=None), 20: Logprob(logprob=-1.4772168397903442, rank=1, decoded_token=None)}, {1: Logprob(logprob=-1.4486876726150513, rank=2, decoded_token=None), 311: Logprob(logprob=-0.9486876726150513, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.5747750997543335, rank=1, decoded_token=None)}, {1893: Logprob(logprob=-6.229022026062012, rank=44, decoded_token=None), 1505: Logprob(logprob=-1.4790222644805908, rank=1, decoded_token=None)}, {279: Logprob(logprob=-1.2839043140411377, rank=2, decoded_token=None), 264: Logprob(logprob=-0.7839043140411377, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.3298133611679077, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-6.342275142669678, rank=23, decoded_token=None), 220: Logprob(logprob=-0.27977514266967773, rank=1, decoded_token=None)}, {6982: Logprob(logprob=-2.9779157638549805, rank=5, decoded_token=None), 220: Logprob(logprob=-1.2279157638549805, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-0.6994138956069946, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.4830473065376282, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.417629241943359, rank=9, decoded_token=None), 3639: Logprob(logprob=-0.7926291227340698, rank=1, decoded_token=None)}, {605: Logprob(logprob=-4.466213703155518, rank=13, decoded_token=None), 806: Logprob(logprob=-2.0912137031555176, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.9247885942459106, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.1273905634880066, rank=1, decoded_token=None)}, {1691: Logprob(logprob=-0.8227850198745728, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.007400361355394125, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.01602531410753727, rank=1, decoded_token=None)}, {843: Logprob(logprob=-0.14333274960517883, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.03991517424583435, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.19991245865821838, rank=1, decoded_token=None)}, {3391: Logprob(logprob=-0.02759881317615509, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.08311088383197784, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3676953911781311, rank=1, decoded_token=None)}, {4370: Logprob(logprob=-0.017791442573070526, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-9.866714477539062, rank=126, decoded_token=None), 11: Logprob(logprob=-0.17921476066112518, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-4.3207597732543945, rank=8, decoded_token=None), 1396: Logprob(logprob=-1.0707597732543945, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.38952898979187, rank=2, decoded_token=None), 374: Logprob(logprob=-0.5145289897918701, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.5315698385238647, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.11095929145813, rank=3, decoded_token=None), 6037: Logprob(logprob=-0.8609593510627747, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.3972514867782593, rank=1, decoded_token=None), 220: Logprob(logprob=-1.3972514867782593, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.22985251247882843, rank=1, decoded_token=None)}, {837: Logprob(logprob=-0.6552088856697083, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.3445965349674225, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.07507845014333725, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.009831340983510017, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.5897692441940308, rank=1, decoded_token=None)}, {220: Logprob(logprob=-2.430539608001709, rank=5, decoded_token=None), 1176: Logprob(logprob=-2.055539608001709, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.135545015335083, rank=3, decoded_token=None), 806: Logprob(logprob=-1.885545015335083, rank=1, decoded_token=None)}, {339: Logprob(logprob=-0.6885674595832825, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.1400470733642578, rank=2, decoded_token=None), 4751: Logprob(logprob=-0.5150470733642578, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.2480833530426025, rank=2, decoded_token=None), 374: Logprob(logprob=-0.4980833828449249, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.013370846398174763, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.1963651180267334, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.482834815979004, rank=2, decoded_token=None), 374: Logprob(logprob=-0.10783478617668152, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.2007579803466797, rank=1, decoded_token=None)}, {459: Logprob(logprob=-4.266760349273682, rank=6, decoded_token=None), 220: Logprob(logprob=-0.5167602300643921, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.4180258810520172, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.021704640239477158, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.2175983190536499, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0018430643249303102, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0003660247311927378, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.05719471722841263, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.4022200107574463, rank=4, decoded_token=None), 220: Logprob(logprob=-0.2772199809551239, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.5990962982177734, rank=4, decoded_token=None), 220: Logprob(logprob=-1.849096417427063, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.754885196685791, rank=1, decoded_token=None)}, {2646: Logprob(logprob=-3.085150718688965, rank=8, decoded_token=None), 3136: Logprob(logprob=-1.8351507186889648, rank=1, decoded_token=None)}, {617: Logprob(logprob=-2.3687305450439453, rank=3, decoded_token=None), 842: Logprob(logprob=-1.1187306642532349, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.649540424346924, rank=8, decoded_token=None), 264: Logprob(logprob=-0.8995404243469238, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-2.7209155559539795, rank=4, decoded_token=None), 24871: Logprob(logprob=-0.7209156155586243, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.07320179790258408, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-3.1266684532165527, rank=4, decoded_token=None), 304: Logprob(logprob=-0.8766685128211975, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.01429002359509468, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-0.0503406785428524, rank=1, decoded_token=None)}, {1023: Logprob(logprob=-0.0030884684529155493, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03331640362739563, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.011476805433630943, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002609150833450258, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.14198358356952667, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-5.121759414672852, rank=9, decoded_token=None), 1396: Logprob(logprob=-0.8717594742774963, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.605440855026245, rank=4, decoded_token=None), 1396: Logprob(logprob=-0.23044079542160034, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.1128024309873581, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.31675779819488525, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.007474906742572784, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.02105293981730938, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.08588151633739471, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.4892382323741913, rank=1, decoded_token=None)}, {459: Logprob(logprob=-3.0233283042907715, rank=5, decoded_token=None), 220: Logprob(logprob=-1.7733283042907715, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.8158836364746094, rank=2, decoded_token=None), 10535: Logprob(logprob=-0.6908836364746094, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.0712813287973404, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-7.487314224243164, rank=28, decoded_token=None), 627: Logprob(logprob=-0.6123140454292297, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.1590193808078766, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.011315456591546535, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.005359092261642218, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03135305643081665, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.02188076637685299, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000491021724883467, rank=1, decoded_token=None)}, {1442: Logprob(logprob=-4.837580680847168, rank=7, decoded_token=None), 578: Logprob(logprob=-0.3375808596611023, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.5674490332603455, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.3511098623275757, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.2133203744888306, rank=1, decoded_token=None), 374: Logprob(logprob=-1.2133203744888306, rank=1, decoded_token=None)}, {3940: Logprob(logprob=-4.17018461227417, rank=14, decoded_token=None), 374: Logprob(logprob=-1.42018461227417, rank=1, decoded_token=None)}, {449: Logprob(logprob=-0.05720282346010208, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.9503310322761536, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.7719177007675171, rank=2, decoded_token=None), 1524: Logprob(logprob=-0.6469177007675171, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.008971618488430977, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-2.8240914344787598, rank=2, decoded_token=None), 11: Logprob(logprob=-0.19909141957759857, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.6145686507225037, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.596506357192993, rank=3, decoded_token=None), 1828: Logprob(logprob=-0.47150641679763794, rank=1, decoded_token=None)}, {1053: Logprob(logprob=-2.0979936122894287, rank=2, decoded_token=None), 690: Logprob(logprob=-0.22299352288246155, rank=1, decoded_token=None)}, {617: Logprob(logprob=-3.0427448749542236, rank=6, decoded_token=None), 2646: Logprob(logprob=-0.9177448153495789, rank=1, decoded_token=None)}, {1193: Logprob(logprob=-3.433971643447876, rank=7, decoded_token=None), 459: Logprob(logprob=-0.8089715838432312, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.313199520111084, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.01859915629029274, rank=1, decoded_token=None)}, {304: Logprob(logprob=-2.8377554416656494, rank=2, decoded_token=None), 627: Logprob(logprob=-0.33775535225868225, rank=1, decoded_token=None)}, {433: Logprob(logprob=-0.3653806447982788, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.20377226173877716, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.02473527193069458, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0027272433508187532, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.1850049495697021, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.19033809006214142, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.309290647506714, rank=2, decoded_token=None), 791: Logprob(logprob=-1.9342906475067139, rank=1, decoded_token=None)}, {2860: Logprob(logprob=-5.905457496643066, rank=57, decoded_token=None), 1396: Logprob(logprob=-2.5929572582244873, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.027499310672283173, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.23535610735416412, rank=1, decoded_token=None)}, {966: Logprob(logprob=-4.081752777099609, rank=3, decoded_token=None), 605: Logprob(logprob=-3.8317525386810303, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-6.079629898071289, rank=50, decoded_token=None), 4236: Logprob(logprob=-1.7046300172805786, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.493253231048584, rank=7, decoded_token=None), 31408: Logprob(logprob=-1.9932533502578735, rank=1, decoded_token=None)}, {1514: Logprob(logprob=-1.6049902439117432, rank=2, decoded_token=None), 387: Logprob(logprob=-0.9799902439117432, rank=1, decoded_token=None)}, {19794: Logprob(logprob=-4.2269792556762695, rank=6, decoded_token=None), 304: Logprob(logprob=-0.7269791960716248, rank=1, decoded_token=None)}, {520: Logprob(logprob=-2.5716304779052734, rank=4, decoded_token=None), 304: Logprob(logprob=-0.6966304779052734, rank=1, decoded_token=None)}, {264: Logprob(logprob=-0.8206021785736084, rank=1, decoded_token=None)}, {6246: Logprob(logprob=-5.323214530944824, rank=24, decoded_token=None), 16520: Logprob(logprob=-1.0732142925262451, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.8638421297073364, rank=1, decoded_token=None)}, {2684: Logprob(logprob=-3.016662120819092, rank=7, decoded_token=None), 1442: Logprob(logprob=-1.7666622400283813, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.6918129324913025, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.022499410435557365, rank=1, decoded_token=None)}, {7041: Logprob(logprob=-3.962672472000122, rank=6, decoded_token=None), 220: Logprob(logprob=-0.3376724421977997, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3280467987060547, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.23579740524292, rank=1, decoded_token=None), 17: Logprob(logprob=-2.23579740524292, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-0.6167428493499756, rank=1, decoded_token=None)}, {389: Logprob(logprob=-2.094090461730957, rank=4, decoded_token=None), 505: Logprob(logprob=-1.719090461730957, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-1.238318681716919, rank=2, decoded_token=None), 279: Logprob(logprob=-0.4883187413215637, rank=1, decoded_token=None)}, {2128: Logprob(logprob=-0.10444443672895432, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.15527960658073425, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-2.8790693283081055, rank=4, decoded_token=None), 2650: Logprob(logprob=-1.004069447517395, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-1.269631266593933, rank=2, decoded_token=None), 315: Logprob(logprob=-1.019631266593933, rank=1, decoded_token=None)}, {12722: Logprob(logprob=-4.804388999938965, rank=9, decoded_token=None), 374: Logprob(logprob=-0.5543891191482544, rank=1, decoded_token=None)}, {15100: Logprob(logprob=-3.970444679260254, rank=7, decoded_token=None), 16964: Logprob(logprob=-0.5954446792602539, rank=1, decoded_token=None)}, {1268: Logprob(logprob=-1.029451847076416, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.8737099170684814, rank=3, decoded_token=None), 279: Logprob(logprob=-1.2487099170684814, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-1.841010332107544, rank=2, decoded_token=None), 8417: Logprob(logprob=-1.091010332107544, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.113349549472332, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.29112255573272705, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.009947842918336391, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.8003526926040649, rank=1, decoded_token=None)}, {4460: Logprob(logprob=-3.4189629554748535, rank=3, decoded_token=None), 430: Logprob(logprob=-0.7939630150794983, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9348305463790894, rank=2, decoded_token=None), 311: Logprob(logprob=-0.8098305463790894, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.037669867277145386, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0022645562421530485, rank=1, decoded_token=None)}, {2758: Logprob(logprob=-3.4584977626800537, rank=8, decoded_token=None), 578: Logprob(logprob=-2.0834977626800537, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3807215392589569, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.9317857027053833, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.39621296525001526, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.3208718299865723, rank=2, decoded_token=None), 279: Logprob(logprob=-0.44587182998657227, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.10219656676054001, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.7788331508636475, rank=2, decoded_token=None), 627: Logprob(logprob=-0.7788332104682922, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.45813241600990295, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.933356761932373, rank=4, decoded_token=None), 279: Logprob(logprob=-0.05835668370127678, rank=1, decoded_token=None)}, {1758: Logprob(logprob=-0.9147714376449585, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.909633994102478, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.44750797748565674, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0014780559577047825, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001387499796692282, rank=1, decoded_token=None)}, {64002: Logprob(logprob=-2.5448737144470215, rank=3, decoded_token=None), 94310: Logprob(logprob=-0.544873833656311, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04134264215826988, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.1306612491607666, rank=1, decoded_token=None)}, {555: Logprob(logprob=-0.03507496044039726, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0044165924191474915, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.013939524069428444, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.09804058820009232, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.0629529133439064, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.240189328789711, rank=1, decoded_token=None)}, {21: Logprob(logprob=-0.03781026229262352, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.01011602021753788, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.05886910483241081, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0013978243805468082, rank=1, decoded_token=None)}, {13: Logprob(logprob=-9.798523387871683e-05, rank=1, decoded_token=None)}, {72159: Logprob(logprob=-1.417578935623169, rank=2, decoded_token=None), 94310: Logprob(logprob=-0.792578935623169, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.02184729278087616, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.16513295471668243, rank=1, decoded_token=None)}, {323: Logprob(logprob=-5.760368347167969, rank=2, decoded_token=None), 555: Logprob(logprob=-0.010368410497903824, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.004999872762709856, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.10827615857124329, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.17176643013954163, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.027458835393190384, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04579097405076027, rank=1, decoded_token=None)}, {3965: Logprob(logprob=-0.16355350613594055, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.10822748392820358, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.008487226441502571, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0020695950370281935, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000342191313393414, rank=1, decoded_token=None)}, {94310: Logprob(logprob=-0.7333000302314758, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.024686889722943306, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.6213490962982178, rank=1, decoded_token=None)}, {505: Logprob(logprob=-0.10929779708385468, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.010756724514067173, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.05260276049375534, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.02710282802581787, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.014247246086597443, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04090675339102745, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.008638868108391762, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.0173895675688982, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.05997175723314285, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.00443486962467432, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0005690624238923192, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.335664987564087, rank=3, decoded_token=None), 356: Logprob(logprob=-1.210664987564087, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.20828098058700562, rank=1, decoded_token=None)}, {32: Logprob(logprob=-1.9398690462112427, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-5.220652103424072, rank=28, decoded_token=None), 2860: Logprob(logprob=-3.0956521034240723, rank=1, decoded_token=None)}, {31878: Logprob(logprob=-1.599919319152832, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.733023762702942, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-8.531267166137695, rank=187, decoded_token=None), 18: Logprob(logprob=-2.531266689300537, rank=1, decoded_token=None)}, {2204: Logprob(logprob=-2.716043472290039, rank=2, decoded_token=None), 13840: Logprob(logprob=-2.466043472290039, rank=1, decoded_token=None)}, {8146: Logprob(logprob=-5.786083698272705, rank=26, decoded_token=None), 4595: Logprob(logprob=-1.411083698272705, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.025601888075470924, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-3.9537112712860107, rank=11, decoded_token=None), 37824: Logprob(logprob=-2.8287112712860107, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.3711868226528168, rank=1, decoded_token=None)}, {2435: Logprob(logprob=-4.847472190856934, rank=13, decoded_token=None), 1442: Logprob(logprob=-1.4724724292755127, rank=1, decoded_token=None)}, {617: Logprob(logprob=-1.45283043384552, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.8435330986976624, rank=1, decoded_token=None)}, {914: Logprob(logprob=-4.36965799331665, rank=21, decoded_token=None), 18: Logprob(logprob=-2.9946579933166504, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-4.7997283935546875, rank=13, decoded_token=None), 2204: Logprob(logprob=-1.0497283935546875, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.16669881343841553, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-2.0677084922790527, rank=2, decoded_token=None), 2579: Logprob(logprob=-1.8177084922790527, rank=1, decoded_token=None)}, {1933: Logprob(logprob=-0.1227213442325592, rank=1, decoded_token=None)}, {304: Logprob(logprob=-3.446204662322998, rank=5, decoded_token=None), 13: Logprob(logprob=-0.4462047219276428, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-7.250609874725342, rank=17, decoded_token=None), 5708: Logprob(logprob=-0.25060996413230896, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.1065310388803482, rank=1, decoded_token=None)}, {578: Logprob(logprob=-2.566020965576172, rank=5, decoded_token=None), 2650: Logprob(logprob=-1.3160210847854614, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.9273428916931152, rank=3, decoded_token=None), 3637: Logprob(logprob=-0.8023430109024048, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.08843708783388138, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.6100079417228699, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.7515377402305603, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-2.1421217918395996, rank=2, decoded_token=None), 1855: Logprob(logprob=-0.5171217322349548, rank=1, decoded_token=None)}, {279: Logprob(logprob=-3.456434965133667, rank=6, decoded_token=None), 304: Logprob(logprob=-1.331434965133667, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.02585725486278534, rank=1, decoded_token=None)}, {706: Logprob(logprob=-0.38343092799186707, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.708461880683899, rank=2, decoded_token=None), 374: Logprob(logprob=-1.083461880683899, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.23030529916286469, rank=1, decoded_token=None)}, {649: Logprob(logprob=-2.6108829975128174, rank=2, decoded_token=None), 374: Logprob(logprob=-0.36088305711746216, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.057374272495508194, rank=1, decoded_token=None)}, {1766: Logprob(logprob=-2.6309587955474854, rank=4, decoded_token=None), 5439: Logprob(logprob=-1.1309587955474854, rank=1, decoded_token=None)}, {1701: Logprob(logprob=-2.2968969345092773, rank=2, decoded_token=None), 555: Logprob(logprob=-0.17189693450927734, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.41828861832618713, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-3.6377298831939697, rank=7, decoded_token=None), 6037: Logprob(logprob=-1.2627298831939697, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-4.555124759674072, rank=14, decoded_token=None), 220: Logprob(logprob=-1.3051248788833618, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.17938224971294403, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.9476473331451416, rank=2, decoded_token=None), 3639: Logprob(logprob=-1.1976473331451416, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-0.4874989986419678, rank=1, decoded_token=None)}, {25800: Logprob(logprob=-3.846048593521118, rank=9, decoded_token=None), 11: Logprob(logprob=-1.7835485935211182, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.18882788717746735, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.07510089874267578, rank=1, decoded_token=None)}, {13: Logprob(logprob=-2.343728542327881, rank=3, decoded_token=None), 284: Logprob(logprob=-1.5937285423278809, rank=1, decoded_token=None)}, {2650: Logprob(logprob=-3.1135451793670654, rank=3, decoded_token=None), 3639: Logprob(logprob=-0.6135452389717102, rank=1, decoded_token=None)}, {1690: Logprob(logprob=-0.08424817770719528, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.7079728245735168, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.14217698574066162, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-0.18304136395454407, rank=1, decoded_token=None)}, {1587: Logprob(logprob=-0.9694701433181763, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.025537513196468353, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.003264813916757703, rank=1, decoded_token=None)}, {617: Logprob(logprob=-0.09910587221384048, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.1510932743549347, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.03838161751627922, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.09627294540405273, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.07186505943536758, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.002630585338920355, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021421492099761963, rank=1, decoded_token=None)}, {25541: Logprob(logprob=-10.88266658782959, rank=909, decoded_token=None), 7699: Logprob(logprob=-2.2576663494110107, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.7218905091285706, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0011835244949907064, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00015138434537220746, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0014886498684063554, rank=1, decoded_token=None)}, {17: Logprob(logprob=-3.907280206680298, rank=6, decoded_token=None), 7699: Logprob(logprob=-3.032280206680298, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.0223177969455719, rank=1, decoded_token=None)}, {21129: Logprob(logprob=-5.540557861328125, rank=44, decoded_token=None), 2636: Logprob(logprob=-3.540557622909546, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.008849094621837139, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.00032646095496602356, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001445904199499637, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0016035091830417514, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.3098583221435547, rank=2, decoded_token=None), 20: Logprob(logprob=-2.1848583221435547, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.006650575902312994, rank=1, decoded_token=None)}, {24599: Logprob(logprob=-6.172876358032227, rank=80, decoded_token=None), 21129: Logprob(logprob=-2.5478761196136475, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.004533370956778526, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0005069877952337265, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002643712505232543, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.00395266804844141, rank=1, decoded_token=None)}, {19: Logprob(logprob=-2.4699602127075195, rank=3, decoded_token=None), 18: Logprob(logprob=-0.84496009349823, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.0012282931711524725, rank=1, decoded_token=None)}, {5154: Logprob(logprob=-5.722906112670898, rank=71, decoded_token=None), 18070: Logprob(logprob=-2.8479063510894775, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.48243021965026855, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004707326181232929, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0004094000905752182, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.0903127193450928, rank=1, decoded_token=None), 362: Logprob(logprob=-1.0903127193450928, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.21004998683929443, rank=1, decoded_token=None)}, {23956: Logprob(logprob=-3.7082245349884033, rank=5, decoded_token=None), 32: Logprob(logprob=-1.7082245349884033, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-2.328795909881592, rank=3, decoded_token=None), 315: Logprob(logprob=-1.4537959098815918, rank=1, decoded_token=None)}, {374: Logprob(logprob=-1.3939491510391235, rank=1, decoded_token=None)}, {13890: Logprob(logprob=-0.3086131513118744, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.004158303141593933, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.5719388723373413, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.611593246459961, rank=3, decoded_token=None), 17: Logprob(logprob=-2.486593246459961, rank=1, decoded_token=None)}, {865: Logprob(logprob=-3.814181327819824, rank=6, decoded_token=None), 25800: Logprob(logprob=-0.9391812086105347, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.21246875822544098, rank=1, decoded_token=None)}, {24: Logprob(logprob=-3.2393479347229004, rank=8, decoded_token=None), 17: Logprob(logprob=-2.1143479347229004, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9484657645225525, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.02641945704817772, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0019446763908490539, rank=1, decoded_token=None)}, {320: Logprob(logprob=-4.043663024902344, rank=2, decoded_token=None), 220: Logprob(logprob=-0.0436631478369236, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3292904496192932, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7795792818069458, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.019342729821801186, rank=1, decoded_token=None)}, {19: Logprob(logprob=-3.8902170658111572, rank=6, decoded_token=None), 24: Logprob(logprob=-0.2652171552181244, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.05693596974015236, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7711688876152039, rank=1, decoded_token=None)}, {320: Logprob(logprob=-1.7098952531814575, rank=2, decoded_token=None), 220: Logprob(logprob=-0.2098952829837799, rank=1, decoded_token=None)}, {21: Logprob(logprob=-3.9887096881866455, rank=6, decoded_token=None), 20: Logprob(logprob=-0.8637097477912903, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.05180598795413971, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006352707277983427, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.6478800773620605, rank=5, decoded_token=None), 18: Logprob(logprob=-1.1478800773620605, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.06078224629163742, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0037563731893897057, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00020287363440729678, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.5973082780838013, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3547166585922241, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.1522906869649887, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.119587242603302, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.250182867050171, rank=4, decoded_token=None), 24: Logprob(logprob=-1.250182867050171, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.21551699936389923, rank=1, decoded_token=None)}, {489: Logprob(logprob=-4.195828914642334, rank=3, decoded_token=None), 865: Logprob(logprob=-0.0708288699388504, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.3979986310005188, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.6019997596740723, rank=3, decoded_token=None), 21: Logprob(logprob=-1.2269997596740723, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.012111456133425236, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.02054995857179165, rank=1, decoded_token=None)}, {19: Logprob(logprob=-1.0867620706558228, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.14609402418136597, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0014072287594899535, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00014137222024146467, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.401207834482193, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.18403267860412598, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.15473514795303345, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.06539695709943771, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.4415698051452637, rank=3, decoded_token=None), 19: Logprob(logprob=-1.1915698051452637, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.11237519979476929, rank=1, decoded_token=None)}, {489: Logprob(logprob=-0.7666293382644653, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.39565205574035645, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.5823985934257507, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.031112726777791977, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.06674905866384506, rank=1, decoded_token=None)}, {24: Logprob(logprob=-1.1196229457855225, rank=2, decoded_token=None), 19: Logprob(logprob=-0.9946228861808777, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.013978317379951477, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.000894146622158587, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002002515539061278, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.19024042785167694, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.08259163796901703, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.11528829485177994, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04026882350444794, rank=1, decoded_token=None)}, {24: Logprob(logprob=-0.6260170340538025, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.025457678362727165, rank=1, decoded_token=None)}, {865: Logprob(logprob=-4.2807393074035645, rank=4, decoded_token=None), 489: Logprob(logprob=-0.15573909878730774, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.06027596443891525, rank=1, decoded_token=None)}, {21: Logprob(logprob=-1.8035647869110107, rank=2, decoded_token=None), 20: Logprob(logprob=-0.42856475710868835, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.025070033967494965, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.002612869720906019, rank=1, decoded_token=None)}, {24: Logprob(logprob=-4.944259166717529, rank=4, decoded_token=None), 20: Logprob(logprob=-0.19425919651985168, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.016041269525885582, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004313688259571791, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0003240775258745998, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.1086416244506836, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.18588051199913025, rank=1, decoded_token=None)}, {11874: Logprob(logprob=-5.220853328704834, rank=13, decoded_token=None), 32: Logprob(logprob=-1.8458532094955444, rank=1, decoded_token=None)}, {4459: Logprob(logprob=-6.961170196533203, rank=118, decoded_token=None), 5219: Logprob(logprob=-1.836169958114624, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.7194890975952148, rank=1, decoded_token=None)}, {617: Logprob(logprob=-1.3559916019439697, rank=2, decoded_token=None), 527: Logprob(logprob=-1.2309916019439697, rank=1, decoded_token=None)}, {264: Logprob(logprob=-0.6008616089820862, rank=1, decoded_token=None)}, {3325: Logprob(logprob=-9.21973705291748, rank=37, decoded_token=None), 2694: Logprob(logprob=-0.2822372615337372, rank=1, decoded_token=None)}, {4279: Logprob(logprob=-0.05753443390130997, rank=1, decoded_token=None)}, {5361: Logprob(logprob=-0.45470237731933594, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.1912495344877243, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.023397311568260193, rank=1, decoded_token=None)}, {1399: Logprob(logprob=-3.9711475372314453, rank=14, decoded_token=None), 717: Logprob(logprob=-2.3461475372314453, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.09623148292303085, rank=1, decoded_token=None)}, {9062: Logprob(logprob=-5.050774574279785, rank=12, decoded_token=None), 578: Logprob(logprob=-1.175774335861206, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.6333088874816895, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.35156384110450745, rank=1, decoded_token=None)}, {2753: Logprob(logprob=-2.4849326610565186, rank=3, decoded_token=None), 220: Logprob(logprob=-1.1099326610565186, rank=1, decoded_token=None)}, {1109: Logprob(logprob=-0.003735114587470889, rank=1, decoded_token=None)}, {477: Logprob(logprob=-2.9097344875335693, rank=3, decoded_token=None), 220: Logprob(logprob=-0.40973448753356934, rank=1, decoded_token=None)}, {6273: Logprob(logprob=-0.013717547990381718, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.005777327343821526, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.09111858904361725, rank=1, decoded_token=None)}, {717: Logprob(logprob=-5.106393337249756, rank=27, decoded_token=None), 1041: Logprob(logprob=-1.9813933372497559, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.1538446694612503, rank=1, decoded_token=None)}, {578: Logprob(logprob=-1.602337121963501, rank=3, decoded_token=None), 16299: Logprob(logprob=-0.977337121963501, rank=1, decoded_token=None)}, {12474: Logprob(logprob=-2.6630983352661133, rank=4, decoded_token=None), 3325: Logprob(logprob=-1.2880984544754028, rank=1, decoded_token=None)}, {4279: Logprob(logprob=-0.6888583898544312, rank=1, decoded_token=None)}, {8331: Logprob(logprob=-0.4009769856929779, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.16255250573158264, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.33479413390159607, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-0.20367619395256042, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.26733827590942383, rank=1, decoded_token=None)}, {285: Logprob(logprob=-9.538082122802734, rank=41, decoded_token=None), 374: Logprob(logprob=-0.03808215260505676, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.9306405186653137, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.007215976715088, rank=2, decoded_token=None), 21: Logprob(logprob=-1.6322158575057983, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.17282874882221222, rank=1, decoded_token=None)}, {3639: Logprob(logprob=-1.127549409866333, rank=2, decoded_token=None), 16299: Logprob(logprob=-0.877549409866333, rank=1, decoded_token=None)}, {527: Logprob(logprob=-2.004128932952881, rank=2, decoded_token=None), 374: Logprob(logprob=-0.2541288137435913, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.08610685169696808, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-0.31307634711265564, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.6419362425804138, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.09086183458566666, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.015456883236765862, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0013862771447747946, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.038329992443323135, rank=1, decoded_token=None)}, {21: Logprob(logprob=-1.907236099243164, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.24684971570968628, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.005438295193016529, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.3189382553100586, rank=3, decoded_token=None), 717: Logprob(logprob=-1.443938136100769, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.02410171739757061, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0009358317474834621, rank=1, decoded_token=None)}, {13: Logprob(logprob=-7.128461584215984e-05, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.004888962022960186, rank=1, decoded_token=None)}, {20: Logprob(logprob=-3.057605028152466, rank=7, decoded_token=None), 21: Logprob(logprob=-1.5576050281524658, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.02449881099164486, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0014962679706513882, rank=1, decoded_token=None)}, {717: Logprob(logprob=-1.258972406387329, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0013371107634156942, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.00025960413040593266, rank=1, decoded_token=None)}, {13: Logprob(logprob=-7.068861305015162e-05, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.005708463490009308, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.931321620941162, rank=7, decoded_token=None), 19: Logprob(logprob=-1.4313217401504517, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.003584271762520075, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0014222278259694576, rank=1, decoded_token=None)}, {717: Logprob(logprob=-0.7489094734191895, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0011520899133756757, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0003152588615193963, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00017391123401466757, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.015513576567173004, rank=1, decoded_token=None)}, {717: Logprob(logprob=-2.203749179840088, rank=3, decoded_token=None), 21: Logprob(logprob=-1.203749179840088, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.002027838258072734, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0010093123419210315, rank=1, decoded_token=None)}, {868: Logprob(logprob=-2.2409543991088867, rank=2, decoded_token=None), 605: Logprob(logprob=-0.9909543395042419, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.02810521610081196, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.0029396675527095795, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0005796659388579428, rank=1, decoded_token=None)}, {423: Logprob(logprob=-2.1178319454193115, rank=4, decoded_token=None), 362: Logprob(logprob=-1.1178319454193115, rank=1, decoded_token=None)}], outputs=[CompletionOutput(index=0, text='', token_ids=(271,), cumulative_logprob=None, logprobs=None, finish_reason=length, stop_reason=None)], finished=True, metrics=RequestMetrics(arrival_time=1732330219.9130352, last_token_time=1732330219.9130352, first_scheduled_time=1732330219.9404528, first_token_time=1732330220.0975826, time_in_queue=0.027417659759521484, finished_time=1732330220.098488, scheduler_time=0.002440982001644443, model_forward_time=None, model_execute_time=None), lora_request=None, num_cached_tokens=0), RequestOutput(request_id=3, prompt=None, prompt_token_ids=[128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 11874, 4459, 5219, 617, 264, 3325, 4279, 5361, 315, 220, 1399, 13, 9062, 1396, 374, 2753, 1109, 477, 6273, 311, 220, 717, 13, 578, 12474, 4279, 8331, 315, 279, 1403, 5219, 285, 220, 17, 13, 3639, 527, 279, 1403, 5219, 5380, 32, 13, 220, 21, 323, 220, 605, 198, 33, 13, 220, 20, 323, 220, 717, 198, 34, 13, 220, 605, 323, 220, 717, 198, 35, 13, 220, 717, 323, 220, 868, 198, 16533, 25, 426], encoder_prompt=None, encoder_prompt_token_ids=None, prompt_logprobs=[None, {791: Logprob(logprob=-3.620506763458252, rank=4, decoded_token=None), 14924: Logprob(logprob=-1.1830066442489624, rank=1, decoded_token=None)}, {2768: Logprob(logprob=-4.267952919006348, rank=2, decoded_token=None), 220: Logprob(logprob=-3.7054529190063477, rank=1, decoded_token=None)}, {527: Logprob(logprob=-3.0935873985290527, rank=3, decoded_token=None), 374: Logprob(logprob=-1.9685872793197632, rank=1, decoded_token=None)}, {5361: Logprob(logprob=-9.361089706420898, rank=708, decoded_token=None), 279: Logprob(logprob=-1.5485893487930298, rank=1, decoded_token=None)}, {5873: Logprob(logprob=-1.1175264120101929, rank=1, decoded_token=None)}, {4860: Logprob(logprob=-0.15363378822803497, rank=1, decoded_token=None)}, {320: Logprob(logprob=-3.388906955718994, rank=9, decoded_token=None), 389: Logprob(logprob=-1.7639068365097046, rank=1, decoded_token=None)}, {4291: Logprob(logprob=-3.4973137378692627, rank=2, decoded_token=None), 11865: Logprob(logprob=-0.6223137378692627, rank=1, decoded_token=None)}, {11503: Logprob(logprob=-0.987357497215271, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.4506547451019287, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.8773975372314453, rank=4, decoded_token=None), 389: Logprob(logprob=-1.5023976564407349, rank=1, decoded_token=None)}, {36256: Logprob(logprob=-8.630099296569824, rank=577, decoded_token=None), 279: Logprob(logprob=-1.1925991773605347, rank=1, decoded_token=None)}, {38696: Logprob(logprob=-3.769948959350586, rank=8, decoded_token=None), 19320: Logprob(logprob=-2.144948959350586, rank=1, decoded_token=None)}, {382: Logprob(logprob=-5.472397804260254, rank=18, decoded_token=None), 13: Logprob(logprob=-1.0973976850509644, rank=1, decoded_token=None)}, {791: Logprob(logprob=-3.5461583137512207, rank=5, decoded_token=None), 16: Logprob(logprob=-1.4211583137512207, rank=1, decoded_token=None)}, {7187: Logprob(logprob=-7.392093658447266, rank=164, decoded_token=None), 2768: Logprob(logprob=-2.3295936584472656, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.11663393676280975, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.73690128326416, rank=2, decoded_token=None), 264: Logprob(logprob=-0.48690128326416016, rank=1, decoded_token=None)}, {3363: Logprob(logprob=-1.8540297746658325, rank=1, decoded_token=None)}, {1405: Logprob(logprob=-5.987232208251953, rank=13, decoded_token=None), 315: Logprob(logprob=-0.23723231256008148, rank=1, decoded_token=None)}, {33126: Logprob(logprob=-9.044610023498535, rank=315, decoded_token=None), 358: Logprob(logprob=-1.2946101427078247, rank=1, decoded_token=None)}, {574: Logprob(logprob=-5.429495334625244, rank=8, decoded_token=None), 6439: Logprob(logprob=-0.4294951558113098, rank=1, decoded_token=None)}, {9405: Logprob(logprob=-0.40476104617118835, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.5629992485046387, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.7537806630134583, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-7.209847450256348, rank=134, decoded_token=None), 1041: Logprob(logprob=-2.7098476886749268, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.7134871482849121, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-8.75186538696289, rank=571, decoded_token=None), 931: Logprob(logprob=-0.376865029335022, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.47577813267707825, rank=1, decoded_token=None)}, {3639: Logprob(logprob=-4.106588840484619, rank=8, decoded_token=None), 578: Logprob(logprob=-1.2315888404846191, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.30162209272384644, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.16182462871074677, rank=1, decoded_token=None)}, {907: Logprob(logprob=-5.745996475219727, rank=27, decoded_token=None), 7187: Logprob(logprob=-0.8084966540336609, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.032959938049316406, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.9882255792617798, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.205665588378906, rank=12, decoded_token=None), 7187: Logprob(logprob=-1.2056655883789062, rank=1, decoded_token=None)}, {20: Logprob(logprob=-3.386111259460449, rank=3, decoded_token=None), 605: Logprob(logprob=-3.011111259460449, rank=1, decoded_token=None)}, {304: Logprob(logprob=-6.863307952880859, rank=33, decoded_token=None), 339: Logprob(logprob=-0.48830777406692505, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.4937672019004822, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.7949767112731934, rank=9, decoded_token=None), 2768: Logprob(logprob=-1.6699767112731934, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.8562200665473938, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-0.46025389432907104, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.35301274061203003, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-0.0504663847386837, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-3.7009406089782715, rank=5, decoded_token=None), 1980: Logprob(logprob=-0.8259406685829163, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.014418125152588, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.2552250325679779, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.18280577659606934, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.9818596839904785, rank=1, decoded_token=None)}, {9214: Logprob(logprob=-7.26568078994751, rank=42, decoded_token=None), 11: Logprob(logprob=-0.6406807899475098, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.34480056166648865, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0036241819616407156, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0007076143519952893, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021493716165423393, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.265846848487854, rank=1, decoded_token=None)}, {11758: Logprob(logprob=-1.8974242210388184, rank=2, decoded_token=None), 11990: Logprob(logprob=-1.3974242210388184, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.008312508463859558, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0016896746819838881, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000583597575314343, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006553467363119125, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.09962913393974304, rank=1, decoded_token=None)}, {22781: Logprob(logprob=-0.696441113948822, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.007642554119229317, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0023322305642068386, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0006073060794733465, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.019782857969403267, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.06486474722623825, rank=1, decoded_token=None)}, {6305: Logprob(logprob=-0.6396012306213379, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.25918030738830566, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.9573916792869568, rank=1, decoded_token=None), 36: Logprob(logprob=-0.9573916792869568, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.06022197753190994, rank=1, decoded_token=None)}, {362: Logprob(logprob=-1.2654039859771729, rank=2, decoded_token=None), 423: Logprob(logprob=-1.1404039859771729, rank=1, decoded_token=None)}, {271: Logprob(logprob=-1.2457599639892578, rank=2, decoded_token=None), 128001: Logprob(logprob=-0.7457600235939026, rank=1, decoded_token=None)}, {43819: Logprob(logprob=-12.215432167053223, rank=2611, decoded_token=None), 791: Logprob(logprob=-0.8404321670532227, rank=1, decoded_token=None)}, {21475: Logprob(logprob=-0.7314256429672241, rank=1, decoded_token=None)}, {1511: Logprob(logprob=-6.56179141998291, rank=48, decoded_token=None), 374: Logprob(logprob=-1.999291181564331, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.3226728439331055, rank=3, decoded_token=None), 264: Logprob(logprob=-1.322672724723816, rank=1, decoded_token=None)}, {6037: Logprob(logprob=-6.163534164428711, rank=55, decoded_token=None), 15150: Logprob(logprob=-2.538533926010132, rank=1, decoded_token=None)}, {330: Logprob(logprob=-3.6627614498138428, rank=9, decoded_token=None), 315: Logprob(logprob=-1.5377614498138428, rank=1, decoded_token=None)}, {2261: Logprob(logprob=-4.202095985412598, rank=14, decoded_token=None), 2746: Logprob(logprob=-2.7020959854125977, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.6789430379867554, rank=1, decoded_token=None)}, {806: Logprob(logprob=-4.852216720581055, rank=17, decoded_token=None), 20: Logprob(logprob=-1.4772168397903442, rank=1, decoded_token=None)}, {1: Logprob(logprob=-1.4486876726150513, rank=2, decoded_token=None), 311: Logprob(logprob=-0.9486876726150513, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.5747750997543335, rank=1, decoded_token=None)}, {1893: Logprob(logprob=-6.229022026062012, rank=44, decoded_token=None), 1505: Logprob(logprob=-1.4790222644805908, rank=1, decoded_token=None)}, {279: Logprob(logprob=-1.2839043140411377, rank=2, decoded_token=None), 264: Logprob(logprob=-0.7839043140411377, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.3298133611679077, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-6.342275142669678, rank=23, decoded_token=None), 220: Logprob(logprob=-0.27977514266967773, rank=1, decoded_token=None)}, {6982: Logprob(logprob=-2.9779157638549805, rank=5, decoded_token=None), 220: Logprob(logprob=-1.2279157638549805, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-0.6994138956069946, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.4830473065376282, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.417629241943359, rank=9, decoded_token=None), 3639: Logprob(logprob=-0.7926291227340698, rank=1, decoded_token=None)}, {605: Logprob(logprob=-4.466213703155518, rank=13, decoded_token=None), 806: Logprob(logprob=-2.0912137031555176, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.9247885942459106, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.1273905634880066, rank=1, decoded_token=None)}, {1691: Logprob(logprob=-0.8227850198745728, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.007400361355394125, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.01602531410753727, rank=1, decoded_token=None)}, {843: Logprob(logprob=-0.14333274960517883, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.03991517424583435, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.19991245865821838, rank=1, decoded_token=None)}, {3391: Logprob(logprob=-0.02759881317615509, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.08311088383197784, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3676953911781311, rank=1, decoded_token=None)}, {4370: Logprob(logprob=-0.017791442573070526, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-9.866714477539062, rank=126, decoded_token=None), 11: Logprob(logprob=-0.17921476066112518, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-4.3207597732543945, rank=8, decoded_token=None), 1396: Logprob(logprob=-1.0707597732543945, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.38952898979187, rank=2, decoded_token=None), 374: Logprob(logprob=-0.5145289897918701, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.5315698385238647, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.11095929145813, rank=3, decoded_token=None), 6037: Logprob(logprob=-0.8609593510627747, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.3972514867782593, rank=1, decoded_token=None), 220: Logprob(logprob=-1.3972514867782593, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.22985251247882843, rank=1, decoded_token=None)}, {837: Logprob(logprob=-0.6552088856697083, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.3445965349674225, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.07507845014333725, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.009831340983510017, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.5897692441940308, rank=1, decoded_token=None)}, {220: Logprob(logprob=-2.430539608001709, rank=5, decoded_token=None), 1176: Logprob(logprob=-2.055539608001709, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.135545015335083, rank=3, decoded_token=None), 806: Logprob(logprob=-1.885545015335083, rank=1, decoded_token=None)}, {339: Logprob(logprob=-0.6885674595832825, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.1400470733642578, rank=2, decoded_token=None), 4751: Logprob(logprob=-0.5150470733642578, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.2480833530426025, rank=2, decoded_token=None), 374: Logprob(logprob=-0.4980833828449249, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.013370846398174763, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.1963651180267334, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.482834815979004, rank=2, decoded_token=None), 374: Logprob(logprob=-0.10783478617668152, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.2007579803466797, rank=1, decoded_token=None)}, {459: Logprob(logprob=-4.266760349273682, rank=6, decoded_token=None), 220: Logprob(logprob=-0.5167602300643921, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.4180258810520172, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.021704640239477158, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.2175983190536499, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0018430643249303102, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0003660247311927378, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.05719471722841263, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.4022200107574463, rank=4, decoded_token=None), 220: Logprob(logprob=-0.2772199809551239, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.5990962982177734, rank=4, decoded_token=None), 220: Logprob(logprob=-1.849096417427063, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.754885196685791, rank=1, decoded_token=None)}, {2646: Logprob(logprob=-3.085150718688965, rank=8, decoded_token=None), 3136: Logprob(logprob=-1.8351507186889648, rank=1, decoded_token=None)}, {617: Logprob(logprob=-2.3687305450439453, rank=3, decoded_token=None), 842: Logprob(logprob=-1.1187306642532349, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.649540424346924, rank=8, decoded_token=None), 264: Logprob(logprob=-0.8995404243469238, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-2.7209155559539795, rank=4, decoded_token=None), 24871: Logprob(logprob=-0.7209156155586243, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.07320179790258408, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-3.1266684532165527, rank=4, decoded_token=None), 304: Logprob(logprob=-0.8766685128211975, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.01429002359509468, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-0.0503406785428524, rank=1, decoded_token=None)}, {1023: Logprob(logprob=-0.0030884684529155493, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03331640362739563, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.011476805433630943, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002609150833450258, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.14198358356952667, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-5.121759414672852, rank=9, decoded_token=None), 1396: Logprob(logprob=-0.8717594742774963, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.605440855026245, rank=4, decoded_token=None), 1396: Logprob(logprob=-0.23044079542160034, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.1128024309873581, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.31675779819488525, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.007474906742572784, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.02105293981730938, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.08588151633739471, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.4892382323741913, rank=1, decoded_token=None)}, {459: Logprob(logprob=-3.0233283042907715, rank=5, decoded_token=None), 220: Logprob(logprob=-1.7733283042907715, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.8158836364746094, rank=2, decoded_token=None), 10535: Logprob(logprob=-0.6908836364746094, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.0712813287973404, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-7.487314224243164, rank=28, decoded_token=None), 627: Logprob(logprob=-0.6123140454292297, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.1590193808078766, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.011315456591546535, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.005359092261642218, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03135305643081665, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.02188076637685299, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000491021724883467, rank=1, decoded_token=None)}, {1442: Logprob(logprob=-4.837580680847168, rank=7, decoded_token=None), 578: Logprob(logprob=-0.3375808596611023, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.5674490332603455, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.3511098623275757, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.2133203744888306, rank=1, decoded_token=None), 374: Logprob(logprob=-1.2133203744888306, rank=1, decoded_token=None)}, {3940: Logprob(logprob=-4.17018461227417, rank=14, decoded_token=None), 374: Logprob(logprob=-1.42018461227417, rank=1, decoded_token=None)}, {449: Logprob(logprob=-0.05720282346010208, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.9503310322761536, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.7719177007675171, rank=2, decoded_token=None), 1524: Logprob(logprob=-0.6469177007675171, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.008971618488430977, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-2.8240914344787598, rank=2, decoded_token=None), 11: Logprob(logprob=-0.19909141957759857, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.6145686507225037, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.596506357192993, rank=3, decoded_token=None), 1828: Logprob(logprob=-0.47150641679763794, rank=1, decoded_token=None)}, {1053: Logprob(logprob=-2.0979936122894287, rank=2, decoded_token=None), 690: Logprob(logprob=-0.22299352288246155, rank=1, decoded_token=None)}, {617: Logprob(logprob=-3.0427448749542236, rank=6, decoded_token=None), 2646: Logprob(logprob=-0.9177448153495789, rank=1, decoded_token=None)}, {1193: Logprob(logprob=-3.433971643447876, rank=7, decoded_token=None), 459: Logprob(logprob=-0.8089715838432312, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.313199520111084, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.01859915629029274, rank=1, decoded_token=None)}, {304: Logprob(logprob=-2.8377554416656494, rank=2, decoded_token=None), 627: Logprob(logprob=-0.33775535225868225, rank=1, decoded_token=None)}, {433: Logprob(logprob=-0.3653806447982788, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.20377226173877716, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.02473527193069458, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0027272433508187532, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.1850049495697021, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.19033809006214142, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.309290647506714, rank=2, decoded_token=None), 791: Logprob(logprob=-1.9342906475067139, rank=1, decoded_token=None)}, {2860: Logprob(logprob=-5.905457496643066, rank=57, decoded_token=None), 1396: Logprob(logprob=-2.5929572582244873, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.027499310672283173, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.23535610735416412, rank=1, decoded_token=None)}, {966: Logprob(logprob=-4.081752777099609, rank=3, decoded_token=None), 605: Logprob(logprob=-3.8317525386810303, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-6.079629898071289, rank=50, decoded_token=None), 4236: Logprob(logprob=-1.7046300172805786, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.493253231048584, rank=7, decoded_token=None), 31408: Logprob(logprob=-1.9932533502578735, rank=1, decoded_token=None)}, {1514: Logprob(logprob=-1.6049902439117432, rank=2, decoded_token=None), 387: Logprob(logprob=-0.9799902439117432, rank=1, decoded_token=None)}, {19794: Logprob(logprob=-4.2269792556762695, rank=6, decoded_token=None), 304: Logprob(logprob=-0.7269791960716248, rank=1, decoded_token=None)}, {520: Logprob(logprob=-2.5716304779052734, rank=4, decoded_token=None), 304: Logprob(logprob=-0.6966304779052734, rank=1, decoded_token=None)}, {264: Logprob(logprob=-0.8206021785736084, rank=1, decoded_token=None)}, {6246: Logprob(logprob=-5.323214530944824, rank=24, decoded_token=None), 16520: Logprob(logprob=-1.0732142925262451, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.8638421297073364, rank=1, decoded_token=None)}, {2684: Logprob(logprob=-3.016662120819092, rank=7, decoded_token=None), 1442: Logprob(logprob=-1.7666622400283813, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.6918129324913025, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.022499410435557365, rank=1, decoded_token=None)}, {7041: Logprob(logprob=-3.962672472000122, rank=6, decoded_token=None), 220: Logprob(logprob=-0.3376724421977997, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3280467987060547, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.23579740524292, rank=1, decoded_token=None), 17: Logprob(logprob=-2.23579740524292, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-0.6167428493499756, rank=1, decoded_token=None)}, {389: Logprob(logprob=-2.094090461730957, rank=4, decoded_token=None), 505: Logprob(logprob=-1.719090461730957, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-1.238318681716919, rank=2, decoded_token=None), 279: Logprob(logprob=-0.4883187413215637, rank=1, decoded_token=None)}, {2128: Logprob(logprob=-0.10444443672895432, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.15527960658073425, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-2.8790693283081055, rank=4, decoded_token=None), 2650: Logprob(logprob=-1.004069447517395, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-1.269631266593933, rank=2, decoded_token=None), 315: Logprob(logprob=-1.019631266593933, rank=1, decoded_token=None)}, {12722: Logprob(logprob=-4.804388999938965, rank=9, decoded_token=None), 374: Logprob(logprob=-0.5543891191482544, rank=1, decoded_token=None)}, {15100: Logprob(logprob=-3.970444679260254, rank=7, decoded_token=None), 16964: Logprob(logprob=-0.5954446792602539, rank=1, decoded_token=None)}, {1268: Logprob(logprob=-1.029451847076416, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.8737099170684814, rank=3, decoded_token=None), 279: Logprob(logprob=-1.2487099170684814, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-1.841010332107544, rank=2, decoded_token=None), 8417: Logprob(logprob=-1.091010332107544, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.113349549472332, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.29112255573272705, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.009947842918336391, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.8003526926040649, rank=1, decoded_token=None)}, {4460: Logprob(logprob=-3.4189629554748535, rank=3, decoded_token=None), 430: Logprob(logprob=-0.7939630150794983, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9348305463790894, rank=2, decoded_token=None), 311: Logprob(logprob=-0.8098305463790894, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.037669867277145386, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0022645562421530485, rank=1, decoded_token=None)}, {2758: Logprob(logprob=-3.4584977626800537, rank=8, decoded_token=None), 578: Logprob(logprob=-2.0834977626800537, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3807215392589569, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.9317857027053833, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.39621296525001526, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.3208718299865723, rank=2, decoded_token=None), 279: Logprob(logprob=-0.44587182998657227, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.10219656676054001, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.7788331508636475, rank=2, decoded_token=None), 627: Logprob(logprob=-0.7788332104682922, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.45813241600990295, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.933356761932373, rank=4, decoded_token=None), 279: Logprob(logprob=-0.05835668370127678, rank=1, decoded_token=None)}, {1758: Logprob(logprob=-0.9147714376449585, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.909633994102478, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.44750797748565674, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0014780559577047825, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001387499796692282, rank=1, decoded_token=None)}, {64002: Logprob(logprob=-2.5448737144470215, rank=3, decoded_token=None), 94310: Logprob(logprob=-0.544873833656311, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04134264215826988, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.1306612491607666, rank=1, decoded_token=None)}, {555: Logprob(logprob=-0.03507496044039726, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0044165924191474915, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.013939524069428444, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.09804058820009232, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.0629529133439064, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.240189328789711, rank=1, decoded_token=None)}, {21: Logprob(logprob=-0.03781026229262352, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.01011602021753788, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.05886910483241081, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0013978243805468082, rank=1, decoded_token=None)}, {13: Logprob(logprob=-9.798523387871683e-05, rank=1, decoded_token=None)}, {72159: Logprob(logprob=-1.417578935623169, rank=2, decoded_token=None), 94310: Logprob(logprob=-0.792578935623169, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.02184729278087616, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.16513295471668243, rank=1, decoded_token=None)}, {323: Logprob(logprob=-5.760368347167969, rank=2, decoded_token=None), 555: Logprob(logprob=-0.010368410497903824, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.004999872762709856, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.10827615857124329, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.17176643013954163, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.027458835393190384, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04579097405076027, rank=1, decoded_token=None)}, {3965: Logprob(logprob=-0.16355350613594055, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.10822748392820358, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.008487226441502571, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0020695950370281935, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000342191313393414, rank=1, decoded_token=None)}, {94310: Logprob(logprob=-0.7333000302314758, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.024686889722943306, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.6213490962982178, rank=1, decoded_token=None)}, {505: Logprob(logprob=-0.10929779708385468, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.010756724514067173, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.05260276049375534, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.02710282802581787, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.014247246086597443, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04090675339102745, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.008638868108391762, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.0173895675688982, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.05997175723314285, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.00443486962467432, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0005690624238923192, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.335664987564087, rank=3, decoded_token=None), 356: Logprob(logprob=-1.210664987564087, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.20828098058700562, rank=1, decoded_token=None)}, {32: Logprob(logprob=-1.9398690462112427, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-5.220652103424072, rank=28, decoded_token=None), 2860: Logprob(logprob=-3.0956521034240723, rank=1, decoded_token=None)}, {31878: Logprob(logprob=-1.599919319152832, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.733023762702942, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-8.531267166137695, rank=187, decoded_token=None), 18: Logprob(logprob=-2.531266689300537, rank=1, decoded_token=None)}, {2204: Logprob(logprob=-2.716043472290039, rank=2, decoded_token=None), 13840: Logprob(logprob=-2.466043472290039, rank=1, decoded_token=None)}, {8146: Logprob(logprob=-5.786083698272705, rank=26, decoded_token=None), 4595: Logprob(logprob=-1.411083698272705, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.025601888075470924, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-3.9537112712860107, rank=11, decoded_token=None), 37824: Logprob(logprob=-2.8287112712860107, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.3711868226528168, rank=1, decoded_token=None)}, {2435: Logprob(logprob=-4.847472190856934, rank=13, decoded_token=None), 1442: Logprob(logprob=-1.4724724292755127, rank=1, decoded_token=None)}, {617: Logprob(logprob=-1.45283043384552, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.8435330986976624, rank=1, decoded_token=None)}, {914: Logprob(logprob=-4.36965799331665, rank=21, decoded_token=None), 18: Logprob(logprob=-2.9946579933166504, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-4.7997283935546875, rank=13, decoded_token=None), 2204: Logprob(logprob=-1.0497283935546875, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.16669881343841553, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-2.0677084922790527, rank=2, decoded_token=None), 2579: Logprob(logprob=-1.8177084922790527, rank=1, decoded_token=None)}, {1933: Logprob(logprob=-0.1227213442325592, rank=1, decoded_token=None)}, {304: Logprob(logprob=-3.446204662322998, rank=5, decoded_token=None), 13: Logprob(logprob=-0.4462047219276428, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-7.250609874725342, rank=17, decoded_token=None), 5708: Logprob(logprob=-0.25060996413230896, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.1065310388803482, rank=1, decoded_token=None)}, {578: Logprob(logprob=-2.566020965576172, rank=5, decoded_token=None), 2650: Logprob(logprob=-1.3160210847854614, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.9273428916931152, rank=3, decoded_token=None), 3637: Logprob(logprob=-0.8023430109024048, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.08843708783388138, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.6100079417228699, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.7515377402305603, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-2.1421217918395996, rank=2, decoded_token=None), 1855: Logprob(logprob=-0.5171217322349548, rank=1, decoded_token=None)}, {279: Logprob(logprob=-3.456434965133667, rank=6, decoded_token=None), 304: Logprob(logprob=-1.331434965133667, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.02585725486278534, rank=1, decoded_token=None)}, {706: Logprob(logprob=-0.38343092799186707, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.708461880683899, rank=2, decoded_token=None), 374: Logprob(logprob=-1.083461880683899, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.23030529916286469, rank=1, decoded_token=None)}, {649: Logprob(logprob=-2.6108829975128174, rank=2, decoded_token=None), 374: Logprob(logprob=-0.36088305711746216, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.057374272495508194, rank=1, decoded_token=None)}, {1766: Logprob(logprob=-2.6309587955474854, rank=4, decoded_token=None), 5439: Logprob(logprob=-1.1309587955474854, rank=1, decoded_token=None)}, {1701: Logprob(logprob=-2.2968969345092773, rank=2, decoded_token=None), 555: Logprob(logprob=-0.17189693450927734, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.41828861832618713, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-3.6377298831939697, rank=7, decoded_token=None), 6037: Logprob(logprob=-1.2627298831939697, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-4.555124759674072, rank=14, decoded_token=None), 220: Logprob(logprob=-1.3051248788833618, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.17938224971294403, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.9476473331451416, rank=2, decoded_token=None), 3639: Logprob(logprob=-1.1976473331451416, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-0.4874989986419678, rank=1, decoded_token=None)}, {25800: Logprob(logprob=-3.846048593521118, rank=9, decoded_token=None), 11: Logprob(logprob=-1.7835485935211182, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.18882788717746735, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.07510089874267578, rank=1, decoded_token=None)}, {13: Logprob(logprob=-2.343728542327881, rank=3, decoded_token=None), 284: Logprob(logprob=-1.5937285423278809, rank=1, decoded_token=None)}, {2650: Logprob(logprob=-3.1135451793670654, rank=3, decoded_token=None), 3639: Logprob(logprob=-0.6135452389717102, rank=1, decoded_token=None)}, {1690: Logprob(logprob=-0.08424817770719528, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.7079728245735168, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.14217698574066162, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-0.18304136395454407, rank=1, decoded_token=None)}, {1587: Logprob(logprob=-0.9694701433181763, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.025537513196468353, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.003264813916757703, rank=1, decoded_token=None)}, {617: Logprob(logprob=-0.09910587221384048, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.1510932743549347, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.03838161751627922, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.09627294540405273, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.07186505943536758, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.002630585338920355, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021421492099761963, rank=1, decoded_token=None)}, {25541: Logprob(logprob=-10.88266658782959, rank=909, decoded_token=None), 7699: Logprob(logprob=-2.2576663494110107, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.7218905091285706, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0011835244949907064, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00015138434537220746, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0014886498684063554, rank=1, decoded_token=None)}, {17: Logprob(logprob=-3.907280206680298, rank=6, decoded_token=None), 7699: Logprob(logprob=-3.032280206680298, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.0223177969455719, rank=1, decoded_token=None)}, {21129: Logprob(logprob=-5.540557861328125, rank=44, decoded_token=None), 2636: Logprob(logprob=-3.540557622909546, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.008849094621837139, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.00032646095496602356, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001445904199499637, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0016035091830417514, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.3098583221435547, rank=2, decoded_token=None), 20: Logprob(logprob=-2.1848583221435547, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.006650575902312994, rank=1, decoded_token=None)}, {24599: Logprob(logprob=-6.172876358032227, rank=80, decoded_token=None), 21129: Logprob(logprob=-2.5478761196136475, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.004533370956778526, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0005069877952337265, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002643712505232543, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.00395266804844141, rank=1, decoded_token=None)}, {19: Logprob(logprob=-2.4699602127075195, rank=3, decoded_token=None), 18: Logprob(logprob=-0.84496009349823, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.0012282931711524725, rank=1, decoded_token=None)}, {5154: Logprob(logprob=-5.722906112670898, rank=71, decoded_token=None), 18070: Logprob(logprob=-2.8479063510894775, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.48243021965026855, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004707326181232929, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0004094000905752182, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.0903127193450928, rank=1, decoded_token=None), 362: Logprob(logprob=-1.0903127193450928, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.21004998683929443, rank=1, decoded_token=None)}, {23956: Logprob(logprob=-3.7082245349884033, rank=5, decoded_token=None), 32: Logprob(logprob=-1.7082245349884033, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-2.328795909881592, rank=3, decoded_token=None), 315: Logprob(logprob=-1.4537959098815918, rank=1, decoded_token=None)}, {374: Logprob(logprob=-1.3939491510391235, rank=1, decoded_token=None)}, {13890: Logprob(logprob=-0.3086131513118744, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.004158303141593933, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.5719388723373413, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.611593246459961, rank=3, decoded_token=None), 17: Logprob(logprob=-2.486593246459961, rank=1, decoded_token=None)}, {865: Logprob(logprob=-3.814181327819824, rank=6, decoded_token=None), 25800: Logprob(logprob=-0.9391812086105347, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.21246875822544098, rank=1, decoded_token=None)}, {24: Logprob(logprob=-3.2393479347229004, rank=8, decoded_token=None), 17: Logprob(logprob=-2.1143479347229004, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9484657645225525, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.02641945704817772, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0019446763908490539, rank=1, decoded_token=None)}, {320: Logprob(logprob=-4.043663024902344, rank=2, decoded_token=None), 220: Logprob(logprob=-0.0436631478369236, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3292904496192932, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7795792818069458, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.019342729821801186, rank=1, decoded_token=None)}, {19: Logprob(logprob=-3.8902170658111572, rank=6, decoded_token=None), 24: Logprob(logprob=-0.2652171552181244, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.05693596974015236, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7711688876152039, rank=1, decoded_token=None)}, {320: Logprob(logprob=-1.7098952531814575, rank=2, decoded_token=None), 220: Logprob(logprob=-0.2098952829837799, rank=1, decoded_token=None)}, {21: Logprob(logprob=-3.9887096881866455, rank=6, decoded_token=None), 20: Logprob(logprob=-0.8637097477912903, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.05180598795413971, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006352707277983427, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.6478800773620605, rank=5, decoded_token=None), 18: Logprob(logprob=-1.1478800773620605, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.06078224629163742, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0037563731893897057, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00020287363440729678, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.5973082780838013, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3547166585922241, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.1522906869649887, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.119587242603302, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.250182867050171, rank=4, decoded_token=None), 24: Logprob(logprob=-1.250182867050171, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.21551699936389923, rank=1, decoded_token=None)}, {489: Logprob(logprob=-4.195828914642334, rank=3, decoded_token=None), 865: Logprob(logprob=-0.0708288699388504, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.3979986310005188, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.6019997596740723, rank=3, decoded_token=None), 21: Logprob(logprob=-1.2269997596740723, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.012111456133425236, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.02054995857179165, rank=1, decoded_token=None)}, {19: Logprob(logprob=-1.0867620706558228, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.14609402418136597, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0014072287594899535, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00014137222024146467, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.401207834482193, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.18403267860412598, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.15473514795303345, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.06539695709943771, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.4415698051452637, rank=3, decoded_token=None), 19: Logprob(logprob=-1.1915698051452637, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.11237519979476929, rank=1, decoded_token=None)}, {489: Logprob(logprob=-0.7666293382644653, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.39565205574035645, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.5823985934257507, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.031112726777791977, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.06674905866384506, rank=1, decoded_token=None)}, {24: Logprob(logprob=-1.1196229457855225, rank=2, decoded_token=None), 19: Logprob(logprob=-0.9946228861808777, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.013978317379951477, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.000894146622158587, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002002515539061278, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.19024042785167694, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.08259163796901703, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.11528829485177994, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04026882350444794, rank=1, decoded_token=None)}, {24: Logprob(logprob=-0.6260170340538025, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.025457678362727165, rank=1, decoded_token=None)}, {865: Logprob(logprob=-4.2807393074035645, rank=4, decoded_token=None), 489: Logprob(logprob=-0.15573909878730774, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.06027596443891525, rank=1, decoded_token=None)}, {21: Logprob(logprob=-1.8035647869110107, rank=2, decoded_token=None), 20: Logprob(logprob=-0.42856475710868835, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.025070033967494965, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.002612869720906019, rank=1, decoded_token=None)}, {24: Logprob(logprob=-4.944259166717529, rank=4, decoded_token=None), 20: Logprob(logprob=-0.19425919651985168, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.016041269525885582, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004313688259571791, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0003240775258745998, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.1086416244506836, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.18588051199913025, rank=1, decoded_token=None)}, {11874: Logprob(logprob=-5.220853328704834, rank=13, decoded_token=None), 32: Logprob(logprob=-1.8458532094955444, rank=1, decoded_token=None)}, {4459: Logprob(logprob=-6.961170196533203, rank=118, decoded_token=None), 5219: Logprob(logprob=-1.836169958114624, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.7194890975952148, rank=1, decoded_token=None)}, {617: Logprob(logprob=-1.3559916019439697, rank=2, decoded_token=None), 527: Logprob(logprob=-1.2309916019439697, rank=1, decoded_token=None)}, {264: Logprob(logprob=-0.6008616089820862, rank=1, decoded_token=None)}, {3325: Logprob(logprob=-9.21973705291748, rank=37, decoded_token=None), 2694: Logprob(logprob=-0.2822372615337372, rank=1, decoded_token=None)}, {4279: Logprob(logprob=-0.05753443390130997, rank=1, decoded_token=None)}, {5361: Logprob(logprob=-0.45470237731933594, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.1912495344877243, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.023397311568260193, rank=1, decoded_token=None)}, {1399: Logprob(logprob=-3.9711475372314453, rank=14, decoded_token=None), 717: Logprob(logprob=-2.3461475372314453, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.09623148292303085, rank=1, decoded_token=None)}, {9062: Logprob(logprob=-5.050774574279785, rank=12, decoded_token=None), 578: Logprob(logprob=-1.175774335861206, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.6333088874816895, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.35156384110450745, rank=1, decoded_token=None)}, {2753: Logprob(logprob=-2.4849326610565186, rank=3, decoded_token=None), 220: Logprob(logprob=-1.1099326610565186, rank=1, decoded_token=None)}, {1109: Logprob(logprob=-0.003735114587470889, rank=1, decoded_token=None)}, {477: Logprob(logprob=-2.9097344875335693, rank=3, decoded_token=None), 220: Logprob(logprob=-0.40973448753356934, rank=1, decoded_token=None)}, {6273: Logprob(logprob=-0.013717547990381718, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.005777327343821526, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.09111858904361725, rank=1, decoded_token=None)}, {717: Logprob(logprob=-5.106393337249756, rank=27, decoded_token=None), 1041: Logprob(logprob=-1.9813933372497559, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.1538446694612503, rank=1, decoded_token=None)}, {578: Logprob(logprob=-1.602337121963501, rank=3, decoded_token=None), 16299: Logprob(logprob=-0.977337121963501, rank=1, decoded_token=None)}, {12474: Logprob(logprob=-2.6630983352661133, rank=4, decoded_token=None), 3325: Logprob(logprob=-1.2880984544754028, rank=1, decoded_token=None)}, {4279: Logprob(logprob=-0.6888583898544312, rank=1, decoded_token=None)}, {8331: Logprob(logprob=-0.4009769856929779, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.16255250573158264, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.33479413390159607, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-0.20367619395256042, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.26733827590942383, rank=1, decoded_token=None)}, {285: Logprob(logprob=-9.538082122802734, rank=41, decoded_token=None), 374: Logprob(logprob=-0.03808215260505676, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.9306405186653137, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.007215976715088, rank=2, decoded_token=None), 21: Logprob(logprob=-1.6322158575057983, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.17282874882221222, rank=1, decoded_token=None)}, {3639: Logprob(logprob=-1.127549409866333, rank=2, decoded_token=None), 16299: Logprob(logprob=-0.877549409866333, rank=1, decoded_token=None)}, {527: Logprob(logprob=-2.004128932952881, rank=2, decoded_token=None), 374: Logprob(logprob=-0.2541288137435913, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.08610685169696808, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-0.31307634711265564, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.6419362425804138, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.09086183458566666, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.015456883236765862, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0013862771447747946, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.038329992443323135, rank=1, decoded_token=None)}, {21: Logprob(logprob=-1.907236099243164, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.24684971570968628, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.005438295193016529, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.3189382553100586, rank=3, decoded_token=None), 717: Logprob(logprob=-1.443938136100769, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.02410171739757061, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0009358317474834621, rank=1, decoded_token=None)}, {13: Logprob(logprob=-7.128461584215984e-05, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.004888962022960186, rank=1, decoded_token=None)}, {20: Logprob(logprob=-3.057605028152466, rank=7, decoded_token=None), 21: Logprob(logprob=-1.5576050281524658, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.02449881099164486, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0014962679706513882, rank=1, decoded_token=None)}, {717: Logprob(logprob=-1.258972406387329, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0013371107634156942, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.00025960413040593266, rank=1, decoded_token=None)}, {13: Logprob(logprob=-7.068861305015162e-05, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.005708463490009308, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.931321620941162, rank=7, decoded_token=None), 19: Logprob(logprob=-1.4313217401504517, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.003584271762520075, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0014222278259694576, rank=1, decoded_token=None)}, {717: Logprob(logprob=-0.7489094734191895, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0011520899133756757, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0003152588615193963, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00017391123401466757, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.015513576567173004, rank=1, decoded_token=None)}, {717: Logprob(logprob=-2.203749179840088, rank=3, decoded_token=None), 21: Logprob(logprob=-1.203749179840088, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.002027838258072734, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0010093123419210315, rank=1, decoded_token=None)}, {868: Logprob(logprob=-2.2409543991088867, rank=2, decoded_token=None), 605: Logprob(logprob=-0.9909543395042419, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.02810521610081196, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.0029396675527095795, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0005796659388579428, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.1178319454193115, rank=1, decoded_token=None), 362: Logprob(logprob=-1.1178319454193115, rank=1, decoded_token=None)}], outputs=[CompletionOutput(index=0, text='', token_ids=(271,), cumulative_logprob=None, logprobs=None, finish_reason=length, stop_reason=None)], finished=True, metrics=RequestMetrics(arrival_time=1732330219.913199, last_token_time=1732330219.913199, first_scheduled_time=1732330219.9404528, first_token_time=1732330220.0975826, time_in_queue=0.02725386619567871, finished_time=1732330220.0985005, scheduler_time=0.002440982001644443, model_forward_time=None, model_execute_time=None), lora_request=None, num_cached_tokens=0), RequestOutput(request_id=4, prompt=None, prompt_token_ids=[128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 83445, 25173, 17, 2120, 25173, 220, 18, 8, 369, 865, 284, 220, 17, 627, 32, 13, 25173, 19, 198, 33, 13, 25173, 17, 198, 34, 13, 220, 605, 198, 35, 13, 220, 17, 198, 16533, 25, 356], encoder_prompt=None, encoder_prompt_token_ids=None, prompt_logprobs=[None, {791: Logprob(logprob=-3.620506763458252, rank=4, decoded_token=None), 14924: Logprob(logprob=-1.1830066442489624, rank=1, decoded_token=None)}, {2768: Logprob(logprob=-4.267952919006348, rank=2, decoded_token=None), 220: Logprob(logprob=-3.7054529190063477, rank=1, decoded_token=None)}, {527: Logprob(logprob=-3.0935873985290527, rank=3, decoded_token=None), 374: Logprob(logprob=-1.9685872793197632, rank=1, decoded_token=None)}, {5361: Logprob(logprob=-9.361089706420898, rank=708, decoded_token=None), 279: Logprob(logprob=-1.5485893487930298, rank=1, decoded_token=None)}, {5873: Logprob(logprob=-1.1175264120101929, rank=1, decoded_token=None)}, {4860: Logprob(logprob=-0.15363378822803497, rank=1, decoded_token=None)}, {320: Logprob(logprob=-3.388906955718994, rank=9, decoded_token=None), 389: Logprob(logprob=-1.7639068365097046, rank=1, decoded_token=None)}, {4291: Logprob(logprob=-3.4973137378692627, rank=2, decoded_token=None), 11865: Logprob(logprob=-0.6223137378692627, rank=1, decoded_token=None)}, {11503: Logprob(logprob=-0.987357497215271, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.4506547451019287, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.8773975372314453, rank=4, decoded_token=None), 389: Logprob(logprob=-1.5023976564407349, rank=1, decoded_token=None)}, {36256: Logprob(logprob=-8.630099296569824, rank=577, decoded_token=None), 279: Logprob(logprob=-1.1925991773605347, rank=1, decoded_token=None)}, {38696: Logprob(logprob=-3.769948959350586, rank=8, decoded_token=None), 19320: Logprob(logprob=-2.144948959350586, rank=1, decoded_token=None)}, {382: Logprob(logprob=-5.472397804260254, rank=18, decoded_token=None), 13: Logprob(logprob=-1.0973976850509644, rank=1, decoded_token=None)}, {791: Logprob(logprob=-3.5461583137512207, rank=5, decoded_token=None), 16: Logprob(logprob=-1.4211583137512207, rank=1, decoded_token=None)}, {7187: Logprob(logprob=-7.392093658447266, rank=164, decoded_token=None), 2768: Logprob(logprob=-2.3295936584472656, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.11663393676280975, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.73690128326416, rank=2, decoded_token=None), 264: Logprob(logprob=-0.48690128326416016, rank=1, decoded_token=None)}, {3363: Logprob(logprob=-1.8540297746658325, rank=1, decoded_token=None)}, {1405: Logprob(logprob=-5.987232208251953, rank=13, decoded_token=None), 315: Logprob(logprob=-0.23723231256008148, rank=1, decoded_token=None)}, {33126: Logprob(logprob=-9.044610023498535, rank=315, decoded_token=None), 358: Logprob(logprob=-1.2946101427078247, rank=1, decoded_token=None)}, {574: Logprob(logprob=-5.429495334625244, rank=8, decoded_token=None), 6439: Logprob(logprob=-0.4294951558113098, rank=1, decoded_token=None)}, {9405: Logprob(logprob=-0.40476104617118835, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.5629992485046387, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.7537806630134583, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-7.209847450256348, rank=134, decoded_token=None), 1041: Logprob(logprob=-2.7098476886749268, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.7134871482849121, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-8.75186538696289, rank=571, decoded_token=None), 931: Logprob(logprob=-0.376865029335022, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.47577813267707825, rank=1, decoded_token=None)}, {3639: Logprob(logprob=-4.106588840484619, rank=8, decoded_token=None), 578: Logprob(logprob=-1.2315888404846191, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.30162209272384644, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.16182462871074677, rank=1, decoded_token=None)}, {907: Logprob(logprob=-5.745996475219727, rank=27, decoded_token=None), 7187: Logprob(logprob=-0.8084966540336609, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.032959938049316406, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.9882255792617798, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.205665588378906, rank=12, decoded_token=None), 7187: Logprob(logprob=-1.2056655883789062, rank=1, decoded_token=None)}, {20: Logprob(logprob=-3.386111259460449, rank=3, decoded_token=None), 605: Logprob(logprob=-3.011111259460449, rank=1, decoded_token=None)}, {304: Logprob(logprob=-6.863307952880859, rank=33, decoded_token=None), 339: Logprob(logprob=-0.48830777406692505, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.4937672019004822, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.7949767112731934, rank=9, decoded_token=None), 2768: Logprob(logprob=-1.6699767112731934, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.8562200665473938, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-0.46025389432907104, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.35301274061203003, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-0.0504663847386837, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-3.7009406089782715, rank=5, decoded_token=None), 1980: Logprob(logprob=-0.8259406685829163, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.014418125152588, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.2552250325679779, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.18280577659606934, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.9818596839904785, rank=1, decoded_token=None)}, {9214: Logprob(logprob=-7.26568078994751, rank=42, decoded_token=None), 11: Logprob(logprob=-0.6406807899475098, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.34480056166648865, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0036241819616407156, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0007076143519952893, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021493716165423393, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.265846848487854, rank=1, decoded_token=None)}, {11758: Logprob(logprob=-1.8974242210388184, rank=2, decoded_token=None), 11990: Logprob(logprob=-1.3974242210388184, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.008312508463859558, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0016896746819838881, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000583597575314343, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006553467363119125, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.09962913393974304, rank=1, decoded_token=None)}, {22781: Logprob(logprob=-0.696441113948822, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.007642554119229317, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0023322305642068386, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0006073060794733465, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.019782857969403267, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.06486474722623825, rank=1, decoded_token=None)}, {6305: Logprob(logprob=-0.6396012306213379, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.25918030738830566, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.9573916792869568, rank=1, decoded_token=None), 36: Logprob(logprob=-0.9573916792869568, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.06022197753190994, rank=1, decoded_token=None)}, {362: Logprob(logprob=-1.2654039859771729, rank=2, decoded_token=None), 423: Logprob(logprob=-1.1404039859771729, rank=1, decoded_token=None)}, {271: Logprob(logprob=-1.2457599639892578, rank=2, decoded_token=None), 128001: Logprob(logprob=-0.7457600235939026, rank=1, decoded_token=None)}, {43819: Logprob(logprob=-12.215432167053223, rank=2611, decoded_token=None), 791: Logprob(logprob=-0.8404321670532227, rank=1, decoded_token=None)}, {21475: Logprob(logprob=-0.7314256429672241, rank=1, decoded_token=None)}, {1511: Logprob(logprob=-6.56179141998291, rank=48, decoded_token=None), 374: Logprob(logprob=-1.999291181564331, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.3226728439331055, rank=3, decoded_token=None), 264: Logprob(logprob=-1.322672724723816, rank=1, decoded_token=None)}, {6037: Logprob(logprob=-6.163534164428711, rank=55, decoded_token=None), 15150: Logprob(logprob=-2.538533926010132, rank=1, decoded_token=None)}, {330: Logprob(logprob=-3.6627614498138428, rank=9, decoded_token=None), 315: Logprob(logprob=-1.5377614498138428, rank=1, decoded_token=None)}, {2261: Logprob(logprob=-4.202095985412598, rank=14, decoded_token=None), 2746: Logprob(logprob=-2.7020959854125977, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.6789430379867554, rank=1, decoded_token=None)}, {806: Logprob(logprob=-4.852216720581055, rank=17, decoded_token=None), 20: Logprob(logprob=-1.4772168397903442, rank=1, decoded_token=None)}, {1: Logprob(logprob=-1.4486876726150513, rank=2, decoded_token=None), 311: Logprob(logprob=-0.9486876726150513, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.5747750997543335, rank=1, decoded_token=None)}, {1893: Logprob(logprob=-6.229022026062012, rank=44, decoded_token=None), 1505: Logprob(logprob=-1.4790222644805908, rank=1, decoded_token=None)}, {279: Logprob(logprob=-1.2839043140411377, rank=2, decoded_token=None), 264: Logprob(logprob=-0.7839043140411377, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.3298133611679077, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-6.342275142669678, rank=23, decoded_token=None), 220: Logprob(logprob=-0.27977514266967773, rank=1, decoded_token=None)}, {6982: Logprob(logprob=-2.9779157638549805, rank=5, decoded_token=None), 220: Logprob(logprob=-1.2279157638549805, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-0.6994138956069946, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.4830473065376282, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.417629241943359, rank=9, decoded_token=None), 3639: Logprob(logprob=-0.7926291227340698, rank=1, decoded_token=None)}, {605: Logprob(logprob=-4.466213703155518, rank=13, decoded_token=None), 806: Logprob(logprob=-2.0912137031555176, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.9247885942459106, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.1273905634880066, rank=1, decoded_token=None)}, {1691: Logprob(logprob=-0.8227850198745728, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.007400361355394125, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.01602531410753727, rank=1, decoded_token=None)}, {843: Logprob(logprob=-0.14333274960517883, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.03991517424583435, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.19991245865821838, rank=1, decoded_token=None)}, {3391: Logprob(logprob=-0.02759881317615509, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.08311088383197784, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3676953911781311, rank=1, decoded_token=None)}, {4370: Logprob(logprob=-0.017791442573070526, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-9.866714477539062, rank=126, decoded_token=None), 11: Logprob(logprob=-0.17921476066112518, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-4.3207597732543945, rank=8, decoded_token=None), 1396: Logprob(logprob=-1.0707597732543945, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.38952898979187, rank=2, decoded_token=None), 374: Logprob(logprob=-0.5145289897918701, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.5315698385238647, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.11095929145813, rank=3, decoded_token=None), 6037: Logprob(logprob=-0.8609593510627747, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.3972514867782593, rank=1, decoded_token=None), 220: Logprob(logprob=-1.3972514867782593, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.22985251247882843, rank=1, decoded_token=None)}, {837: Logprob(logprob=-0.6552088856697083, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.3445965349674225, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.07507845014333725, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.009831340983510017, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.5897692441940308, rank=1, decoded_token=None)}, {220: Logprob(logprob=-2.430539608001709, rank=5, decoded_token=None), 1176: Logprob(logprob=-2.055539608001709, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.135545015335083, rank=3, decoded_token=None), 806: Logprob(logprob=-1.885545015335083, rank=1, decoded_token=None)}, {339: Logprob(logprob=-0.6885674595832825, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.1400470733642578, rank=2, decoded_token=None), 4751: Logprob(logprob=-0.5150470733642578, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.2480833530426025, rank=2, decoded_token=None), 374: Logprob(logprob=-0.4980833828449249, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.013370846398174763, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.1963651180267334, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.482834815979004, rank=2, decoded_token=None), 374: Logprob(logprob=-0.10783478617668152, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.2007579803466797, rank=1, decoded_token=None)}, {459: Logprob(logprob=-4.266760349273682, rank=6, decoded_token=None), 220: Logprob(logprob=-0.5167602300643921, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.4180258810520172, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.021704640239477158, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.2175983190536499, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0018430643249303102, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0003660247311927378, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.05719471722841263, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.4022200107574463, rank=4, decoded_token=None), 220: Logprob(logprob=-0.2772199809551239, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.5990962982177734, rank=4, decoded_token=None), 220: Logprob(logprob=-1.849096417427063, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.754885196685791, rank=1, decoded_token=None)}, {2646: Logprob(logprob=-3.085150718688965, rank=8, decoded_token=None), 3136: Logprob(logprob=-1.8351507186889648, rank=1, decoded_token=None)}, {617: Logprob(logprob=-2.3687305450439453, rank=3, decoded_token=None), 842: Logprob(logprob=-1.1187306642532349, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.649540424346924, rank=8, decoded_token=None), 264: Logprob(logprob=-0.8995404243469238, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-2.7209155559539795, rank=4, decoded_token=None), 24871: Logprob(logprob=-0.7209156155586243, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.07320179790258408, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-3.1266684532165527, rank=4, decoded_token=None), 304: Logprob(logprob=-0.8766685128211975, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.01429002359509468, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-0.0503406785428524, rank=1, decoded_token=None)}, {1023: Logprob(logprob=-0.0030884684529155493, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03331640362739563, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.011476805433630943, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002609150833450258, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.14198358356952667, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-5.121759414672852, rank=9, decoded_token=None), 1396: Logprob(logprob=-0.8717594742774963, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.605440855026245, rank=4, decoded_token=None), 1396: Logprob(logprob=-0.23044079542160034, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.1128024309873581, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.31675779819488525, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.007474906742572784, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.02105293981730938, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.08588151633739471, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.4892382323741913, rank=1, decoded_token=None)}, {459: Logprob(logprob=-3.0233283042907715, rank=5, decoded_token=None), 220: Logprob(logprob=-1.7733283042907715, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.8158836364746094, rank=2, decoded_token=None), 10535: Logprob(logprob=-0.6908836364746094, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.0712813287973404, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-7.487314224243164, rank=28, decoded_token=None), 627: Logprob(logprob=-0.6123140454292297, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.1590193808078766, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.011315456591546535, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.005359092261642218, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03135305643081665, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.02188076637685299, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000491021724883467, rank=1, decoded_token=None)}, {1442: Logprob(logprob=-4.837580680847168, rank=7, decoded_token=None), 578: Logprob(logprob=-0.3375808596611023, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.5674490332603455, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.3511098623275757, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.2133203744888306, rank=1, decoded_token=None), 374: Logprob(logprob=-1.2133203744888306, rank=1, decoded_token=None)}, {3940: Logprob(logprob=-4.17018461227417, rank=14, decoded_token=None), 374: Logprob(logprob=-1.42018461227417, rank=1, decoded_token=None)}, {449: Logprob(logprob=-0.05720282346010208, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.9503310322761536, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.7719177007675171, rank=2, decoded_token=None), 1524: Logprob(logprob=-0.6469177007675171, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.008971618488430977, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-2.8240914344787598, rank=2, decoded_token=None), 11: Logprob(logprob=-0.19909141957759857, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.6145686507225037, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.596506357192993, rank=3, decoded_token=None), 1828: Logprob(logprob=-0.47150641679763794, rank=1, decoded_token=None)}, {1053: Logprob(logprob=-2.0979936122894287, rank=2, decoded_token=None), 690: Logprob(logprob=-0.22299352288246155, rank=1, decoded_token=None)}, {617: Logprob(logprob=-3.0427448749542236, rank=6, decoded_token=None), 2646: Logprob(logprob=-0.9177448153495789, rank=1, decoded_token=None)}, {1193: Logprob(logprob=-3.433971643447876, rank=7, decoded_token=None), 459: Logprob(logprob=-0.8089715838432312, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.313199520111084, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.01859915629029274, rank=1, decoded_token=None)}, {304: Logprob(logprob=-2.8377554416656494, rank=2, decoded_token=None), 627: Logprob(logprob=-0.33775535225868225, rank=1, decoded_token=None)}, {433: Logprob(logprob=-0.3653806447982788, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.20377226173877716, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.02473527193069458, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0027272433508187532, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.1850049495697021, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.19033809006214142, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.309290647506714, rank=2, decoded_token=None), 791: Logprob(logprob=-1.9342906475067139, rank=1, decoded_token=None)}, {2860: Logprob(logprob=-5.905457496643066, rank=57, decoded_token=None), 1396: Logprob(logprob=-2.5929572582244873, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.027499310672283173, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.23535610735416412, rank=1, decoded_token=None)}, {966: Logprob(logprob=-4.081752777099609, rank=3, decoded_token=None), 605: Logprob(logprob=-3.8317525386810303, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-6.079629898071289, rank=50, decoded_token=None), 4236: Logprob(logprob=-1.7046300172805786, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.493253231048584, rank=7, decoded_token=None), 31408: Logprob(logprob=-1.9932533502578735, rank=1, decoded_token=None)}, {1514: Logprob(logprob=-1.6049902439117432, rank=2, decoded_token=None), 387: Logprob(logprob=-0.9799902439117432, rank=1, decoded_token=None)}, {19794: Logprob(logprob=-4.2269792556762695, rank=6, decoded_token=None), 304: Logprob(logprob=-0.7269791960716248, rank=1, decoded_token=None)}, {520: Logprob(logprob=-2.5716304779052734, rank=4, decoded_token=None), 304: Logprob(logprob=-0.6966304779052734, rank=1, decoded_token=None)}, {264: Logprob(logprob=-0.8206021785736084, rank=1, decoded_token=None)}, {6246: Logprob(logprob=-5.323214530944824, rank=24, decoded_token=None), 16520: Logprob(logprob=-1.0732142925262451, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.8638421297073364, rank=1, decoded_token=None)}, {2684: Logprob(logprob=-3.016662120819092, rank=7, decoded_token=None), 1442: Logprob(logprob=-1.7666622400283813, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.6918129324913025, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.022499410435557365, rank=1, decoded_token=None)}, {7041: Logprob(logprob=-3.962672472000122, rank=6, decoded_token=None), 220: Logprob(logprob=-0.3376724421977997, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3280467987060547, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.23579740524292, rank=1, decoded_token=None), 17: Logprob(logprob=-2.23579740524292, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-0.6167428493499756, rank=1, decoded_token=None)}, {389: Logprob(logprob=-2.094090461730957, rank=4, decoded_token=None), 505: Logprob(logprob=-1.719090461730957, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-1.238318681716919, rank=2, decoded_token=None), 279: Logprob(logprob=-0.4883187413215637, rank=1, decoded_token=None)}, {2128: Logprob(logprob=-0.10444443672895432, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.15527960658073425, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-2.8790693283081055, rank=4, decoded_token=None), 2650: Logprob(logprob=-1.004069447517395, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-1.269631266593933, rank=2, decoded_token=None), 315: Logprob(logprob=-1.019631266593933, rank=1, decoded_token=None)}, {12722: Logprob(logprob=-4.804388999938965, rank=9, decoded_token=None), 374: Logprob(logprob=-0.5543891191482544, rank=1, decoded_token=None)}, {15100: Logprob(logprob=-3.970444679260254, rank=7, decoded_token=None), 16964: Logprob(logprob=-0.5954446792602539, rank=1, decoded_token=None)}, {1268: Logprob(logprob=-1.029451847076416, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.8737099170684814, rank=3, decoded_token=None), 279: Logprob(logprob=-1.2487099170684814, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-1.841010332107544, rank=2, decoded_token=None), 8417: Logprob(logprob=-1.091010332107544, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.113349549472332, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.29112255573272705, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.009947842918336391, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.8003526926040649, rank=1, decoded_token=None)}, {4460: Logprob(logprob=-3.4189629554748535, rank=3, decoded_token=None), 430: Logprob(logprob=-0.7939630150794983, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9348305463790894, rank=2, decoded_token=None), 311: Logprob(logprob=-0.8098305463790894, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.037669867277145386, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0022645562421530485, rank=1, decoded_token=None)}, {2758: Logprob(logprob=-3.4584977626800537, rank=8, decoded_token=None), 578: Logprob(logprob=-2.0834977626800537, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3807215392589569, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.9317857027053833, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.39621296525001526, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.3208718299865723, rank=2, decoded_token=None), 279: Logprob(logprob=-0.44587182998657227, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.10219656676054001, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.7788331508636475, rank=2, decoded_token=None), 627: Logprob(logprob=-0.7788332104682922, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.45813241600990295, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.933356761932373, rank=4, decoded_token=None), 279: Logprob(logprob=-0.05835668370127678, rank=1, decoded_token=None)}, {1758: Logprob(logprob=-0.9147714376449585, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.909633994102478, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.44750797748565674, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0014780559577047825, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001387499796692282, rank=1, decoded_token=None)}, {64002: Logprob(logprob=-2.5448737144470215, rank=3, decoded_token=None), 94310: Logprob(logprob=-0.544873833656311, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04134264215826988, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.1306612491607666, rank=1, decoded_token=None)}, {555: Logprob(logprob=-0.03507496044039726, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0044165924191474915, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.013939524069428444, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.09804058820009232, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.0629529133439064, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.240189328789711, rank=1, decoded_token=None)}, {21: Logprob(logprob=-0.03781026229262352, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.01011602021753788, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.05886910483241081, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0013978243805468082, rank=1, decoded_token=None)}, {13: Logprob(logprob=-9.798523387871683e-05, rank=1, decoded_token=None)}, {72159: Logprob(logprob=-1.417578935623169, rank=2, decoded_token=None), 94310: Logprob(logprob=-0.792578935623169, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.02184729278087616, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.16513295471668243, rank=1, decoded_token=None)}, {323: Logprob(logprob=-5.760368347167969, rank=2, decoded_token=None), 555: Logprob(logprob=-0.010368410497903824, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.004999872762709856, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.10827615857124329, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.17176643013954163, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.027458835393190384, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04579097405076027, rank=1, decoded_token=None)}, {3965: Logprob(logprob=-0.16355350613594055, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.10822748392820358, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.008487226441502571, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0020695950370281935, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000342191313393414, rank=1, decoded_token=None)}, {94310: Logprob(logprob=-0.7333000302314758, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.024686889722943306, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.6213490962982178, rank=1, decoded_token=None)}, {505: Logprob(logprob=-0.10929779708385468, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.010756724514067173, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.05260276049375534, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.02710282802581787, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.014247246086597443, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04090675339102745, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.008638868108391762, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.0173895675688982, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.05997175723314285, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.00443486962467432, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0005690624238923192, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.335664987564087, rank=3, decoded_token=None), 356: Logprob(logprob=-1.210664987564087, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.20828098058700562, rank=1, decoded_token=None)}, {32: Logprob(logprob=-1.9398690462112427, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-5.220652103424072, rank=28, decoded_token=None), 2860: Logprob(logprob=-3.0956521034240723, rank=1, decoded_token=None)}, {31878: Logprob(logprob=-1.599919319152832, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.733023762702942, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-8.531267166137695, rank=187, decoded_token=None), 18: Logprob(logprob=-2.531266689300537, rank=1, decoded_token=None)}, {2204: Logprob(logprob=-2.716043472290039, rank=2, decoded_token=None), 13840: Logprob(logprob=-2.466043472290039, rank=1, decoded_token=None)}, {8146: Logprob(logprob=-5.786083698272705, rank=26, decoded_token=None), 4595: Logprob(logprob=-1.411083698272705, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.025601888075470924, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-3.9537112712860107, rank=11, decoded_token=None), 37824: Logprob(logprob=-2.8287112712860107, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.3711868226528168, rank=1, decoded_token=None)}, {2435: Logprob(logprob=-4.847472190856934, rank=13, decoded_token=None), 1442: Logprob(logprob=-1.4724724292755127, rank=1, decoded_token=None)}, {617: Logprob(logprob=-1.45283043384552, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.8435330986976624, rank=1, decoded_token=None)}, {914: Logprob(logprob=-4.36965799331665, rank=21, decoded_token=None), 18: Logprob(logprob=-2.9946579933166504, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-4.7997283935546875, rank=13, decoded_token=None), 2204: Logprob(logprob=-1.0497283935546875, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.16669881343841553, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-2.0677084922790527, rank=2, decoded_token=None), 2579: Logprob(logprob=-1.8177084922790527, rank=1, decoded_token=None)}, {1933: Logprob(logprob=-0.1227213442325592, rank=1, decoded_token=None)}, {304: Logprob(logprob=-3.446204662322998, rank=5, decoded_token=None), 13: Logprob(logprob=-0.4462047219276428, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-7.250609874725342, rank=17, decoded_token=None), 5708: Logprob(logprob=-0.25060996413230896, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.1065310388803482, rank=1, decoded_token=None)}, {578: Logprob(logprob=-2.566020965576172, rank=5, decoded_token=None), 2650: Logprob(logprob=-1.3160210847854614, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.9273428916931152, rank=3, decoded_token=None), 3637: Logprob(logprob=-0.8023430109024048, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.08843708783388138, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.6100079417228699, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.7515377402305603, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-2.1421217918395996, rank=2, decoded_token=None), 1855: Logprob(logprob=-0.5171217322349548, rank=1, decoded_token=None)}, {279: Logprob(logprob=-3.456434965133667, rank=6, decoded_token=None), 304: Logprob(logprob=-1.331434965133667, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.02585725486278534, rank=1, decoded_token=None)}, {706: Logprob(logprob=-0.38343092799186707, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.708461880683899, rank=2, decoded_token=None), 374: Logprob(logprob=-1.083461880683899, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.23030529916286469, rank=1, decoded_token=None)}, {649: Logprob(logprob=-2.6108829975128174, rank=2, decoded_token=None), 374: Logprob(logprob=-0.36088305711746216, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.057374272495508194, rank=1, decoded_token=None)}, {1766: Logprob(logprob=-2.6309587955474854, rank=4, decoded_token=None), 5439: Logprob(logprob=-1.1309587955474854, rank=1, decoded_token=None)}, {1701: Logprob(logprob=-2.2968969345092773, rank=2, decoded_token=None), 555: Logprob(logprob=-0.17189693450927734, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.41828861832618713, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-3.6377298831939697, rank=7, decoded_token=None), 6037: Logprob(logprob=-1.2627298831939697, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-4.555124759674072, rank=14, decoded_token=None), 220: Logprob(logprob=-1.3051248788833618, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.17938224971294403, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.9476473331451416, rank=2, decoded_token=None), 3639: Logprob(logprob=-1.1976473331451416, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-0.4874989986419678, rank=1, decoded_token=None)}, {25800: Logprob(logprob=-3.846048593521118, rank=9, decoded_token=None), 11: Logprob(logprob=-1.7835485935211182, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.18882788717746735, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.07510089874267578, rank=1, decoded_token=None)}, {13: Logprob(logprob=-2.343728542327881, rank=3, decoded_token=None), 284: Logprob(logprob=-1.5937285423278809, rank=1, decoded_token=None)}, {2650: Logprob(logprob=-3.1135451793670654, rank=3, decoded_token=None), 3639: Logprob(logprob=-0.6135452389717102, rank=1, decoded_token=None)}, {1690: Logprob(logprob=-0.08424817770719528, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.7079728245735168, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.14217698574066162, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-0.18304136395454407, rank=1, decoded_token=None)}, {1587: Logprob(logprob=-0.9694701433181763, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.025537513196468353, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.003264813916757703, rank=1, decoded_token=None)}, {617: Logprob(logprob=-0.09910587221384048, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.1510932743549347, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.03838161751627922, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.09627294540405273, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.07186505943536758, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.002630585338920355, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021421492099761963, rank=1, decoded_token=None)}, {25541: Logprob(logprob=-10.88266658782959, rank=909, decoded_token=None), 7699: Logprob(logprob=-2.2576663494110107, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.7218905091285706, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0011835244949907064, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00015138434537220746, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0014886498684063554, rank=1, decoded_token=None)}, {17: Logprob(logprob=-3.907280206680298, rank=6, decoded_token=None), 7699: Logprob(logprob=-3.032280206680298, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.0223177969455719, rank=1, decoded_token=None)}, {21129: Logprob(logprob=-5.540557861328125, rank=44, decoded_token=None), 2636: Logprob(logprob=-3.540557622909546, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.008849094621837139, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.00032646095496602356, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001445904199499637, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0016035091830417514, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.3098583221435547, rank=2, decoded_token=None), 20: Logprob(logprob=-2.1848583221435547, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.006650575902312994, rank=1, decoded_token=None)}, {24599: Logprob(logprob=-6.172876358032227, rank=80, decoded_token=None), 21129: Logprob(logprob=-2.5478761196136475, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.004533370956778526, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0005069877952337265, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002643712505232543, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.00395266804844141, rank=1, decoded_token=None)}, {19: Logprob(logprob=-2.4699602127075195, rank=3, decoded_token=None), 18: Logprob(logprob=-0.84496009349823, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.0012282931711524725, rank=1, decoded_token=None)}, {5154: Logprob(logprob=-5.722906112670898, rank=71, decoded_token=None), 18070: Logprob(logprob=-2.8479063510894775, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.48243021965026855, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004707326181232929, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0004094000905752182, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.0903127193450928, rank=1, decoded_token=None), 362: Logprob(logprob=-1.0903127193450928, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.21004998683929443, rank=1, decoded_token=None)}, {23956: Logprob(logprob=-3.7082245349884033, rank=5, decoded_token=None), 32: Logprob(logprob=-1.7082245349884033, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-2.328795909881592, rank=3, decoded_token=None), 315: Logprob(logprob=-1.4537959098815918, rank=1, decoded_token=None)}, {374: Logprob(logprob=-1.3939491510391235, rank=1, decoded_token=None)}, {13890: Logprob(logprob=-0.3086131513118744, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.004158303141593933, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.5719388723373413, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.611593246459961, rank=3, decoded_token=None), 17: Logprob(logprob=-2.486593246459961, rank=1, decoded_token=None)}, {865: Logprob(logprob=-3.814181327819824, rank=6, decoded_token=None), 25800: Logprob(logprob=-0.9391812086105347, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.21246875822544098, rank=1, decoded_token=None)}, {24: Logprob(logprob=-3.2393479347229004, rank=8, decoded_token=None), 17: Logprob(logprob=-2.1143479347229004, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9484657645225525, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.02641945704817772, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0019446763908490539, rank=1, decoded_token=None)}, {320: Logprob(logprob=-4.043663024902344, rank=2, decoded_token=None), 220: Logprob(logprob=-0.0436631478369236, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3292904496192932, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7795792818069458, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.019342729821801186, rank=1, decoded_token=None)}, {19: Logprob(logprob=-3.8902170658111572, rank=6, decoded_token=None), 24: Logprob(logprob=-0.2652171552181244, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.05693596974015236, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7711688876152039, rank=1, decoded_token=None)}, {320: Logprob(logprob=-1.7098952531814575, rank=2, decoded_token=None), 220: Logprob(logprob=-0.2098952829837799, rank=1, decoded_token=None)}, {21: Logprob(logprob=-3.9887096881866455, rank=6, decoded_token=None), 20: Logprob(logprob=-0.8637097477912903, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.05180598795413971, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006352707277983427, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.6478800773620605, rank=5, decoded_token=None), 18: Logprob(logprob=-1.1478800773620605, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.06078224629163742, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0037563731893897057, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00020287363440729678, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.5973082780838013, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3547166585922241, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.1522906869649887, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.119587242603302, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.250182867050171, rank=4, decoded_token=None), 24: Logprob(logprob=-1.250182867050171, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.21551699936389923, rank=1, decoded_token=None)}, {489: Logprob(logprob=-4.195828914642334, rank=3, decoded_token=None), 865: Logprob(logprob=-0.0708288699388504, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.3979986310005188, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.6019997596740723, rank=3, decoded_token=None), 21: Logprob(logprob=-1.2269997596740723, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.012111456133425236, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.02054995857179165, rank=1, decoded_token=None)}, {19: Logprob(logprob=-1.0867620706558228, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.14609402418136597, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0014072287594899535, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00014137222024146467, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.401207834482193, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.18403267860412598, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.15473514795303345, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.06539695709943771, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.4415698051452637, rank=3, decoded_token=None), 19: Logprob(logprob=-1.1915698051452637, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.11237519979476929, rank=1, decoded_token=None)}, {489: Logprob(logprob=-0.7666293382644653, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.39565205574035645, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.5823985934257507, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.031112726777791977, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.06674905866384506, rank=1, decoded_token=None)}, {24: Logprob(logprob=-1.1196229457855225, rank=2, decoded_token=None), 19: Logprob(logprob=-0.9946228861808777, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.013978317379951477, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.000894146622158587, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002002515539061278, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.19024042785167694, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.08259163796901703, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.11528829485177994, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04026882350444794, rank=1, decoded_token=None)}, {24: Logprob(logprob=-0.6260170340538025, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.025457678362727165, rank=1, decoded_token=None)}, {865: Logprob(logprob=-4.2807393074035645, rank=4, decoded_token=None), 489: Logprob(logprob=-0.15573909878730774, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.06027596443891525, rank=1, decoded_token=None)}, {21: Logprob(logprob=-1.8035647869110107, rank=2, decoded_token=None), 20: Logprob(logprob=-0.42856475710868835, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.025070033967494965, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.002612869720906019, rank=1, decoded_token=None)}, {24: Logprob(logprob=-4.944259166717529, rank=4, decoded_token=None), 20: Logprob(logprob=-0.19425919651985168, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.016041269525885582, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004313688259571791, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0003240775258745998, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.1086416244506836, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.18588051199913025, rank=1, decoded_token=None)}, {83445: Logprob(logprob=-9.345852851867676, rank=591, decoded_token=None), 32: Logprob(logprob=-1.8458532094955444, rank=1, decoded_token=None)}, {25173: Logprob(logprob=-6.057316780090332, rank=17, decoded_token=None), 279: Logprob(logprob=-0.5573167204856873, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.6035754680633545, rank=4, decoded_token=None), 18: Logprob(logprob=-2.3535754680633545, rank=1, decoded_token=None)}, {2120: Logprob(logprob=-4.8119587898254395, rank=15, decoded_token=None), 489: Logprob(logprob=-1.811958909034729, rank=1, decoded_token=None)}, {25173: Logprob(logprob=-1.6099052429199219, rank=2, decoded_token=None), 489: Logprob(logprob=-0.6099051833152771, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.12789200246334076, rank=1, decoded_token=None)}, {18: Logprob(logprob=-1.5132516622543335, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.6997661590576172, rank=1, decoded_token=None)}, {369: Logprob(logprob=-2.233518362045288, rank=3, decoded_token=None), 489: Logprob(logprob=-0.8585184216499329, rank=1, decoded_token=None)}, {865: Logprob(logprob=-1.3948338031768799, rank=2, decoded_token=None), 279: Logprob(logprob=-0.8948337435722351, rank=1, decoded_token=None)}, {284: Logprob(logprob=-0.06370629370212555, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.5985791683197021, rank=1, decoded_token=None)}, {17: Logprob(logprob=-1.9561364650726318, rank=3, decoded_token=None), 16: Logprob(logprob=-1.8311364650726318, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.5157890915870667, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.04689118638634682, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0020582936704158783, rank=1, decoded_token=None)}, {25173: Logprob(logprob=-0.5630612373352051, rank=1, decoded_token=None)}, {19: Logprob(logprob=-3.1775267124176025, rank=6, decoded_token=None), 21: Logprob(logprob=-0.9275267124176025, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.006182474084198475, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0009446449112147093, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00011395759065635502, rank=1, decoded_token=None)}, {25173: Logprob(logprob=-0.4082798957824707, rank=1, decoded_token=None)}, {17: Logprob(logprob=-1.7366771697998047, rank=2, decoded_token=None), 21: Logprob(logprob=-1.2366771697998047, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.017647743225097656, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.001081358641386032, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00011836781777674332, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.5549273490905762, rank=1, decoded_token=None)}, {605: Logprob(logprob=-5.195494651794434, rank=9, decoded_token=None), 17: Logprob(logprob=-0.6954944133758545, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0038563660345971584, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0010650444310158491, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00021228920377325267, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.13738475739955902, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.6242997646331787, rank=4, decoded_token=None), 21: Logprob(logprob=-1.6242997646331787, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0686674565076828, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.003958011511713266, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.00034767304896377027, rank=1, decoded_token=None)}, {356: Logprob(logprob=-1.8255325555801392, rank=3, decoded_token=None), 426: Logprob(logprob=-0.8255325555801392, rank=1, decoded_token=None)}], outputs=[CompletionOutput(index=0, text='', token_ids=(271,), cumulative_logprob=None, logprobs=None, finish_reason=length, stop_reason=None)], finished=True, metrics=RequestMetrics(arrival_time=1732330219.913361, last_token_time=1732330219.913361, first_scheduled_time=1732330219.9404528, first_token_time=1732330220.0975826, time_in_queue=0.02709174156188965, finished_time=1732330220.0985126, scheduler_time=0.002440982001644443, model_forward_time=None, model_execute_time=None), lora_request=None, num_cached_tokens=0), RequestOutput(request_id=5, prompt=None, prompt_token_ids=[128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 83445, 25173, 17, 2120, 25173, 220, 18, 8, 369, 865, 284, 220, 17, 627, 32, 13, 25173, 19, 198, 33, 13, 25173, 17, 198, 34, 13, 220, 605, 198, 35, 13, 220, 17, 198, 16533, 25, 362], encoder_prompt=None, encoder_prompt_token_ids=None, prompt_logprobs=[None, {791: Logprob(logprob=-3.620506763458252, rank=4, decoded_token=None), 14924: Logprob(logprob=-1.1830066442489624, rank=1, decoded_token=None)}, {2768: Logprob(logprob=-4.267952919006348, rank=2, decoded_token=None), 220: Logprob(logprob=-3.7054529190063477, rank=1, decoded_token=None)}, {527: Logprob(logprob=-3.0935873985290527, rank=3, decoded_token=None), 374: Logprob(logprob=-1.9685872793197632, rank=1, decoded_token=None)}, {5361: Logprob(logprob=-9.361089706420898, rank=708, decoded_token=None), 279: Logprob(logprob=-1.5485893487930298, rank=1, decoded_token=None)}, {5873: Logprob(logprob=-1.1175264120101929, rank=1, decoded_token=None)}, {4860: Logprob(logprob=-0.15363378822803497, rank=1, decoded_token=None)}, {320: Logprob(logprob=-3.388906955718994, rank=9, decoded_token=None), 389: Logprob(logprob=-1.7639068365097046, rank=1, decoded_token=None)}, {4291: Logprob(logprob=-3.4973137378692627, rank=2, decoded_token=None), 11865: Logprob(logprob=-0.6223137378692627, rank=1, decoded_token=None)}, {11503: Logprob(logprob=-0.987357497215271, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.4506547451019287, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.8773975372314453, rank=4, decoded_token=None), 389: Logprob(logprob=-1.5023976564407349, rank=1, decoded_token=None)}, {36256: Logprob(logprob=-8.630099296569824, rank=577, decoded_token=None), 279: Logprob(logprob=-1.1925991773605347, rank=1, decoded_token=None)}, {38696: Logprob(logprob=-3.769948959350586, rank=8, decoded_token=None), 19320: Logprob(logprob=-2.144948959350586, rank=1, decoded_token=None)}, {382: Logprob(logprob=-5.472397804260254, rank=18, decoded_token=None), 13: Logprob(logprob=-1.0973976850509644, rank=1, decoded_token=None)}, {791: Logprob(logprob=-3.5461583137512207, rank=5, decoded_token=None), 16: Logprob(logprob=-1.4211583137512207, rank=1, decoded_token=None)}, {7187: Logprob(logprob=-7.392093658447266, rank=164, decoded_token=None), 2768: Logprob(logprob=-2.3295936584472656, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.11663393676280975, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.73690128326416, rank=2, decoded_token=None), 264: Logprob(logprob=-0.48690128326416016, rank=1, decoded_token=None)}, {3363: Logprob(logprob=-1.8540297746658325, rank=1, decoded_token=None)}, {1405: Logprob(logprob=-5.987232208251953, rank=13, decoded_token=None), 315: Logprob(logprob=-0.23723231256008148, rank=1, decoded_token=None)}, {33126: Logprob(logprob=-9.044610023498535, rank=315, decoded_token=None), 358: Logprob(logprob=-1.2946101427078247, rank=1, decoded_token=None)}, {574: Logprob(logprob=-5.429495334625244, rank=8, decoded_token=None), 6439: Logprob(logprob=-0.4294951558113098, rank=1, decoded_token=None)}, {9405: Logprob(logprob=-0.40476104617118835, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.5629992485046387, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.7537806630134583, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-7.209847450256348, rank=134, decoded_token=None), 1041: Logprob(logprob=-2.7098476886749268, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.7134871482849121, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-8.75186538696289, rank=571, decoded_token=None), 931: Logprob(logprob=-0.376865029335022, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.47577813267707825, rank=1, decoded_token=None)}, {3639: Logprob(logprob=-4.106588840484619, rank=8, decoded_token=None), 578: Logprob(logprob=-1.2315888404846191, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.30162209272384644, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.16182462871074677, rank=1, decoded_token=None)}, {907: Logprob(logprob=-5.745996475219727, rank=27, decoded_token=None), 7187: Logprob(logprob=-0.8084966540336609, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.032959938049316406, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.9882255792617798, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.205665588378906, rank=12, decoded_token=None), 7187: Logprob(logprob=-1.2056655883789062, rank=1, decoded_token=None)}, {20: Logprob(logprob=-3.386111259460449, rank=3, decoded_token=None), 605: Logprob(logprob=-3.011111259460449, rank=1, decoded_token=None)}, {304: Logprob(logprob=-6.863307952880859, rank=33, decoded_token=None), 339: Logprob(logprob=-0.48830777406692505, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.4937672019004822, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.7949767112731934, rank=9, decoded_token=None), 2768: Logprob(logprob=-1.6699767112731934, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.8562200665473938, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-0.46025389432907104, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.35301274061203003, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-0.0504663847386837, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-3.7009406089782715, rank=5, decoded_token=None), 1980: Logprob(logprob=-0.8259406685829163, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.014418125152588, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.2552250325679779, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.18280577659606934, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.9818596839904785, rank=1, decoded_token=None)}, {9214: Logprob(logprob=-7.26568078994751, rank=42, decoded_token=None), 11: Logprob(logprob=-0.6406807899475098, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.34480056166648865, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0036241819616407156, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0007076143519952893, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021493716165423393, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.265846848487854, rank=1, decoded_token=None)}, {11758: Logprob(logprob=-1.8974242210388184, rank=2, decoded_token=None), 11990: Logprob(logprob=-1.3974242210388184, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.008312508463859558, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0016896746819838881, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000583597575314343, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006553467363119125, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.09962913393974304, rank=1, decoded_token=None)}, {22781: Logprob(logprob=-0.696441113948822, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.007642554119229317, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0023322305642068386, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0006073060794733465, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.019782857969403267, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.06486474722623825, rank=1, decoded_token=None)}, {6305: Logprob(logprob=-0.6396012306213379, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.25918030738830566, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.9573916792869568, rank=1, decoded_token=None), 36: Logprob(logprob=-0.9573916792869568, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.06022197753190994, rank=1, decoded_token=None)}, {362: Logprob(logprob=-1.2654039859771729, rank=2, decoded_token=None), 423: Logprob(logprob=-1.1404039859771729, rank=1, decoded_token=None)}, {271: Logprob(logprob=-1.2457599639892578, rank=2, decoded_token=None), 128001: Logprob(logprob=-0.7457600235939026, rank=1, decoded_token=None)}, {43819: Logprob(logprob=-12.215432167053223, rank=2611, decoded_token=None), 791: Logprob(logprob=-0.8404321670532227, rank=1, decoded_token=None)}, {21475: Logprob(logprob=-0.7314256429672241, rank=1, decoded_token=None)}, {1511: Logprob(logprob=-6.56179141998291, rank=48, decoded_token=None), 374: Logprob(logprob=-1.999291181564331, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.3226728439331055, rank=3, decoded_token=None), 264: Logprob(logprob=-1.322672724723816, rank=1, decoded_token=None)}, {6037: Logprob(logprob=-6.163534164428711, rank=55, decoded_token=None), 15150: Logprob(logprob=-2.538533926010132, rank=1, decoded_token=None)}, {330: Logprob(logprob=-3.6627614498138428, rank=9, decoded_token=None), 315: Logprob(logprob=-1.5377614498138428, rank=1, decoded_token=None)}, {2261: Logprob(logprob=-4.202095985412598, rank=14, decoded_token=None), 2746: Logprob(logprob=-2.7020959854125977, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.6789430379867554, rank=1, decoded_token=None)}, {806: Logprob(logprob=-4.852216720581055, rank=17, decoded_token=None), 20: Logprob(logprob=-1.4772168397903442, rank=1, decoded_token=None)}, {1: Logprob(logprob=-1.4486876726150513, rank=2, decoded_token=None), 311: Logprob(logprob=-0.9486876726150513, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.5747750997543335, rank=1, decoded_token=None)}, {1893: Logprob(logprob=-6.229022026062012, rank=44, decoded_token=None), 1505: Logprob(logprob=-1.4790222644805908, rank=1, decoded_token=None)}, {279: Logprob(logprob=-1.2839043140411377, rank=2, decoded_token=None), 264: Logprob(logprob=-0.7839043140411377, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.3298133611679077, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-6.342275142669678, rank=23, decoded_token=None), 220: Logprob(logprob=-0.27977514266967773, rank=1, decoded_token=None)}, {6982: Logprob(logprob=-2.9779157638549805, rank=5, decoded_token=None), 220: Logprob(logprob=-1.2279157638549805, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-0.6994138956069946, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.4830473065376282, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.417629241943359, rank=9, decoded_token=None), 3639: Logprob(logprob=-0.7926291227340698, rank=1, decoded_token=None)}, {605: Logprob(logprob=-4.466213703155518, rank=13, decoded_token=None), 806: Logprob(logprob=-2.0912137031555176, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.9247885942459106, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.1273905634880066, rank=1, decoded_token=None)}, {1691: Logprob(logprob=-0.8227850198745728, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.007400361355394125, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.01602531410753727, rank=1, decoded_token=None)}, {843: Logprob(logprob=-0.14333274960517883, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.03991517424583435, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.19991245865821838, rank=1, decoded_token=None)}, {3391: Logprob(logprob=-0.02759881317615509, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.08311088383197784, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3676953911781311, rank=1, decoded_token=None)}, {4370: Logprob(logprob=-0.017791442573070526, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-9.866714477539062, rank=126, decoded_token=None), 11: Logprob(logprob=-0.17921476066112518, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-4.3207597732543945, rank=8, decoded_token=None), 1396: Logprob(logprob=-1.0707597732543945, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.38952898979187, rank=2, decoded_token=None), 374: Logprob(logprob=-0.5145289897918701, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.5315698385238647, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.11095929145813, rank=3, decoded_token=None), 6037: Logprob(logprob=-0.8609593510627747, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.3972514867782593, rank=1, decoded_token=None), 220: Logprob(logprob=-1.3972514867782593, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.22985251247882843, rank=1, decoded_token=None)}, {837: Logprob(logprob=-0.6552088856697083, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.3445965349674225, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.07507845014333725, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.009831340983510017, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.5897692441940308, rank=1, decoded_token=None)}, {220: Logprob(logprob=-2.430539608001709, rank=5, decoded_token=None), 1176: Logprob(logprob=-2.055539608001709, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.135545015335083, rank=3, decoded_token=None), 806: Logprob(logprob=-1.885545015335083, rank=1, decoded_token=None)}, {339: Logprob(logprob=-0.6885674595832825, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.1400470733642578, rank=2, decoded_token=None), 4751: Logprob(logprob=-0.5150470733642578, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.2480833530426025, rank=2, decoded_token=None), 374: Logprob(logprob=-0.4980833828449249, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.013370846398174763, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.1963651180267334, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.482834815979004, rank=2, decoded_token=None), 374: Logprob(logprob=-0.10783478617668152, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.2007579803466797, rank=1, decoded_token=None)}, {459: Logprob(logprob=-4.266760349273682, rank=6, decoded_token=None), 220: Logprob(logprob=-0.5167602300643921, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.4180258810520172, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.021704640239477158, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.2175983190536499, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0018430643249303102, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0003660247311927378, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.05719471722841263, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.4022200107574463, rank=4, decoded_token=None), 220: Logprob(logprob=-0.2772199809551239, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.5990962982177734, rank=4, decoded_token=None), 220: Logprob(logprob=-1.849096417427063, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.754885196685791, rank=1, decoded_token=None)}, {2646: Logprob(logprob=-3.085150718688965, rank=8, decoded_token=None), 3136: Logprob(logprob=-1.8351507186889648, rank=1, decoded_token=None)}, {617: Logprob(logprob=-2.3687305450439453, rank=3, decoded_token=None), 842: Logprob(logprob=-1.1187306642532349, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.649540424346924, rank=8, decoded_token=None), 264: Logprob(logprob=-0.8995404243469238, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-2.7209155559539795, rank=4, decoded_token=None), 24871: Logprob(logprob=-0.7209156155586243, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.07320179790258408, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-3.1266684532165527, rank=4, decoded_token=None), 304: Logprob(logprob=-0.8766685128211975, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.01429002359509468, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-0.0503406785428524, rank=1, decoded_token=None)}, {1023: Logprob(logprob=-0.0030884684529155493, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03331640362739563, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.011476805433630943, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002609150833450258, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.14198358356952667, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-5.121759414672852, rank=9, decoded_token=None), 1396: Logprob(logprob=-0.8717594742774963, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.605440855026245, rank=4, decoded_token=None), 1396: Logprob(logprob=-0.23044079542160034, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.1128024309873581, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.31675779819488525, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.007474906742572784, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.02105293981730938, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.08588151633739471, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.4892382323741913, rank=1, decoded_token=None)}, {459: Logprob(logprob=-3.0233283042907715, rank=5, decoded_token=None), 220: Logprob(logprob=-1.7733283042907715, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.8158836364746094, rank=2, decoded_token=None), 10535: Logprob(logprob=-0.6908836364746094, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.0712813287973404, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-7.487314224243164, rank=28, decoded_token=None), 627: Logprob(logprob=-0.6123140454292297, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.1590193808078766, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.011315456591546535, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.005359092261642218, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03135305643081665, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.02188076637685299, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000491021724883467, rank=1, decoded_token=None)}, {1442: Logprob(logprob=-4.837580680847168, rank=7, decoded_token=None), 578: Logprob(logprob=-0.3375808596611023, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.5674490332603455, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.3511098623275757, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.2133203744888306, rank=1, decoded_token=None), 374: Logprob(logprob=-1.2133203744888306, rank=1, decoded_token=None)}, {3940: Logprob(logprob=-4.17018461227417, rank=14, decoded_token=None), 374: Logprob(logprob=-1.42018461227417, rank=1, decoded_token=None)}, {449: Logprob(logprob=-0.05720282346010208, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.9503310322761536, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.7719177007675171, rank=2, decoded_token=None), 1524: Logprob(logprob=-0.6469177007675171, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.008971618488430977, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-2.8240914344787598, rank=2, decoded_token=None), 11: Logprob(logprob=-0.19909141957759857, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.6145686507225037, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.596506357192993, rank=3, decoded_token=None), 1828: Logprob(logprob=-0.47150641679763794, rank=1, decoded_token=None)}, {1053: Logprob(logprob=-2.0979936122894287, rank=2, decoded_token=None), 690: Logprob(logprob=-0.22299352288246155, rank=1, decoded_token=None)}, {617: Logprob(logprob=-3.0427448749542236, rank=6, decoded_token=None), 2646: Logprob(logprob=-0.9177448153495789, rank=1, decoded_token=None)}, {1193: Logprob(logprob=-3.433971643447876, rank=7, decoded_token=None), 459: Logprob(logprob=-0.8089715838432312, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.313199520111084, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.01859915629029274, rank=1, decoded_token=None)}, {304: Logprob(logprob=-2.8377554416656494, rank=2, decoded_token=None), 627: Logprob(logprob=-0.33775535225868225, rank=1, decoded_token=None)}, {433: Logprob(logprob=-0.3653806447982788, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.20377226173877716, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.02473527193069458, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0027272433508187532, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.1850049495697021, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.19033809006214142, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.309290647506714, rank=2, decoded_token=None), 791: Logprob(logprob=-1.9342906475067139, rank=1, decoded_token=None)}, {2860: Logprob(logprob=-5.905457496643066, rank=57, decoded_token=None), 1396: Logprob(logprob=-2.5929572582244873, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.027499310672283173, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.23535610735416412, rank=1, decoded_token=None)}, {966: Logprob(logprob=-4.081752777099609, rank=3, decoded_token=None), 605: Logprob(logprob=-3.8317525386810303, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-6.079629898071289, rank=50, decoded_token=None), 4236: Logprob(logprob=-1.7046300172805786, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.493253231048584, rank=7, decoded_token=None), 31408: Logprob(logprob=-1.9932533502578735, rank=1, decoded_token=None)}, {1514: Logprob(logprob=-1.6049902439117432, rank=2, decoded_token=None), 387: Logprob(logprob=-0.9799902439117432, rank=1, decoded_token=None)}, {19794: Logprob(logprob=-4.2269792556762695, rank=6, decoded_token=None), 304: Logprob(logprob=-0.7269791960716248, rank=1, decoded_token=None)}, {520: Logprob(logprob=-2.5716304779052734, rank=4, decoded_token=None), 304: Logprob(logprob=-0.6966304779052734, rank=1, decoded_token=None)}, {264: Logprob(logprob=-0.8206021785736084, rank=1, decoded_token=None)}, {6246: Logprob(logprob=-5.323214530944824, rank=24, decoded_token=None), 16520: Logprob(logprob=-1.0732142925262451, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.8638421297073364, rank=1, decoded_token=None)}, {2684: Logprob(logprob=-3.016662120819092, rank=7, decoded_token=None), 1442: Logprob(logprob=-1.7666622400283813, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.6918129324913025, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.022499410435557365, rank=1, decoded_token=None)}, {7041: Logprob(logprob=-3.962672472000122, rank=6, decoded_token=None), 220: Logprob(logprob=-0.3376724421977997, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3280467987060547, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.23579740524292, rank=1, decoded_token=None), 17: Logprob(logprob=-2.23579740524292, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-0.6167428493499756, rank=1, decoded_token=None)}, {389: Logprob(logprob=-2.094090461730957, rank=4, decoded_token=None), 505: Logprob(logprob=-1.719090461730957, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-1.238318681716919, rank=2, decoded_token=None), 279: Logprob(logprob=-0.4883187413215637, rank=1, decoded_token=None)}, {2128: Logprob(logprob=-0.10444443672895432, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.15527960658073425, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-2.8790693283081055, rank=4, decoded_token=None), 2650: Logprob(logprob=-1.004069447517395, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-1.269631266593933, rank=2, decoded_token=None), 315: Logprob(logprob=-1.019631266593933, rank=1, decoded_token=None)}, {12722: Logprob(logprob=-4.804388999938965, rank=9, decoded_token=None), 374: Logprob(logprob=-0.5543891191482544, rank=1, decoded_token=None)}, {15100: Logprob(logprob=-3.970444679260254, rank=7, decoded_token=None), 16964: Logprob(logprob=-0.5954446792602539, rank=1, decoded_token=None)}, {1268: Logprob(logprob=-1.029451847076416, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.8737099170684814, rank=3, decoded_token=None), 279: Logprob(logprob=-1.2487099170684814, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-1.841010332107544, rank=2, decoded_token=None), 8417: Logprob(logprob=-1.091010332107544, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.113349549472332, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.29112255573272705, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.009947842918336391, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.8003526926040649, rank=1, decoded_token=None)}, {4460: Logprob(logprob=-3.4189629554748535, rank=3, decoded_token=None), 430: Logprob(logprob=-0.7939630150794983, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9348305463790894, rank=2, decoded_token=None), 311: Logprob(logprob=-0.8098305463790894, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.037669867277145386, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0022645562421530485, rank=1, decoded_token=None)}, {2758: Logprob(logprob=-3.4584977626800537, rank=8, decoded_token=None), 578: Logprob(logprob=-2.0834977626800537, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3807215392589569, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.9317857027053833, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.39621296525001526, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.3208718299865723, rank=2, decoded_token=None), 279: Logprob(logprob=-0.44587182998657227, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.10219656676054001, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.7788331508636475, rank=2, decoded_token=None), 627: Logprob(logprob=-0.7788332104682922, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.45813241600990295, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.933356761932373, rank=4, decoded_token=None), 279: Logprob(logprob=-0.05835668370127678, rank=1, decoded_token=None)}, {1758: Logprob(logprob=-0.9147714376449585, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.909633994102478, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.44750797748565674, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0014780559577047825, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001387499796692282, rank=1, decoded_token=None)}, {64002: Logprob(logprob=-2.5448737144470215, rank=3, decoded_token=None), 94310: Logprob(logprob=-0.544873833656311, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04134264215826988, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.1306612491607666, rank=1, decoded_token=None)}, {555: Logprob(logprob=-0.03507496044039726, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0044165924191474915, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.013939524069428444, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.09804058820009232, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.0629529133439064, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.240189328789711, rank=1, decoded_token=None)}, {21: Logprob(logprob=-0.03781026229262352, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.01011602021753788, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.05886910483241081, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0013978243805468082, rank=1, decoded_token=None)}, {13: Logprob(logprob=-9.798523387871683e-05, rank=1, decoded_token=None)}, {72159: Logprob(logprob=-1.417578935623169, rank=2, decoded_token=None), 94310: Logprob(logprob=-0.792578935623169, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.02184729278087616, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.16513295471668243, rank=1, decoded_token=None)}, {323: Logprob(logprob=-5.760368347167969, rank=2, decoded_token=None), 555: Logprob(logprob=-0.010368410497903824, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.004999872762709856, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.10827615857124329, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.17176643013954163, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.027458835393190384, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04579097405076027, rank=1, decoded_token=None)}, {3965: Logprob(logprob=-0.16355350613594055, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.10822748392820358, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.008487226441502571, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0020695950370281935, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000342191313393414, rank=1, decoded_token=None)}, {94310: Logprob(logprob=-0.7333000302314758, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.024686889722943306, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.6213490962982178, rank=1, decoded_token=None)}, {505: Logprob(logprob=-0.10929779708385468, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.010756724514067173, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.05260276049375534, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.02710282802581787, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.014247246086597443, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04090675339102745, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.008638868108391762, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.0173895675688982, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.05997175723314285, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.00443486962467432, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0005690624238923192, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.335664987564087, rank=3, decoded_token=None), 356: Logprob(logprob=-1.210664987564087, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.20828098058700562, rank=1, decoded_token=None)}, {32: Logprob(logprob=-1.9398690462112427, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-5.220652103424072, rank=28, decoded_token=None), 2860: Logprob(logprob=-3.0956521034240723, rank=1, decoded_token=None)}, {31878: Logprob(logprob=-1.599919319152832, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.733023762702942, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-8.531267166137695, rank=187, decoded_token=None), 18: Logprob(logprob=-2.531266689300537, rank=1, decoded_token=None)}, {2204: Logprob(logprob=-2.716043472290039, rank=2, decoded_token=None), 13840: Logprob(logprob=-2.466043472290039, rank=1, decoded_token=None)}, {8146: Logprob(logprob=-5.786083698272705, rank=26, decoded_token=None), 4595: Logprob(logprob=-1.411083698272705, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.025601888075470924, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-3.9537112712860107, rank=11, decoded_token=None), 37824: Logprob(logprob=-2.8287112712860107, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.3711868226528168, rank=1, decoded_token=None)}, {2435: Logprob(logprob=-4.847472190856934, rank=13, decoded_token=None), 1442: Logprob(logprob=-1.4724724292755127, rank=1, decoded_token=None)}, {617: Logprob(logprob=-1.45283043384552, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.8435330986976624, rank=1, decoded_token=None)}, {914: Logprob(logprob=-4.36965799331665, rank=21, decoded_token=None), 18: Logprob(logprob=-2.9946579933166504, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-4.7997283935546875, rank=13, decoded_token=None), 2204: Logprob(logprob=-1.0497283935546875, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.16669881343841553, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-2.0677084922790527, rank=2, decoded_token=None), 2579: Logprob(logprob=-1.8177084922790527, rank=1, decoded_token=None)}, {1933: Logprob(logprob=-0.1227213442325592, rank=1, decoded_token=None)}, {304: Logprob(logprob=-3.446204662322998, rank=5, decoded_token=None), 13: Logprob(logprob=-0.4462047219276428, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-7.250609874725342, rank=17, decoded_token=None), 5708: Logprob(logprob=-0.25060996413230896, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.1065310388803482, rank=1, decoded_token=None)}, {578: Logprob(logprob=-2.566020965576172, rank=5, decoded_token=None), 2650: Logprob(logprob=-1.3160210847854614, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.9273428916931152, rank=3, decoded_token=None), 3637: Logprob(logprob=-0.8023430109024048, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.08843708783388138, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.6100079417228699, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.7515377402305603, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-2.1421217918395996, rank=2, decoded_token=None), 1855: Logprob(logprob=-0.5171217322349548, rank=1, decoded_token=None)}, {279: Logprob(logprob=-3.456434965133667, rank=6, decoded_token=None), 304: Logprob(logprob=-1.331434965133667, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.02585725486278534, rank=1, decoded_token=None)}, {706: Logprob(logprob=-0.38343092799186707, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.708461880683899, rank=2, decoded_token=None), 374: Logprob(logprob=-1.083461880683899, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.23030529916286469, rank=1, decoded_token=None)}, {649: Logprob(logprob=-2.6108829975128174, rank=2, decoded_token=None), 374: Logprob(logprob=-0.36088305711746216, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.057374272495508194, rank=1, decoded_token=None)}, {1766: Logprob(logprob=-2.6309587955474854, rank=4, decoded_token=None), 5439: Logprob(logprob=-1.1309587955474854, rank=1, decoded_token=None)}, {1701: Logprob(logprob=-2.2968969345092773, rank=2, decoded_token=None), 555: Logprob(logprob=-0.17189693450927734, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.41828861832618713, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-3.6377298831939697, rank=7, decoded_token=None), 6037: Logprob(logprob=-1.2627298831939697, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-4.555124759674072, rank=14, decoded_token=None), 220: Logprob(logprob=-1.3051248788833618, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.17938224971294403, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.9476473331451416, rank=2, decoded_token=None), 3639: Logprob(logprob=-1.1976473331451416, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-0.4874989986419678, rank=1, decoded_token=None)}, {25800: Logprob(logprob=-3.846048593521118, rank=9, decoded_token=None), 11: Logprob(logprob=-1.7835485935211182, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.18882788717746735, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.07510089874267578, rank=1, decoded_token=None)}, {13: Logprob(logprob=-2.343728542327881, rank=3, decoded_token=None), 284: Logprob(logprob=-1.5937285423278809, rank=1, decoded_token=None)}, {2650: Logprob(logprob=-3.1135451793670654, rank=3, decoded_token=None), 3639: Logprob(logprob=-0.6135452389717102, rank=1, decoded_token=None)}, {1690: Logprob(logprob=-0.08424817770719528, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.7079728245735168, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.14217698574066162, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-0.18304136395454407, rank=1, decoded_token=None)}, {1587: Logprob(logprob=-0.9694701433181763, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.025537513196468353, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.003264813916757703, rank=1, decoded_token=None)}, {617: Logprob(logprob=-0.09910587221384048, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.1510932743549347, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.03838161751627922, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.09627294540405273, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.07186505943536758, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.002630585338920355, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021421492099761963, rank=1, decoded_token=None)}, {25541: Logprob(logprob=-10.88266658782959, rank=909, decoded_token=None), 7699: Logprob(logprob=-2.2576663494110107, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.7218905091285706, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0011835244949907064, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00015138434537220746, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0014886498684063554, rank=1, decoded_token=None)}, {17: Logprob(logprob=-3.907280206680298, rank=6, decoded_token=None), 7699: Logprob(logprob=-3.032280206680298, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.0223177969455719, rank=1, decoded_token=None)}, {21129: Logprob(logprob=-5.540557861328125, rank=44, decoded_token=None), 2636: Logprob(logprob=-3.540557622909546, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.008849094621837139, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.00032646095496602356, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001445904199499637, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0016035091830417514, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.3098583221435547, rank=2, decoded_token=None), 20: Logprob(logprob=-2.1848583221435547, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.006650575902312994, rank=1, decoded_token=None)}, {24599: Logprob(logprob=-6.172876358032227, rank=80, decoded_token=None), 21129: Logprob(logprob=-2.5478761196136475, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.004533370956778526, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0005069877952337265, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002643712505232543, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.00395266804844141, rank=1, decoded_token=None)}, {19: Logprob(logprob=-2.4699602127075195, rank=3, decoded_token=None), 18: Logprob(logprob=-0.84496009349823, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.0012282931711524725, rank=1, decoded_token=None)}, {5154: Logprob(logprob=-5.722906112670898, rank=71, decoded_token=None), 18070: Logprob(logprob=-2.8479063510894775, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.48243021965026855, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004707326181232929, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0004094000905752182, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.0903127193450928, rank=1, decoded_token=None), 362: Logprob(logprob=-1.0903127193450928, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.21004998683929443, rank=1, decoded_token=None)}, {23956: Logprob(logprob=-3.7082245349884033, rank=5, decoded_token=None), 32: Logprob(logprob=-1.7082245349884033, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-2.328795909881592, rank=3, decoded_token=None), 315: Logprob(logprob=-1.4537959098815918, rank=1, decoded_token=None)}, {374: Logprob(logprob=-1.3939491510391235, rank=1, decoded_token=None)}, {13890: Logprob(logprob=-0.3086131513118744, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.004158303141593933, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.5719388723373413, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.611593246459961, rank=3, decoded_token=None), 17: Logprob(logprob=-2.486593246459961, rank=1, decoded_token=None)}, {865: Logprob(logprob=-3.814181327819824, rank=6, decoded_token=None), 25800: Logprob(logprob=-0.9391812086105347, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.21246875822544098, rank=1, decoded_token=None)}, {24: Logprob(logprob=-3.2393479347229004, rank=8, decoded_token=None), 17: Logprob(logprob=-2.1143479347229004, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9484657645225525, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.02641945704817772, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0019446763908490539, rank=1, decoded_token=None)}, {320: Logprob(logprob=-4.043663024902344, rank=2, decoded_token=None), 220: Logprob(logprob=-0.0436631478369236, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3292904496192932, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7795792818069458, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.019342729821801186, rank=1, decoded_token=None)}, {19: Logprob(logprob=-3.8902170658111572, rank=6, decoded_token=None), 24: Logprob(logprob=-0.2652171552181244, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.05693596974015236, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7711688876152039, rank=1, decoded_token=None)}, {320: Logprob(logprob=-1.7098952531814575, rank=2, decoded_token=None), 220: Logprob(logprob=-0.2098952829837799, rank=1, decoded_token=None)}, {21: Logprob(logprob=-3.9887096881866455, rank=6, decoded_token=None), 20: Logprob(logprob=-0.8637097477912903, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.05180598795413971, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006352707277983427, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.6478800773620605, rank=5, decoded_token=None), 18: Logprob(logprob=-1.1478800773620605, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.06078224629163742, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0037563731893897057, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00020287363440729678, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.5973082780838013, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3547166585922241, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.1522906869649887, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.119587242603302, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.250182867050171, rank=4, decoded_token=None), 24: Logprob(logprob=-1.250182867050171, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.21551699936389923, rank=1, decoded_token=None)}, {489: Logprob(logprob=-4.195828914642334, rank=3, decoded_token=None), 865: Logprob(logprob=-0.0708288699388504, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.3979986310005188, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.6019997596740723, rank=3, decoded_token=None), 21: Logprob(logprob=-1.2269997596740723, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.012111456133425236, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.02054995857179165, rank=1, decoded_token=None)}, {19: Logprob(logprob=-1.0867620706558228, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.14609402418136597, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0014072287594899535, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00014137222024146467, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.401207834482193, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.18403267860412598, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.15473514795303345, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.06539695709943771, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.4415698051452637, rank=3, decoded_token=None), 19: Logprob(logprob=-1.1915698051452637, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.11237519979476929, rank=1, decoded_token=None)}, {489: Logprob(logprob=-0.7666293382644653, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.39565205574035645, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.5823985934257507, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.031112726777791977, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.06674905866384506, rank=1, decoded_token=None)}, {24: Logprob(logprob=-1.1196229457855225, rank=2, decoded_token=None), 19: Logprob(logprob=-0.9946228861808777, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.013978317379951477, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.000894146622158587, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002002515539061278, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.19024042785167694, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.08259163796901703, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.11528829485177994, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04026882350444794, rank=1, decoded_token=None)}, {24: Logprob(logprob=-0.6260170340538025, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.025457678362727165, rank=1, decoded_token=None)}, {865: Logprob(logprob=-4.2807393074035645, rank=4, decoded_token=None), 489: Logprob(logprob=-0.15573909878730774, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.06027596443891525, rank=1, decoded_token=None)}, {21: Logprob(logprob=-1.8035647869110107, rank=2, decoded_token=None), 20: Logprob(logprob=-0.42856475710868835, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.025070033967494965, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.002612869720906019, rank=1, decoded_token=None)}, {24: Logprob(logprob=-4.944259166717529, rank=4, decoded_token=None), 20: Logprob(logprob=-0.19425919651985168, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.016041269525885582, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004313688259571791, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0003240775258745998, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.1086416244506836, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.18588051199913025, rank=1, decoded_token=None)}, {83445: Logprob(logprob=-9.345852851867676, rank=591, decoded_token=None), 32: Logprob(logprob=-1.8458532094955444, rank=1, decoded_token=None)}, {25173: Logprob(logprob=-6.057316780090332, rank=17, decoded_token=None), 279: Logprob(logprob=-0.5573167204856873, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.6035754680633545, rank=4, decoded_token=None), 18: Logprob(logprob=-2.3535754680633545, rank=1, decoded_token=None)}, {2120: Logprob(logprob=-4.8119587898254395, rank=15, decoded_token=None), 489: Logprob(logprob=-1.811958909034729, rank=1, decoded_token=None)}, {25173: Logprob(logprob=-1.6099052429199219, rank=2, decoded_token=None), 489: Logprob(logprob=-0.6099051833152771, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.12789200246334076, rank=1, decoded_token=None)}, {18: Logprob(logprob=-1.5132516622543335, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.6997661590576172, rank=1, decoded_token=None)}, {369: Logprob(logprob=-2.233518362045288, rank=3, decoded_token=None), 489: Logprob(logprob=-0.8585184216499329, rank=1, decoded_token=None)}, {865: Logprob(logprob=-1.3948338031768799, rank=2, decoded_token=None), 279: Logprob(logprob=-0.8948337435722351, rank=1, decoded_token=None)}, {284: Logprob(logprob=-0.06370629370212555, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.5985791683197021, rank=1, decoded_token=None)}, {17: Logprob(logprob=-1.9561364650726318, rank=3, decoded_token=None), 16: Logprob(logprob=-1.8311364650726318, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.5157890915870667, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.04689118638634682, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0020582936704158783, rank=1, decoded_token=None)}, {25173: Logprob(logprob=-0.5630612373352051, rank=1, decoded_token=None)}, {19: Logprob(logprob=-3.1775267124176025, rank=6, decoded_token=None), 21: Logprob(logprob=-0.9275267124176025, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.006182474084198475, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0009446449112147093, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00011395759065635502, rank=1, decoded_token=None)}, {25173: Logprob(logprob=-0.4082798957824707, rank=1, decoded_token=None)}, {17: Logprob(logprob=-1.7366771697998047, rank=2, decoded_token=None), 21: Logprob(logprob=-1.2366771697998047, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.017647743225097656, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.001081358641386032, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00011836781777674332, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.5549273490905762, rank=1, decoded_token=None)}, {605: Logprob(logprob=-5.195494651794434, rank=9, decoded_token=None), 17: Logprob(logprob=-0.6954944133758545, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0038563660345971584, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0010650444310158491, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00021228920377325267, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.13738475739955902, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.6242997646331787, rank=4, decoded_token=None), 21: Logprob(logprob=-1.6242997646331787, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0686674565076828, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.003958011511713266, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.00034767304896377027, rank=1, decoded_token=None)}, {362: Logprob(logprob=-1.0755325555801392, rank=2, decoded_token=None), 426: Logprob(logprob=-0.8255325555801392, rank=1, decoded_token=None)}], outputs=[CompletionOutput(index=0, text='', token_ids=(271,), cumulative_logprob=None, logprobs=None, finish_reason=length, stop_reason=None)], finished=True, metrics=RequestMetrics(arrival_time=1732330219.913516, last_token_time=1732330219.913516, first_scheduled_time=1732330219.9404528, first_token_time=1732330220.0975826, time_in_queue=0.026936769485473633, finished_time=1732330220.0985374, scheduler_time=0.002440982001644443, model_forward_time=None, model_execute_time=None), lora_request=None, num_cached_tokens=0), RequestOutput(request_id=6, prompt=None, prompt_token_ids=[128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 83445, 25173, 17, 2120, 25173, 220, 18, 8, 369, 865, 284, 220, 17, 627, 32, 13, 25173, 19, 198, 33, 13, 25173, 17, 198, 34, 13, 220, 605, 198, 35, 13, 220, 17, 198, 16533, 25, 423], encoder_prompt=None, encoder_prompt_token_ids=None, prompt_logprobs=[None, {791: Logprob(logprob=-3.620506763458252, rank=4, decoded_token=None), 14924: Logprob(logprob=-1.1830066442489624, rank=1, decoded_token=None)}, {2768: Logprob(logprob=-4.267952919006348, rank=2, decoded_token=None), 220: Logprob(logprob=-3.7054529190063477, rank=1, decoded_token=None)}, {527: Logprob(logprob=-3.0935873985290527, rank=3, decoded_token=None), 374: Logprob(logprob=-1.9685872793197632, rank=1, decoded_token=None)}, {5361: Logprob(logprob=-9.361089706420898, rank=708, decoded_token=None), 279: Logprob(logprob=-1.5485893487930298, rank=1, decoded_token=None)}, {5873: Logprob(logprob=-1.1175264120101929, rank=1, decoded_token=None)}, {4860: Logprob(logprob=-0.15363378822803497, rank=1, decoded_token=None)}, {320: Logprob(logprob=-3.388906955718994, rank=9, decoded_token=None), 389: Logprob(logprob=-1.7639068365097046, rank=1, decoded_token=None)}, {4291: Logprob(logprob=-3.4973137378692627, rank=2, decoded_token=None), 11865: Logprob(logprob=-0.6223137378692627, rank=1, decoded_token=None)}, {11503: Logprob(logprob=-0.987357497215271, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.4506547451019287, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.8773975372314453, rank=4, decoded_token=None), 389: Logprob(logprob=-1.5023976564407349, rank=1, decoded_token=None)}, {36256: Logprob(logprob=-8.630099296569824, rank=577, decoded_token=None), 279: Logprob(logprob=-1.1925991773605347, rank=1, decoded_token=None)}, {38696: Logprob(logprob=-3.769948959350586, rank=8, decoded_token=None), 19320: Logprob(logprob=-2.144948959350586, rank=1, decoded_token=None)}, {382: Logprob(logprob=-5.472397804260254, rank=18, decoded_token=None), 13: Logprob(logprob=-1.0973976850509644, rank=1, decoded_token=None)}, {791: Logprob(logprob=-3.5461583137512207, rank=5, decoded_token=None), 16: Logprob(logprob=-1.4211583137512207, rank=1, decoded_token=None)}, {7187: Logprob(logprob=-7.392093658447266, rank=164, decoded_token=None), 2768: Logprob(logprob=-2.3295936584472656, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.11663393676280975, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.73690128326416, rank=2, decoded_token=None), 264: Logprob(logprob=-0.48690128326416016, rank=1, decoded_token=None)}, {3363: Logprob(logprob=-1.8540297746658325, rank=1, decoded_token=None)}, {1405: Logprob(logprob=-5.987232208251953, rank=13, decoded_token=None), 315: Logprob(logprob=-0.23723231256008148, rank=1, decoded_token=None)}, {33126: Logprob(logprob=-9.044610023498535, rank=315, decoded_token=None), 358: Logprob(logprob=-1.2946101427078247, rank=1, decoded_token=None)}, {574: Logprob(logprob=-5.429495334625244, rank=8, decoded_token=None), 6439: Logprob(logprob=-0.4294951558113098, rank=1, decoded_token=None)}, {9405: Logprob(logprob=-0.40476104617118835, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.5629992485046387, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.7537806630134583, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-7.209847450256348, rank=134, decoded_token=None), 1041: Logprob(logprob=-2.7098476886749268, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.7134871482849121, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-8.75186538696289, rank=571, decoded_token=None), 931: Logprob(logprob=-0.376865029335022, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.47577813267707825, rank=1, decoded_token=None)}, {3639: Logprob(logprob=-4.106588840484619, rank=8, decoded_token=None), 578: Logprob(logprob=-1.2315888404846191, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.30162209272384644, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.16182462871074677, rank=1, decoded_token=None)}, {907: Logprob(logprob=-5.745996475219727, rank=27, decoded_token=None), 7187: Logprob(logprob=-0.8084966540336609, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.032959938049316406, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.9882255792617798, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.205665588378906, rank=12, decoded_token=None), 7187: Logprob(logprob=-1.2056655883789062, rank=1, decoded_token=None)}, {20: Logprob(logprob=-3.386111259460449, rank=3, decoded_token=None), 605: Logprob(logprob=-3.011111259460449, rank=1, decoded_token=None)}, {304: Logprob(logprob=-6.863307952880859, rank=33, decoded_token=None), 339: Logprob(logprob=-0.48830777406692505, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.4937672019004822, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.7949767112731934, rank=9, decoded_token=None), 2768: Logprob(logprob=-1.6699767112731934, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.8562200665473938, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-0.46025389432907104, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.35301274061203003, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-0.0504663847386837, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-3.7009406089782715, rank=5, decoded_token=None), 1980: Logprob(logprob=-0.8259406685829163, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.014418125152588, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.2552250325679779, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.18280577659606934, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.9818596839904785, rank=1, decoded_token=None)}, {9214: Logprob(logprob=-7.26568078994751, rank=42, decoded_token=None), 11: Logprob(logprob=-0.6406807899475098, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.34480056166648865, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0036241819616407156, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0007076143519952893, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021493716165423393, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.265846848487854, rank=1, decoded_token=None)}, {11758: Logprob(logprob=-1.8974242210388184, rank=2, decoded_token=None), 11990: Logprob(logprob=-1.3974242210388184, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.008312508463859558, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0016896746819838881, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000583597575314343, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006553467363119125, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.09962913393974304, rank=1, decoded_token=None)}, {22781: Logprob(logprob=-0.696441113948822, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.007642554119229317, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0023322305642068386, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0006073060794733465, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.019782857969403267, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.06486474722623825, rank=1, decoded_token=None)}, {6305: Logprob(logprob=-0.6396012306213379, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.25918030738830566, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.9573916792869568, rank=1, decoded_token=None), 36: Logprob(logprob=-0.9573916792869568, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.06022197753190994, rank=1, decoded_token=None)}, {362: Logprob(logprob=-1.2654039859771729, rank=2, decoded_token=None), 423: Logprob(logprob=-1.1404039859771729, rank=1, decoded_token=None)}, {271: Logprob(logprob=-1.2457599639892578, rank=2, decoded_token=None), 128001: Logprob(logprob=-0.7457600235939026, rank=1, decoded_token=None)}, {43819: Logprob(logprob=-12.215432167053223, rank=2611, decoded_token=None), 791: Logprob(logprob=-0.8404321670532227, rank=1, decoded_token=None)}, {21475: Logprob(logprob=-0.7314256429672241, rank=1, decoded_token=None)}, {1511: Logprob(logprob=-6.56179141998291, rank=48, decoded_token=None), 374: Logprob(logprob=-1.999291181564331, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.3226728439331055, rank=3, decoded_token=None), 264: Logprob(logprob=-1.322672724723816, rank=1, decoded_token=None)}, {6037: Logprob(logprob=-6.163534164428711, rank=55, decoded_token=None), 15150: Logprob(logprob=-2.538533926010132, rank=1, decoded_token=None)}, {330: Logprob(logprob=-3.6627614498138428, rank=9, decoded_token=None), 315: Logprob(logprob=-1.5377614498138428, rank=1, decoded_token=None)}, {2261: Logprob(logprob=-4.202095985412598, rank=14, decoded_token=None), 2746: Logprob(logprob=-2.7020959854125977, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.6789430379867554, rank=1, decoded_token=None)}, {806: Logprob(logprob=-4.852216720581055, rank=17, decoded_token=None), 20: Logprob(logprob=-1.4772168397903442, rank=1, decoded_token=None)}, {1: Logprob(logprob=-1.4486876726150513, rank=2, decoded_token=None), 311: Logprob(logprob=-0.9486876726150513, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.5747750997543335, rank=1, decoded_token=None)}, {1893: Logprob(logprob=-6.229022026062012, rank=44, decoded_token=None), 1505: Logprob(logprob=-1.4790222644805908, rank=1, decoded_token=None)}, {279: Logprob(logprob=-1.2839043140411377, rank=2, decoded_token=None), 264: Logprob(logprob=-0.7839043140411377, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.3298133611679077, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-6.342275142669678, rank=23, decoded_token=None), 220: Logprob(logprob=-0.27977514266967773, rank=1, decoded_token=None)}, {6982: Logprob(logprob=-2.9779157638549805, rank=5, decoded_token=None), 220: Logprob(logprob=-1.2279157638549805, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-0.6994138956069946, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.4830473065376282, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.417629241943359, rank=9, decoded_token=None), 3639: Logprob(logprob=-0.7926291227340698, rank=1, decoded_token=None)}, {605: Logprob(logprob=-4.466213703155518, rank=13, decoded_token=None), 806: Logprob(logprob=-2.0912137031555176, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.9247885942459106, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.1273905634880066, rank=1, decoded_token=None)}, {1691: Logprob(logprob=-0.8227850198745728, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.007400361355394125, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.01602531410753727, rank=1, decoded_token=None)}, {843: Logprob(logprob=-0.14333274960517883, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.03991517424583435, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.19991245865821838, rank=1, decoded_token=None)}, {3391: Logprob(logprob=-0.02759881317615509, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.08311088383197784, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3676953911781311, rank=1, decoded_token=None)}, {4370: Logprob(logprob=-0.017791442573070526, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-9.866714477539062, rank=126, decoded_token=None), 11: Logprob(logprob=-0.17921476066112518, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-4.3207597732543945, rank=8, decoded_token=None), 1396: Logprob(logprob=-1.0707597732543945, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.38952898979187, rank=2, decoded_token=None), 374: Logprob(logprob=-0.5145289897918701, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.5315698385238647, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.11095929145813, rank=3, decoded_token=None), 6037: Logprob(logprob=-0.8609593510627747, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.3972514867782593, rank=1, decoded_token=None), 220: Logprob(logprob=-1.3972514867782593, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.22985251247882843, rank=1, decoded_token=None)}, {837: Logprob(logprob=-0.6552088856697083, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.3445965349674225, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.07507845014333725, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.009831340983510017, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.5897692441940308, rank=1, decoded_token=None)}, {220: Logprob(logprob=-2.430539608001709, rank=5, decoded_token=None), 1176: Logprob(logprob=-2.055539608001709, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.135545015335083, rank=3, decoded_token=None), 806: Logprob(logprob=-1.885545015335083, rank=1, decoded_token=None)}, {339: Logprob(logprob=-0.6885674595832825, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.1400470733642578, rank=2, decoded_token=None), 4751: Logprob(logprob=-0.5150470733642578, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.2480833530426025, rank=2, decoded_token=None), 374: Logprob(logprob=-0.4980833828449249, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.013370846398174763, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.1963651180267334, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.482834815979004, rank=2, decoded_token=None), 374: Logprob(logprob=-0.10783478617668152, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.2007579803466797, rank=1, decoded_token=None)}, {459: Logprob(logprob=-4.266760349273682, rank=6, decoded_token=None), 220: Logprob(logprob=-0.5167602300643921, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.4180258810520172, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.021704640239477158, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.2175983190536499, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0018430643249303102, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0003660247311927378, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.05719471722841263, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.4022200107574463, rank=4, decoded_token=None), 220: Logprob(logprob=-0.2772199809551239, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.5990962982177734, rank=4, decoded_token=None), 220: Logprob(logprob=-1.849096417427063, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.754885196685791, rank=1, decoded_token=None)}, {2646: Logprob(logprob=-3.085150718688965, rank=8, decoded_token=None), 3136: Logprob(logprob=-1.8351507186889648, rank=1, decoded_token=None)}, {617: Logprob(logprob=-2.3687305450439453, rank=3, decoded_token=None), 842: Logprob(logprob=-1.1187306642532349, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.649540424346924, rank=8, decoded_token=None), 264: Logprob(logprob=-0.8995404243469238, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-2.7209155559539795, rank=4, decoded_token=None), 24871: Logprob(logprob=-0.7209156155586243, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.07320179790258408, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-3.1266684532165527, rank=4, decoded_token=None), 304: Logprob(logprob=-0.8766685128211975, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.01429002359509468, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-0.0503406785428524, rank=1, decoded_token=None)}, {1023: Logprob(logprob=-0.0030884684529155493, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03331640362739563, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.011476805433630943, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002609150833450258, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.14198358356952667, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-5.121759414672852, rank=9, decoded_token=None), 1396: Logprob(logprob=-0.8717594742774963, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.605440855026245, rank=4, decoded_token=None), 1396: Logprob(logprob=-0.23044079542160034, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.1128024309873581, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.31675779819488525, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.007474906742572784, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.02105293981730938, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.08588151633739471, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.4892382323741913, rank=1, decoded_token=None)}, {459: Logprob(logprob=-3.0233283042907715, rank=5, decoded_token=None), 220: Logprob(logprob=-1.7733283042907715, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.8158836364746094, rank=2, decoded_token=None), 10535: Logprob(logprob=-0.6908836364746094, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.0712813287973404, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-7.487314224243164, rank=28, decoded_token=None), 627: Logprob(logprob=-0.6123140454292297, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.1590193808078766, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.011315456591546535, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.005359092261642218, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03135305643081665, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.02188076637685299, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000491021724883467, rank=1, decoded_token=None)}, {1442: Logprob(logprob=-4.837580680847168, rank=7, decoded_token=None), 578: Logprob(logprob=-0.3375808596611023, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.5674490332603455, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.3511098623275757, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.2133203744888306, rank=1, decoded_token=None), 374: Logprob(logprob=-1.2133203744888306, rank=1, decoded_token=None)}, {3940: Logprob(logprob=-4.17018461227417, rank=14, decoded_token=None), 374: Logprob(logprob=-1.42018461227417, rank=1, decoded_token=None)}, {449: Logprob(logprob=-0.05720282346010208, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.9503310322761536, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.7719177007675171, rank=2, decoded_token=None), 1524: Logprob(logprob=-0.6469177007675171, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.008971618488430977, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-2.8240914344787598, rank=2, decoded_token=None), 11: Logprob(logprob=-0.19909141957759857, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.6145686507225037, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.596506357192993, rank=3, decoded_token=None), 1828: Logprob(logprob=-0.47150641679763794, rank=1, decoded_token=None)}, {1053: Logprob(logprob=-2.0979936122894287, rank=2, decoded_token=None), 690: Logprob(logprob=-0.22299352288246155, rank=1, decoded_token=None)}, {617: Logprob(logprob=-3.0427448749542236, rank=6, decoded_token=None), 2646: Logprob(logprob=-0.9177448153495789, rank=1, decoded_token=None)}, {1193: Logprob(logprob=-3.433971643447876, rank=7, decoded_token=None), 459: Logprob(logprob=-0.8089715838432312, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.313199520111084, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.01859915629029274, rank=1, decoded_token=None)}, {304: Logprob(logprob=-2.8377554416656494, rank=2, decoded_token=None), 627: Logprob(logprob=-0.33775535225868225, rank=1, decoded_token=None)}, {433: Logprob(logprob=-0.3653806447982788, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.20377226173877716, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.02473527193069458, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0027272433508187532, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.1850049495697021, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.19033809006214142, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.309290647506714, rank=2, decoded_token=None), 791: Logprob(logprob=-1.9342906475067139, rank=1, decoded_token=None)}, {2860: Logprob(logprob=-5.905457496643066, rank=57, decoded_token=None), 1396: Logprob(logprob=-2.5929572582244873, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.027499310672283173, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.23535610735416412, rank=1, decoded_token=None)}, {966: Logprob(logprob=-4.081752777099609, rank=3, decoded_token=None), 605: Logprob(logprob=-3.8317525386810303, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-6.079629898071289, rank=50, decoded_token=None), 4236: Logprob(logprob=-1.7046300172805786, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.493253231048584, rank=7, decoded_token=None), 31408: Logprob(logprob=-1.9932533502578735, rank=1, decoded_token=None)}, {1514: Logprob(logprob=-1.6049902439117432, rank=2, decoded_token=None), 387: Logprob(logprob=-0.9799902439117432, rank=1, decoded_token=None)}, {19794: Logprob(logprob=-4.2269792556762695, rank=6, decoded_token=None), 304: Logprob(logprob=-0.7269791960716248, rank=1, decoded_token=None)}, {520: Logprob(logprob=-2.5716304779052734, rank=4, decoded_token=None), 304: Logprob(logprob=-0.6966304779052734, rank=1, decoded_token=None)}, {264: Logprob(logprob=-0.8206021785736084, rank=1, decoded_token=None)}, {6246: Logprob(logprob=-5.323214530944824, rank=24, decoded_token=None), 16520: Logprob(logprob=-1.0732142925262451, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.8638421297073364, rank=1, decoded_token=None)}, {2684: Logprob(logprob=-3.016662120819092, rank=7, decoded_token=None), 1442: Logprob(logprob=-1.7666622400283813, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.6918129324913025, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.022499410435557365, rank=1, decoded_token=None)}, {7041: Logprob(logprob=-3.962672472000122, rank=6, decoded_token=None), 220: Logprob(logprob=-0.3376724421977997, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3280467987060547, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.23579740524292, rank=1, decoded_token=None), 17: Logprob(logprob=-2.23579740524292, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-0.6167428493499756, rank=1, decoded_token=None)}, {389: Logprob(logprob=-2.094090461730957, rank=4, decoded_token=None), 505: Logprob(logprob=-1.719090461730957, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-1.238318681716919, rank=2, decoded_token=None), 279: Logprob(logprob=-0.4883187413215637, rank=1, decoded_token=None)}, {2128: Logprob(logprob=-0.10444443672895432, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.15527960658073425, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-2.8790693283081055, rank=4, decoded_token=None), 2650: Logprob(logprob=-1.004069447517395, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-1.269631266593933, rank=2, decoded_token=None), 315: Logprob(logprob=-1.019631266593933, rank=1, decoded_token=None)}, {12722: Logprob(logprob=-4.804388999938965, rank=9, decoded_token=None), 374: Logprob(logprob=-0.5543891191482544, rank=1, decoded_token=None)}, {15100: Logprob(logprob=-3.970444679260254, rank=7, decoded_token=None), 16964: Logprob(logprob=-0.5954446792602539, rank=1, decoded_token=None)}, {1268: Logprob(logprob=-1.029451847076416, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.8737099170684814, rank=3, decoded_token=None), 279: Logprob(logprob=-1.2487099170684814, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-1.841010332107544, rank=2, decoded_token=None), 8417: Logprob(logprob=-1.091010332107544, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.113349549472332, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.29112255573272705, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.009947842918336391, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.8003526926040649, rank=1, decoded_token=None)}, {4460: Logprob(logprob=-3.4189629554748535, rank=3, decoded_token=None), 430: Logprob(logprob=-0.7939630150794983, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9348305463790894, rank=2, decoded_token=None), 311: Logprob(logprob=-0.8098305463790894, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.037669867277145386, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0022645562421530485, rank=1, decoded_token=None)}, {2758: Logprob(logprob=-3.4584977626800537, rank=8, decoded_token=None), 578: Logprob(logprob=-2.0834977626800537, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3807215392589569, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.9317857027053833, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.39621296525001526, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.3208718299865723, rank=2, decoded_token=None), 279: Logprob(logprob=-0.44587182998657227, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.10219656676054001, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.7788331508636475, rank=2, decoded_token=None), 627: Logprob(logprob=-0.7788332104682922, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.45813241600990295, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.933356761932373, rank=4, decoded_token=None), 279: Logprob(logprob=-0.05835668370127678, rank=1, decoded_token=None)}, {1758: Logprob(logprob=-0.9147714376449585, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.909633994102478, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.44750797748565674, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0014780559577047825, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001387499796692282, rank=1, decoded_token=None)}, {64002: Logprob(logprob=-2.5448737144470215, rank=3, decoded_token=None), 94310: Logprob(logprob=-0.544873833656311, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04134264215826988, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.1306612491607666, rank=1, decoded_token=None)}, {555: Logprob(logprob=-0.03507496044039726, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0044165924191474915, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.013939524069428444, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.09804058820009232, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.0629529133439064, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.240189328789711, rank=1, decoded_token=None)}, {21: Logprob(logprob=-0.03781026229262352, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.01011602021753788, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.05886910483241081, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0013978243805468082, rank=1, decoded_token=None)}, {13: Logprob(logprob=-9.798523387871683e-05, rank=1, decoded_token=None)}, {72159: Logprob(logprob=-1.417578935623169, rank=2, decoded_token=None), 94310: Logprob(logprob=-0.792578935623169, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.02184729278087616, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.16513295471668243, rank=1, decoded_token=None)}, {323: Logprob(logprob=-5.760368347167969, rank=2, decoded_token=None), 555: Logprob(logprob=-0.010368410497903824, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.004999872762709856, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.10827615857124329, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.17176643013954163, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.027458835393190384, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04579097405076027, rank=1, decoded_token=None)}, {3965: Logprob(logprob=-0.16355350613594055, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.10822748392820358, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.008487226441502571, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0020695950370281935, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000342191313393414, rank=1, decoded_token=None)}, {94310: Logprob(logprob=-0.7333000302314758, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.024686889722943306, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.6213490962982178, rank=1, decoded_token=None)}, {505: Logprob(logprob=-0.10929779708385468, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.010756724514067173, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.05260276049375534, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.02710282802581787, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.014247246086597443, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04090675339102745, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.008638868108391762, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.0173895675688982, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.05997175723314285, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.00443486962467432, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0005690624238923192, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.335664987564087, rank=3, decoded_token=None), 356: Logprob(logprob=-1.210664987564087, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.20828098058700562, rank=1, decoded_token=None)}, {32: Logprob(logprob=-1.9398690462112427, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-5.220652103424072, rank=28, decoded_token=None), 2860: Logprob(logprob=-3.0956521034240723, rank=1, decoded_token=None)}, {31878: Logprob(logprob=-1.599919319152832, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.733023762702942, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-8.531267166137695, rank=187, decoded_token=None), 18: Logprob(logprob=-2.531266689300537, rank=1, decoded_token=None)}, {2204: Logprob(logprob=-2.716043472290039, rank=2, decoded_token=None), 13840: Logprob(logprob=-2.466043472290039, rank=1, decoded_token=None)}, {8146: Logprob(logprob=-5.786083698272705, rank=26, decoded_token=None), 4595: Logprob(logprob=-1.411083698272705, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.025601888075470924, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-3.9537112712860107, rank=11, decoded_token=None), 37824: Logprob(logprob=-2.8287112712860107, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.3711868226528168, rank=1, decoded_token=None)}, {2435: Logprob(logprob=-4.847472190856934, rank=13, decoded_token=None), 1442: Logprob(logprob=-1.4724724292755127, rank=1, decoded_token=None)}, {617: Logprob(logprob=-1.45283043384552, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.8435330986976624, rank=1, decoded_token=None)}, {914: Logprob(logprob=-4.36965799331665, rank=21, decoded_token=None), 18: Logprob(logprob=-2.9946579933166504, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-4.7997283935546875, rank=13, decoded_token=None), 2204: Logprob(logprob=-1.0497283935546875, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.16669881343841553, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-2.0677084922790527, rank=2, decoded_token=None), 2579: Logprob(logprob=-1.8177084922790527, rank=1, decoded_token=None)}, {1933: Logprob(logprob=-0.1227213442325592, rank=1, decoded_token=None)}, {304: Logprob(logprob=-3.446204662322998, rank=5, decoded_token=None), 13: Logprob(logprob=-0.4462047219276428, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-7.250609874725342, rank=17, decoded_token=None), 5708: Logprob(logprob=-0.25060996413230896, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.1065310388803482, rank=1, decoded_token=None)}, {578: Logprob(logprob=-2.566020965576172, rank=5, decoded_token=None), 2650: Logprob(logprob=-1.3160210847854614, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.9273428916931152, rank=3, decoded_token=None), 3637: Logprob(logprob=-0.8023430109024048, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.08843708783388138, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.6100079417228699, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.7515377402305603, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-2.1421217918395996, rank=2, decoded_token=None), 1855: Logprob(logprob=-0.5171217322349548, rank=1, decoded_token=None)}, {279: Logprob(logprob=-3.456434965133667, rank=6, decoded_token=None), 304: Logprob(logprob=-1.331434965133667, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.02585725486278534, rank=1, decoded_token=None)}, {706: Logprob(logprob=-0.38343092799186707, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.708461880683899, rank=2, decoded_token=None), 374: Logprob(logprob=-1.083461880683899, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.23030529916286469, rank=1, decoded_token=None)}, {649: Logprob(logprob=-2.6108829975128174, rank=2, decoded_token=None), 374: Logprob(logprob=-0.36088305711746216, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.057374272495508194, rank=1, decoded_token=None)}, {1766: Logprob(logprob=-2.6309587955474854, rank=4, decoded_token=None), 5439: Logprob(logprob=-1.1309587955474854, rank=1, decoded_token=None)}, {1701: Logprob(logprob=-2.2968969345092773, rank=2, decoded_token=None), 555: Logprob(logprob=-0.17189693450927734, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.41828861832618713, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-3.6377298831939697, rank=7, decoded_token=None), 6037: Logprob(logprob=-1.2627298831939697, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-4.555124759674072, rank=14, decoded_token=None), 220: Logprob(logprob=-1.3051248788833618, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.17938224971294403, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.9476473331451416, rank=2, decoded_token=None), 3639: Logprob(logprob=-1.1976473331451416, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-0.4874989986419678, rank=1, decoded_token=None)}, {25800: Logprob(logprob=-3.846048593521118, rank=9, decoded_token=None), 11: Logprob(logprob=-1.7835485935211182, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.18882788717746735, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.07510089874267578, rank=1, decoded_token=None)}, {13: Logprob(logprob=-2.343728542327881, rank=3, decoded_token=None), 284: Logprob(logprob=-1.5937285423278809, rank=1, decoded_token=None)}, {2650: Logprob(logprob=-3.1135451793670654, rank=3, decoded_token=None), 3639: Logprob(logprob=-0.6135452389717102, rank=1, decoded_token=None)}, {1690: Logprob(logprob=-0.08424817770719528, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.7079728245735168, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.14217698574066162, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-0.18304136395454407, rank=1, decoded_token=None)}, {1587: Logprob(logprob=-0.9694701433181763, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.025537513196468353, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.003264813916757703, rank=1, decoded_token=None)}, {617: Logprob(logprob=-0.09910587221384048, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.1510932743549347, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.03838161751627922, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.09627294540405273, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.07186505943536758, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.002630585338920355, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021421492099761963, rank=1, decoded_token=None)}, {25541: Logprob(logprob=-10.88266658782959, rank=909, decoded_token=None), 7699: Logprob(logprob=-2.2576663494110107, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.7218905091285706, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0011835244949907064, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00015138434537220746, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0014886498684063554, rank=1, decoded_token=None)}, {17: Logprob(logprob=-3.907280206680298, rank=6, decoded_token=None), 7699: Logprob(logprob=-3.032280206680298, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.0223177969455719, rank=1, decoded_token=None)}, {21129: Logprob(logprob=-5.540557861328125, rank=44, decoded_token=None), 2636: Logprob(logprob=-3.540557622909546, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.008849094621837139, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.00032646095496602356, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001445904199499637, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0016035091830417514, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.3098583221435547, rank=2, decoded_token=None), 20: Logprob(logprob=-2.1848583221435547, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.006650575902312994, rank=1, decoded_token=None)}, {24599: Logprob(logprob=-6.172876358032227, rank=80, decoded_token=None), 21129: Logprob(logprob=-2.5478761196136475, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.004533370956778526, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0005069877952337265, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002643712505232543, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.00395266804844141, rank=1, decoded_token=None)}, {19: Logprob(logprob=-2.4699602127075195, rank=3, decoded_token=None), 18: Logprob(logprob=-0.84496009349823, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.0012282931711524725, rank=1, decoded_token=None)}, {5154: Logprob(logprob=-5.722906112670898, rank=71, decoded_token=None), 18070: Logprob(logprob=-2.8479063510894775, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.48243021965026855, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004707326181232929, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0004094000905752182, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.0903127193450928, rank=1, decoded_token=None), 362: Logprob(logprob=-1.0903127193450928, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.21004998683929443, rank=1, decoded_token=None)}, {23956: Logprob(logprob=-3.7082245349884033, rank=5, decoded_token=None), 32: Logprob(logprob=-1.7082245349884033, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-2.328795909881592, rank=3, decoded_token=None), 315: Logprob(logprob=-1.4537959098815918, rank=1, decoded_token=None)}, {374: Logprob(logprob=-1.3939491510391235, rank=1, decoded_token=None)}, {13890: Logprob(logprob=-0.3086131513118744, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.004158303141593933, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.5719388723373413, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.611593246459961, rank=3, decoded_token=None), 17: Logprob(logprob=-2.486593246459961, rank=1, decoded_token=None)}, {865: Logprob(logprob=-3.814181327819824, rank=6, decoded_token=None), 25800: Logprob(logprob=-0.9391812086105347, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.21246875822544098, rank=1, decoded_token=None)}, {24: Logprob(logprob=-3.2393479347229004, rank=8, decoded_token=None), 17: Logprob(logprob=-2.1143479347229004, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9484657645225525, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.02641945704817772, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0019446763908490539, rank=1, decoded_token=None)}, {320: Logprob(logprob=-4.043663024902344, rank=2, decoded_token=None), 220: Logprob(logprob=-0.0436631478369236, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3292904496192932, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7795792818069458, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.019342729821801186, rank=1, decoded_token=None)}, {19: Logprob(logprob=-3.8902170658111572, rank=6, decoded_token=None), 24: Logprob(logprob=-0.2652171552181244, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.05693596974015236, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7711688876152039, rank=1, decoded_token=None)}, {320: Logprob(logprob=-1.7098952531814575, rank=2, decoded_token=None), 220: Logprob(logprob=-0.2098952829837799, rank=1, decoded_token=None)}, {21: Logprob(logprob=-3.9887096881866455, rank=6, decoded_token=None), 20: Logprob(logprob=-0.8637097477912903, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.05180598795413971, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006352707277983427, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.6478800773620605, rank=5, decoded_token=None), 18: Logprob(logprob=-1.1478800773620605, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.06078224629163742, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0037563731893897057, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00020287363440729678, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.5973082780838013, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3547166585922241, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.1522906869649887, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.119587242603302, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.250182867050171, rank=4, decoded_token=None), 24: Logprob(logprob=-1.250182867050171, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.21551699936389923, rank=1, decoded_token=None)}, {489: Logprob(logprob=-4.195828914642334, rank=3, decoded_token=None), 865: Logprob(logprob=-0.0708288699388504, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.3979986310005188, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.6019997596740723, rank=3, decoded_token=None), 21: Logprob(logprob=-1.2269997596740723, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.012111456133425236, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.02054995857179165, rank=1, decoded_token=None)}, {19: Logprob(logprob=-1.0867620706558228, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.14609402418136597, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0014072287594899535, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00014137222024146467, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.401207834482193, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.18403267860412598, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.15473514795303345, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.06539695709943771, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.4415698051452637, rank=3, decoded_token=None), 19: Logprob(logprob=-1.1915698051452637, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.11237519979476929, rank=1, decoded_token=None)}, {489: Logprob(logprob=-0.7666293382644653, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.39565205574035645, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.5823985934257507, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.031112726777791977, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.06674905866384506, rank=1, decoded_token=None)}, {24: Logprob(logprob=-1.1196229457855225, rank=2, decoded_token=None), 19: Logprob(logprob=-0.9946228861808777, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.013978317379951477, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.000894146622158587, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002002515539061278, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.19024042785167694, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.08259163796901703, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.11528829485177994, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04026882350444794, rank=1, decoded_token=None)}, {24: Logprob(logprob=-0.6260170340538025, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.025457678362727165, rank=1, decoded_token=None)}, {865: Logprob(logprob=-4.2807393074035645, rank=4, decoded_token=None), 489: Logprob(logprob=-0.15573909878730774, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.06027596443891525, rank=1, decoded_token=None)}, {21: Logprob(logprob=-1.8035647869110107, rank=2, decoded_token=None), 20: Logprob(logprob=-0.42856475710868835, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.025070033967494965, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.002612869720906019, rank=1, decoded_token=None)}, {24: Logprob(logprob=-4.944259166717529, rank=4, decoded_token=None), 20: Logprob(logprob=-0.19425919651985168, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.016041269525885582, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004313688259571791, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0003240775258745998, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.1086416244506836, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.18588051199913025, rank=1, decoded_token=None)}, {83445: Logprob(logprob=-9.345852851867676, rank=591, decoded_token=None), 32: Logprob(logprob=-1.8458532094955444, rank=1, decoded_token=None)}, {25173: Logprob(logprob=-6.057316780090332, rank=17, decoded_token=None), 279: Logprob(logprob=-0.5573167204856873, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.6035754680633545, rank=4, decoded_token=None), 18: Logprob(logprob=-2.3535754680633545, rank=1, decoded_token=None)}, {2120: Logprob(logprob=-4.8119587898254395, rank=15, decoded_token=None), 489: Logprob(logprob=-1.811958909034729, rank=1, decoded_token=None)}, {25173: Logprob(logprob=-1.6099052429199219, rank=2, decoded_token=None), 489: Logprob(logprob=-0.6099051833152771, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.12789200246334076, rank=1, decoded_token=None)}, {18: Logprob(logprob=-1.5132516622543335, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.6997661590576172, rank=1, decoded_token=None)}, {369: Logprob(logprob=-2.233518362045288, rank=3, decoded_token=None), 489: Logprob(logprob=-0.8585184216499329, rank=1, decoded_token=None)}, {865: Logprob(logprob=-1.3948338031768799, rank=2, decoded_token=None), 279: Logprob(logprob=-0.8948337435722351, rank=1, decoded_token=None)}, {284: Logprob(logprob=-0.06370629370212555, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.5985791683197021, rank=1, decoded_token=None)}, {17: Logprob(logprob=-1.9561364650726318, rank=3, decoded_token=None), 16: Logprob(logprob=-1.8311364650726318, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.5157890915870667, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.04689118638634682, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0020582936704158783, rank=1, decoded_token=None)}, {25173: Logprob(logprob=-0.5630612373352051, rank=1, decoded_token=None)}, {19: Logprob(logprob=-3.1775267124176025, rank=6, decoded_token=None), 21: Logprob(logprob=-0.9275267124176025, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.006182474084198475, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0009446449112147093, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00011395759065635502, rank=1, decoded_token=None)}, {25173: Logprob(logprob=-0.4082798957824707, rank=1, decoded_token=None)}, {17: Logprob(logprob=-1.7366771697998047, rank=2, decoded_token=None), 21: Logprob(logprob=-1.2366771697998047, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.017647743225097656, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.001081358641386032, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00011836781777674332, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.5549273490905762, rank=1, decoded_token=None)}, {605: Logprob(logprob=-5.195494651794434, rank=9, decoded_token=None), 17: Logprob(logprob=-0.6954944133758545, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0038563660345971584, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0010650444310158491, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00021228920377325267, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.13738475739955902, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.6242997646331787, rank=4, decoded_token=None), 21: Logprob(logprob=-1.6242997646331787, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0686674565076828, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.003958011511713266, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.00034767304896377027, rank=1, decoded_token=None)}, {423: Logprob(logprob=-2.8255324363708496, rank=4, decoded_token=None), 426: Logprob(logprob=-0.8255325555801392, rank=1, decoded_token=None)}], outputs=[CompletionOutput(index=0, text='', token_ids=(271,), cumulative_logprob=None, logprobs=None, finish_reason=length, stop_reason=None)], finished=True, metrics=RequestMetrics(arrival_time=1732330219.9136944, last_token_time=1732330219.9136944, first_scheduled_time=1732330219.9404528, first_token_time=1732330220.0975826, time_in_queue=0.026758432388305664, finished_time=1732330220.0985513, scheduler_time=0.002440982001644443, model_forward_time=None, model_execute_time=None), lora_request=None, num_cached_tokens=0), RequestOutput(request_id=7, prompt=None, prompt_token_ids=[128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 83445, 25173, 17, 2120, 25173, 220, 18, 8, 369, 865, 284, 220, 17, 627, 32, 13, 25173, 19, 198, 33, 13, 25173, 17, 198, 34, 13, 220, 605, 198, 35, 13, 220, 17, 198, 16533, 25, 426], encoder_prompt=None, encoder_prompt_token_ids=None, prompt_logprobs=[None, {791: Logprob(logprob=-3.620506763458252, rank=4, decoded_token=None), 14924: Logprob(logprob=-1.1830066442489624, rank=1, decoded_token=None)}, {2768: Logprob(logprob=-4.267952919006348, rank=2, decoded_token=None), 220: Logprob(logprob=-3.7054529190063477, rank=1, decoded_token=None)}, {527: Logprob(logprob=-3.0935873985290527, rank=3, decoded_token=None), 374: Logprob(logprob=-1.9685872793197632, rank=1, decoded_token=None)}, {5361: Logprob(logprob=-9.361089706420898, rank=708, decoded_token=None), 279: Logprob(logprob=-1.5485893487930298, rank=1, decoded_token=None)}, {5873: Logprob(logprob=-1.1175264120101929, rank=1, decoded_token=None)}, {4860: Logprob(logprob=-0.15363378822803497, rank=1, decoded_token=None)}, {320: Logprob(logprob=-3.388906955718994, rank=9, decoded_token=None), 389: Logprob(logprob=-1.7639068365097046, rank=1, decoded_token=None)}, {4291: Logprob(logprob=-3.4973137378692627, rank=2, decoded_token=None), 11865: Logprob(logprob=-0.6223137378692627, rank=1, decoded_token=None)}, {11503: Logprob(logprob=-0.987357497215271, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.4506547451019287, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.8773975372314453, rank=4, decoded_token=None), 389: Logprob(logprob=-1.5023976564407349, rank=1, decoded_token=None)}, {36256: Logprob(logprob=-8.630099296569824, rank=577, decoded_token=None), 279: Logprob(logprob=-1.1925991773605347, rank=1, decoded_token=None)}, {38696: Logprob(logprob=-3.769948959350586, rank=8, decoded_token=None), 19320: Logprob(logprob=-2.144948959350586, rank=1, decoded_token=None)}, {382: Logprob(logprob=-5.472397804260254, rank=18, decoded_token=None), 13: Logprob(logprob=-1.0973976850509644, rank=1, decoded_token=None)}, {791: Logprob(logprob=-3.5461583137512207, rank=5, decoded_token=None), 16: Logprob(logprob=-1.4211583137512207, rank=1, decoded_token=None)}, {7187: Logprob(logprob=-7.392093658447266, rank=164, decoded_token=None), 2768: Logprob(logprob=-2.3295936584472656, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.11663393676280975, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.73690128326416, rank=2, decoded_token=None), 264: Logprob(logprob=-0.48690128326416016, rank=1, decoded_token=None)}, {3363: Logprob(logprob=-1.8540297746658325, rank=1, decoded_token=None)}, {1405: Logprob(logprob=-5.987232208251953, rank=13, decoded_token=None), 315: Logprob(logprob=-0.23723231256008148, rank=1, decoded_token=None)}, {33126: Logprob(logprob=-9.044610023498535, rank=315, decoded_token=None), 358: Logprob(logprob=-1.2946101427078247, rank=1, decoded_token=None)}, {574: Logprob(logprob=-5.429495334625244, rank=8, decoded_token=None), 6439: Logprob(logprob=-0.4294951558113098, rank=1, decoded_token=None)}, {9405: Logprob(logprob=-0.40476104617118835, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.5629992485046387, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.7537806630134583, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-7.209847450256348, rank=134, decoded_token=None), 1041: Logprob(logprob=-2.7098476886749268, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.7134871482849121, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-8.75186538696289, rank=571, decoded_token=None), 931: Logprob(logprob=-0.376865029335022, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.47577813267707825, rank=1, decoded_token=None)}, {3639: Logprob(logprob=-4.106588840484619, rank=8, decoded_token=None), 578: Logprob(logprob=-1.2315888404846191, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.30162209272384644, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.16182462871074677, rank=1, decoded_token=None)}, {907: Logprob(logprob=-5.745996475219727, rank=27, decoded_token=None), 7187: Logprob(logprob=-0.8084966540336609, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.032959938049316406, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.9882255792617798, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.205665588378906, rank=12, decoded_token=None), 7187: Logprob(logprob=-1.2056655883789062, rank=1, decoded_token=None)}, {20: Logprob(logprob=-3.386111259460449, rank=3, decoded_token=None), 605: Logprob(logprob=-3.011111259460449, rank=1, decoded_token=None)}, {304: Logprob(logprob=-6.863307952880859, rank=33, decoded_token=None), 339: Logprob(logprob=-0.48830777406692505, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.4937672019004822, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.7949767112731934, rank=9, decoded_token=None), 2768: Logprob(logprob=-1.6699767112731934, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.8562200665473938, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-0.46025389432907104, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.35301274061203003, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-0.0504663847386837, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-3.7009406089782715, rank=5, decoded_token=None), 1980: Logprob(logprob=-0.8259406685829163, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.014418125152588, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.2552250325679779, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.18280577659606934, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.9818596839904785, rank=1, decoded_token=None)}, {9214: Logprob(logprob=-7.26568078994751, rank=42, decoded_token=None), 11: Logprob(logprob=-0.6406807899475098, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.34480056166648865, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0036241819616407156, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0007076143519952893, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021493716165423393, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.265846848487854, rank=1, decoded_token=None)}, {11758: Logprob(logprob=-1.8974242210388184, rank=2, decoded_token=None), 11990: Logprob(logprob=-1.3974242210388184, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.008312508463859558, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0016896746819838881, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000583597575314343, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006553467363119125, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.09962913393974304, rank=1, decoded_token=None)}, {22781: Logprob(logprob=-0.696441113948822, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.007642554119229317, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0023322305642068386, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0006073060794733465, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.019782857969403267, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.06486474722623825, rank=1, decoded_token=None)}, {6305: Logprob(logprob=-0.6396012306213379, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.25918030738830566, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.9573916792869568, rank=1, decoded_token=None), 36: Logprob(logprob=-0.9573916792869568, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.06022197753190994, rank=1, decoded_token=None)}, {362: Logprob(logprob=-1.2654039859771729, rank=2, decoded_token=None), 423: Logprob(logprob=-1.1404039859771729, rank=1, decoded_token=None)}, {271: Logprob(logprob=-1.2457599639892578, rank=2, decoded_token=None), 128001: Logprob(logprob=-0.7457600235939026, rank=1, decoded_token=None)}, {43819: Logprob(logprob=-12.215432167053223, rank=2611, decoded_token=None), 791: Logprob(logprob=-0.8404321670532227, rank=1, decoded_token=None)}, {21475: Logprob(logprob=-0.7314256429672241, rank=1, decoded_token=None)}, {1511: Logprob(logprob=-6.56179141998291, rank=48, decoded_token=None), 374: Logprob(logprob=-1.999291181564331, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.3226728439331055, rank=3, decoded_token=None), 264: Logprob(logprob=-1.322672724723816, rank=1, decoded_token=None)}, {6037: Logprob(logprob=-6.163534164428711, rank=55, decoded_token=None), 15150: Logprob(logprob=-2.538533926010132, rank=1, decoded_token=None)}, {330: Logprob(logprob=-3.6627614498138428, rank=9, decoded_token=None), 315: Logprob(logprob=-1.5377614498138428, rank=1, decoded_token=None)}, {2261: Logprob(logprob=-4.202095985412598, rank=14, decoded_token=None), 2746: Logprob(logprob=-2.7020959854125977, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.6789430379867554, rank=1, decoded_token=None)}, {806: Logprob(logprob=-4.852216720581055, rank=17, decoded_token=None), 20: Logprob(logprob=-1.4772168397903442, rank=1, decoded_token=None)}, {1: Logprob(logprob=-1.4486876726150513, rank=2, decoded_token=None), 311: Logprob(logprob=-0.9486876726150513, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.5747750997543335, rank=1, decoded_token=None)}, {1893: Logprob(logprob=-6.229022026062012, rank=44, decoded_token=None), 1505: Logprob(logprob=-1.4790222644805908, rank=1, decoded_token=None)}, {279: Logprob(logprob=-1.2839043140411377, rank=2, decoded_token=None), 264: Logprob(logprob=-0.7839043140411377, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.3298133611679077, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-6.342275142669678, rank=23, decoded_token=None), 220: Logprob(logprob=-0.27977514266967773, rank=1, decoded_token=None)}, {6982: Logprob(logprob=-2.9779157638549805, rank=5, decoded_token=None), 220: Logprob(logprob=-1.2279157638549805, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-0.6994138956069946, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.4830473065376282, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.417629241943359, rank=9, decoded_token=None), 3639: Logprob(logprob=-0.7926291227340698, rank=1, decoded_token=None)}, {605: Logprob(logprob=-4.466213703155518, rank=13, decoded_token=None), 806: Logprob(logprob=-2.0912137031555176, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.9247885942459106, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.1273905634880066, rank=1, decoded_token=None)}, {1691: Logprob(logprob=-0.8227850198745728, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.007400361355394125, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.01602531410753727, rank=1, decoded_token=None)}, {843: Logprob(logprob=-0.14333274960517883, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.03991517424583435, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.19991245865821838, rank=1, decoded_token=None)}, {3391: Logprob(logprob=-0.02759881317615509, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.08311088383197784, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3676953911781311, rank=1, decoded_token=None)}, {4370: Logprob(logprob=-0.017791442573070526, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-9.866714477539062, rank=126, decoded_token=None), 11: Logprob(logprob=-0.17921476066112518, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-4.3207597732543945, rank=8, decoded_token=None), 1396: Logprob(logprob=-1.0707597732543945, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.38952898979187, rank=2, decoded_token=None), 374: Logprob(logprob=-0.5145289897918701, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.5315698385238647, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.11095929145813, rank=3, decoded_token=None), 6037: Logprob(logprob=-0.8609593510627747, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.3972514867782593, rank=1, decoded_token=None), 220: Logprob(logprob=-1.3972514867782593, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.22985251247882843, rank=1, decoded_token=None)}, {837: Logprob(logprob=-0.6552088856697083, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.3445965349674225, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.07507845014333725, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.009831340983510017, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.5897692441940308, rank=1, decoded_token=None)}, {220: Logprob(logprob=-2.430539608001709, rank=5, decoded_token=None), 1176: Logprob(logprob=-2.055539608001709, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.135545015335083, rank=3, decoded_token=None), 806: Logprob(logprob=-1.885545015335083, rank=1, decoded_token=None)}, {339: Logprob(logprob=-0.6885674595832825, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.1400470733642578, rank=2, decoded_token=None), 4751: Logprob(logprob=-0.5150470733642578, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.2480833530426025, rank=2, decoded_token=None), 374: Logprob(logprob=-0.4980833828449249, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.013370846398174763, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.1963651180267334, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.482834815979004, rank=2, decoded_token=None), 374: Logprob(logprob=-0.10783478617668152, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.2007579803466797, rank=1, decoded_token=None)}, {459: Logprob(logprob=-4.266760349273682, rank=6, decoded_token=None), 220: Logprob(logprob=-0.5167602300643921, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.4180258810520172, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.021704640239477158, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.2175983190536499, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0018430643249303102, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0003660247311927378, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.05719471722841263, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.4022200107574463, rank=4, decoded_token=None), 220: Logprob(logprob=-0.2772199809551239, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.5990962982177734, rank=4, decoded_token=None), 220: Logprob(logprob=-1.849096417427063, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.754885196685791, rank=1, decoded_token=None)}, {2646: Logprob(logprob=-3.085150718688965, rank=8, decoded_token=None), 3136: Logprob(logprob=-1.8351507186889648, rank=1, decoded_token=None)}, {617: Logprob(logprob=-2.3687305450439453, rank=3, decoded_token=None), 842: Logprob(logprob=-1.1187306642532349, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.649540424346924, rank=8, decoded_token=None), 264: Logprob(logprob=-0.8995404243469238, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-2.7209155559539795, rank=4, decoded_token=None), 24871: Logprob(logprob=-0.7209156155586243, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.07320179790258408, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-3.1266684532165527, rank=4, decoded_token=None), 304: Logprob(logprob=-0.8766685128211975, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.01429002359509468, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-0.0503406785428524, rank=1, decoded_token=None)}, {1023: Logprob(logprob=-0.0030884684529155493, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03331640362739563, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.011476805433630943, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002609150833450258, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.14198358356952667, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-5.121759414672852, rank=9, decoded_token=None), 1396: Logprob(logprob=-0.8717594742774963, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.605440855026245, rank=4, decoded_token=None), 1396: Logprob(logprob=-0.23044079542160034, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.1128024309873581, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.31675779819488525, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.007474906742572784, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.02105293981730938, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.08588151633739471, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.4892382323741913, rank=1, decoded_token=None)}, {459: Logprob(logprob=-3.0233283042907715, rank=5, decoded_token=None), 220: Logprob(logprob=-1.7733283042907715, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.8158836364746094, rank=2, decoded_token=None), 10535: Logprob(logprob=-0.6908836364746094, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.0712813287973404, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-7.487314224243164, rank=28, decoded_token=None), 627: Logprob(logprob=-0.6123140454292297, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.1590193808078766, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.011315456591546535, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.005359092261642218, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03135305643081665, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.02188076637685299, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000491021724883467, rank=1, decoded_token=None)}, {1442: Logprob(logprob=-4.837580680847168, rank=7, decoded_token=None), 578: Logprob(logprob=-0.3375808596611023, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.5674490332603455, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.3511098623275757, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.2133203744888306, rank=1, decoded_token=None), 374: Logprob(logprob=-1.2133203744888306, rank=1, decoded_token=None)}, {3940: Logprob(logprob=-4.17018461227417, rank=14, decoded_token=None), 374: Logprob(logprob=-1.42018461227417, rank=1, decoded_token=None)}, {449: Logprob(logprob=-0.05720282346010208, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.9503310322761536, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.7719177007675171, rank=2, decoded_token=None), 1524: Logprob(logprob=-0.6469177007675171, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.008971618488430977, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-2.8240914344787598, rank=2, decoded_token=None), 11: Logprob(logprob=-0.19909141957759857, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.6145686507225037, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.596506357192993, rank=3, decoded_token=None), 1828: Logprob(logprob=-0.47150641679763794, rank=1, decoded_token=None)}, {1053: Logprob(logprob=-2.0979936122894287, rank=2, decoded_token=None), 690: Logprob(logprob=-0.22299352288246155, rank=1, decoded_token=None)}, {617: Logprob(logprob=-3.0427448749542236, rank=6, decoded_token=None), 2646: Logprob(logprob=-0.9177448153495789, rank=1, decoded_token=None)}, {1193: Logprob(logprob=-3.433971643447876, rank=7, decoded_token=None), 459: Logprob(logprob=-0.8089715838432312, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.313199520111084, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.01859915629029274, rank=1, decoded_token=None)}, {304: Logprob(logprob=-2.8377554416656494, rank=2, decoded_token=None), 627: Logprob(logprob=-0.33775535225868225, rank=1, decoded_token=None)}, {433: Logprob(logprob=-0.3653806447982788, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.20377226173877716, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.02473527193069458, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0027272433508187532, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.1850049495697021, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.19033809006214142, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.309290647506714, rank=2, decoded_token=None), 791: Logprob(logprob=-1.9342906475067139, rank=1, decoded_token=None)}, {2860: Logprob(logprob=-5.905457496643066, rank=57, decoded_token=None), 1396: Logprob(logprob=-2.5929572582244873, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.027499310672283173, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.23535610735416412, rank=1, decoded_token=None)}, {966: Logprob(logprob=-4.081752777099609, rank=3, decoded_token=None), 605: Logprob(logprob=-3.8317525386810303, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-6.079629898071289, rank=50, decoded_token=None), 4236: Logprob(logprob=-1.7046300172805786, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.493253231048584, rank=7, decoded_token=None), 31408: Logprob(logprob=-1.9932533502578735, rank=1, decoded_token=None)}, {1514: Logprob(logprob=-1.6049902439117432, rank=2, decoded_token=None), 387: Logprob(logprob=-0.9799902439117432, rank=1, decoded_token=None)}, {19794: Logprob(logprob=-4.2269792556762695, rank=6, decoded_token=None), 304: Logprob(logprob=-0.7269791960716248, rank=1, decoded_token=None)}, {520: Logprob(logprob=-2.5716304779052734, rank=4, decoded_token=None), 304: Logprob(logprob=-0.6966304779052734, rank=1, decoded_token=None)}, {264: Logprob(logprob=-0.8206021785736084, rank=1, decoded_token=None)}, {6246: Logprob(logprob=-5.323214530944824, rank=24, decoded_token=None), 16520: Logprob(logprob=-1.0732142925262451, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.8638421297073364, rank=1, decoded_token=None)}, {2684: Logprob(logprob=-3.016662120819092, rank=7, decoded_token=None), 1442: Logprob(logprob=-1.7666622400283813, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.6918129324913025, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.022499410435557365, rank=1, decoded_token=None)}, {7041: Logprob(logprob=-3.962672472000122, rank=6, decoded_token=None), 220: Logprob(logprob=-0.3376724421977997, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3280467987060547, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.23579740524292, rank=1, decoded_token=None), 17: Logprob(logprob=-2.23579740524292, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-0.6167428493499756, rank=1, decoded_token=None)}, {389: Logprob(logprob=-2.094090461730957, rank=4, decoded_token=None), 505: Logprob(logprob=-1.719090461730957, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-1.238318681716919, rank=2, decoded_token=None), 279: Logprob(logprob=-0.4883187413215637, rank=1, decoded_token=None)}, {2128: Logprob(logprob=-0.10444443672895432, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.15527960658073425, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-2.8790693283081055, rank=4, decoded_token=None), 2650: Logprob(logprob=-1.004069447517395, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-1.269631266593933, rank=2, decoded_token=None), 315: Logprob(logprob=-1.019631266593933, rank=1, decoded_token=None)}, {12722: Logprob(logprob=-4.804388999938965, rank=9, decoded_token=None), 374: Logprob(logprob=-0.5543891191482544, rank=1, decoded_token=None)}, {15100: Logprob(logprob=-3.970444679260254, rank=7, decoded_token=None), 16964: Logprob(logprob=-0.5954446792602539, rank=1, decoded_token=None)}, {1268: Logprob(logprob=-1.029451847076416, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.8737099170684814, rank=3, decoded_token=None), 279: Logprob(logprob=-1.2487099170684814, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-1.841010332107544, rank=2, decoded_token=None), 8417: Logprob(logprob=-1.091010332107544, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.113349549472332, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.29112255573272705, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.009947842918336391, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.8003526926040649, rank=1, decoded_token=None)}, {4460: Logprob(logprob=-3.4189629554748535, rank=3, decoded_token=None), 430: Logprob(logprob=-0.7939630150794983, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9348305463790894, rank=2, decoded_token=None), 311: Logprob(logprob=-0.8098305463790894, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.037669867277145386, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0022645562421530485, rank=1, decoded_token=None)}, {2758: Logprob(logprob=-3.4584977626800537, rank=8, decoded_token=None), 578: Logprob(logprob=-2.0834977626800537, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3807215392589569, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.9317857027053833, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.39621296525001526, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.3208718299865723, rank=2, decoded_token=None), 279: Logprob(logprob=-0.44587182998657227, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.10219656676054001, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.7788331508636475, rank=2, decoded_token=None), 627: Logprob(logprob=-0.7788332104682922, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.45813241600990295, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.933356761932373, rank=4, decoded_token=None), 279: Logprob(logprob=-0.05835668370127678, rank=1, decoded_token=None)}, {1758: Logprob(logprob=-0.9147714376449585, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.909633994102478, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.44750797748565674, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0014780559577047825, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001387499796692282, rank=1, decoded_token=None)}, {64002: Logprob(logprob=-2.5448737144470215, rank=3, decoded_token=None), 94310: Logprob(logprob=-0.544873833656311, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04134264215826988, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.1306612491607666, rank=1, decoded_token=None)}, {555: Logprob(logprob=-0.03507496044039726, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0044165924191474915, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.013939524069428444, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.09804058820009232, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.0629529133439064, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.240189328789711, rank=1, decoded_token=None)}, {21: Logprob(logprob=-0.03781026229262352, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.01011602021753788, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.05886910483241081, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0013978243805468082, rank=1, decoded_token=None)}, {13: Logprob(logprob=-9.798523387871683e-05, rank=1, decoded_token=None)}, {72159: Logprob(logprob=-1.417578935623169, rank=2, decoded_token=None), 94310: Logprob(logprob=-0.792578935623169, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.02184729278087616, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.16513295471668243, rank=1, decoded_token=None)}, {323: Logprob(logprob=-5.760368347167969, rank=2, decoded_token=None), 555: Logprob(logprob=-0.010368410497903824, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.004999872762709856, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.10827615857124329, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.17176643013954163, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.027458835393190384, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04579097405076027, rank=1, decoded_token=None)}, {3965: Logprob(logprob=-0.16355350613594055, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.10822748392820358, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.008487226441502571, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0020695950370281935, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.000342191313393414, rank=1, decoded_token=None)}, {94310: Logprob(logprob=-0.7333000302314758, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.024686889722943306, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.6213490962982178, rank=1, decoded_token=None)}, {505: Logprob(logprob=-0.10929779708385468, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.010756724514067173, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.05260276049375534, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.02710282802581787, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.014247246086597443, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04090675339102745, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.008638868108391762, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.0173895675688982, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.05997175723314285, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.00443486962467432, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0005690624238923192, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.335664987564087, rank=3, decoded_token=None), 356: Logprob(logprob=-1.210664987564087, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.20828098058700562, rank=1, decoded_token=None)}, {32: Logprob(logprob=-1.9398690462112427, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-5.220652103424072, rank=28, decoded_token=None), 2860: Logprob(logprob=-3.0956521034240723, rank=1, decoded_token=None)}, {31878: Logprob(logprob=-1.599919319152832, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.733023762702942, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-8.531267166137695, rank=187, decoded_token=None), 18: Logprob(logprob=-2.531266689300537, rank=1, decoded_token=None)}, {2204: Logprob(logprob=-2.716043472290039, rank=2, decoded_token=None), 13840: Logprob(logprob=-2.466043472290039, rank=1, decoded_token=None)}, {8146: Logprob(logprob=-5.786083698272705, rank=26, decoded_token=None), 4595: Logprob(logprob=-1.411083698272705, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.025601888075470924, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-3.9537112712860107, rank=11, decoded_token=None), 37824: Logprob(logprob=-2.8287112712860107, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.3711868226528168, rank=1, decoded_token=None)}, {2435: Logprob(logprob=-4.847472190856934, rank=13, decoded_token=None), 1442: Logprob(logprob=-1.4724724292755127, rank=1, decoded_token=None)}, {617: Logprob(logprob=-1.45283043384552, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.8435330986976624, rank=1, decoded_token=None)}, {914: Logprob(logprob=-4.36965799331665, rank=21, decoded_token=None), 18: Logprob(logprob=-2.9946579933166504, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-4.7997283935546875, rank=13, decoded_token=None), 2204: Logprob(logprob=-1.0497283935546875, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.16669881343841553, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-2.0677084922790527, rank=2, decoded_token=None), 2579: Logprob(logprob=-1.8177084922790527, rank=1, decoded_token=None)}, {1933: Logprob(logprob=-0.1227213442325592, rank=1, decoded_token=None)}, {304: Logprob(logprob=-3.446204662322998, rank=5, decoded_token=None), 13: Logprob(logprob=-0.4462047219276428, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-7.250609874725342, rank=17, decoded_token=None), 5708: Logprob(logprob=-0.25060996413230896, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.1065310388803482, rank=1, decoded_token=None)}, {578: Logprob(logprob=-2.566020965576172, rank=5, decoded_token=None), 2650: Logprob(logprob=-1.3160210847854614, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.9273428916931152, rank=3, decoded_token=None), 3637: Logprob(logprob=-0.8023430109024048, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.08843708783388138, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.6100079417228699, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.7515377402305603, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-2.1421217918395996, rank=2, decoded_token=None), 1855: Logprob(logprob=-0.5171217322349548, rank=1, decoded_token=None)}, {279: Logprob(logprob=-3.456434965133667, rank=6, decoded_token=None), 304: Logprob(logprob=-1.331434965133667, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.02585725486278534, rank=1, decoded_token=None)}, {706: Logprob(logprob=-0.38343092799186707, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.708461880683899, rank=2, decoded_token=None), 374: Logprob(logprob=-1.083461880683899, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.23030529916286469, rank=1, decoded_token=None)}, {649: Logprob(logprob=-2.6108829975128174, rank=2, decoded_token=None), 374: Logprob(logprob=-0.36088305711746216, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.057374272495508194, rank=1, decoded_token=None)}, {1766: Logprob(logprob=-2.6309587955474854, rank=4, decoded_token=None), 5439: Logprob(logprob=-1.1309587955474854, rank=1, decoded_token=None)}, {1701: Logprob(logprob=-2.2968969345092773, rank=2, decoded_token=None), 555: Logprob(logprob=-0.17189693450927734, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.41828861832618713, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-3.6377298831939697, rank=7, decoded_token=None), 6037: Logprob(logprob=-1.2627298831939697, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-4.555124759674072, rank=14, decoded_token=None), 220: Logprob(logprob=-1.3051248788833618, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.17938224971294403, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.9476473331451416, rank=2, decoded_token=None), 3639: Logprob(logprob=-1.1976473331451416, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-0.4874989986419678, rank=1, decoded_token=None)}, {25800: Logprob(logprob=-3.846048593521118, rank=9, decoded_token=None), 11: Logprob(logprob=-1.7835485935211182, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.18882788717746735, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.07510089874267578, rank=1, decoded_token=None)}, {13: Logprob(logprob=-2.343728542327881, rank=3, decoded_token=None), 284: Logprob(logprob=-1.5937285423278809, rank=1, decoded_token=None)}, {2650: Logprob(logprob=-3.1135451793670654, rank=3, decoded_token=None), 3639: Logprob(logprob=-0.6135452389717102, rank=1, decoded_token=None)}, {1690: Logprob(logprob=-0.08424817770719528, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.7079728245735168, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.14217698574066162, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-0.18304136395454407, rank=1, decoded_token=None)}, {1587: Logprob(logprob=-0.9694701433181763, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.025537513196468353, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.003264813916757703, rank=1, decoded_token=None)}, {617: Logprob(logprob=-0.09910587221384048, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.1510932743549347, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.03838161751627922, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.09627294540405273, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.07186505943536758, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.002630585338920355, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021421492099761963, rank=1, decoded_token=None)}, {25541: Logprob(logprob=-10.88266658782959, rank=909, decoded_token=None), 7699: Logprob(logprob=-2.2576663494110107, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.7218905091285706, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0011835244949907064, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00015138434537220746, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0014886498684063554, rank=1, decoded_token=None)}, {17: Logprob(logprob=-3.907280206680298, rank=6, decoded_token=None), 7699: Logprob(logprob=-3.032280206680298, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.0223177969455719, rank=1, decoded_token=None)}, {21129: Logprob(logprob=-5.540557861328125, rank=44, decoded_token=None), 2636: Logprob(logprob=-3.540557622909546, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.008849094621837139, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.00032646095496602356, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001445904199499637, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0016035091830417514, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.3098583221435547, rank=2, decoded_token=None), 20: Logprob(logprob=-2.1848583221435547, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.006650575902312994, rank=1, decoded_token=None)}, {24599: Logprob(logprob=-6.172876358032227, rank=80, decoded_token=None), 21129: Logprob(logprob=-2.5478761196136475, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.004533370956778526, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0005069877952337265, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002643712505232543, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.00395266804844141, rank=1, decoded_token=None)}, {19: Logprob(logprob=-2.4699602127075195, rank=3, decoded_token=None), 18: Logprob(logprob=-0.84496009349823, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.0012282931711524725, rank=1, decoded_token=None)}, {5154: Logprob(logprob=-5.722906112670898, rank=71, decoded_token=None), 18070: Logprob(logprob=-2.8479063510894775, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.48243021965026855, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004707326181232929, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0004094000905752182, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.0903127193450928, rank=1, decoded_token=None), 362: Logprob(logprob=-1.0903127193450928, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.21004998683929443, rank=1, decoded_token=None)}, {23956: Logprob(logprob=-3.7082245349884033, rank=5, decoded_token=None), 32: Logprob(logprob=-1.7082245349884033, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-2.328795909881592, rank=3, decoded_token=None), 315: Logprob(logprob=-1.4537959098815918, rank=1, decoded_token=None)}, {374: Logprob(logprob=-1.3939491510391235, rank=1, decoded_token=None)}, {13890: Logprob(logprob=-0.3086131513118744, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.004158303141593933, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.5719388723373413, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.611593246459961, rank=3, decoded_token=None), 17: Logprob(logprob=-2.486593246459961, rank=1, decoded_token=None)}, {865: Logprob(logprob=-3.814181327819824, rank=6, decoded_token=None), 25800: Logprob(logprob=-0.9391812086105347, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.21246875822544098, rank=1, decoded_token=None)}, {24: Logprob(logprob=-3.2393479347229004, rank=8, decoded_token=None), 17: Logprob(logprob=-2.1143479347229004, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9484657645225525, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.02641945704817772, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0019446763908490539, rank=1, decoded_token=None)}, {320: Logprob(logprob=-4.043663024902344, rank=2, decoded_token=None), 220: Logprob(logprob=-0.0436631478369236, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3292904496192932, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7795792818069458, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.019342729821801186, rank=1, decoded_token=None)}, {19: Logprob(logprob=-3.8902170658111572, rank=6, decoded_token=None), 24: Logprob(logprob=-0.2652171552181244, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.05693596974015236, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7711688876152039, rank=1, decoded_token=None)}, {320: Logprob(logprob=-1.7098952531814575, rank=2, decoded_token=None), 220: Logprob(logprob=-0.2098952829837799, rank=1, decoded_token=None)}, {21: Logprob(logprob=-3.9887096881866455, rank=6, decoded_token=None), 20: Logprob(logprob=-0.8637097477912903, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.05180598795413971, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006352707277983427, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.6478800773620605, rank=5, decoded_token=None), 18: Logprob(logprob=-1.1478800773620605, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.06078224629163742, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0037563731893897057, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00020287363440729678, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.5973082780838013, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3547166585922241, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.1522906869649887, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.119587242603302, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.250182867050171, rank=4, decoded_token=None), 24: Logprob(logprob=-1.250182867050171, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.21551699936389923, rank=1, decoded_token=None)}, {489: Logprob(logprob=-4.195828914642334, rank=3, decoded_token=None), 865: Logprob(logprob=-0.0708288699388504, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.3979986310005188, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.6019997596740723, rank=3, decoded_token=None), 21: Logprob(logprob=-1.2269997596740723, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.012111456133425236, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.02054995857179165, rank=1, decoded_token=None)}, {19: Logprob(logprob=-1.0867620706558228, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.14609402418136597, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0014072287594899535, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00014137222024146467, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.401207834482193, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.18403267860412598, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.15473514795303345, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.06539695709943771, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.4415698051452637, rank=3, decoded_token=None), 19: Logprob(logprob=-1.1915698051452637, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.11237519979476929, rank=1, decoded_token=None)}, {489: Logprob(logprob=-0.7666293382644653, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.39565205574035645, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.5823985934257507, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.031112726777791977, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.06674905866384506, rank=1, decoded_token=None)}, {24: Logprob(logprob=-1.1196229457855225, rank=2, decoded_token=None), 19: Logprob(logprob=-0.9946228861808777, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.013978317379951477, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.000894146622158587, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002002515539061278, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.19024042785167694, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.08259163796901703, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.11528829485177994, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04026882350444794, rank=1, decoded_token=None)}, {24: Logprob(logprob=-0.6260170340538025, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.025457678362727165, rank=1, decoded_token=None)}, {865: Logprob(logprob=-4.2807393074035645, rank=4, decoded_token=None), 489: Logprob(logprob=-0.15573909878730774, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.06027596443891525, rank=1, decoded_token=None)}, {21: Logprob(logprob=-1.8035647869110107, rank=2, decoded_token=None), 20: Logprob(logprob=-0.42856475710868835, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.025070033967494965, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.002612869720906019, rank=1, decoded_token=None)}, {24: Logprob(logprob=-4.944259166717529, rank=4, decoded_token=None), 20: Logprob(logprob=-0.19425919651985168, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.016041269525885582, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004313688259571791, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0003240775258745998, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.1086416244506836, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.18588051199913025, rank=1, decoded_token=None)}, {83445: Logprob(logprob=-9.345852851867676, rank=591, decoded_token=None), 32: Logprob(logprob=-1.8458532094955444, rank=1, decoded_token=None)}, {25173: Logprob(logprob=-6.057316780090332, rank=17, decoded_token=None), 279: Logprob(logprob=-0.5573167204856873, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.6035754680633545, rank=4, decoded_token=None), 18: Logprob(logprob=-2.3535754680633545, rank=1, decoded_token=None)}, {2120: Logprob(logprob=-4.8119587898254395, rank=15, decoded_token=None), 489: Logprob(logprob=-1.811958909034729, rank=1, decoded_token=None)}, {25173: Logprob(logprob=-1.6099052429199219, rank=2, decoded_token=None), 489: Logprob(logprob=-0.6099051833152771, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.12789200246334076, rank=1, decoded_token=None)}, {18: Logprob(logprob=-1.5132516622543335, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.6997661590576172, rank=1, decoded_token=None)}, {369: Logprob(logprob=-2.233518362045288, rank=3, decoded_token=None), 489: Logprob(logprob=-0.8585184216499329, rank=1, decoded_token=None)}, {865: Logprob(logprob=-1.3948338031768799, rank=2, decoded_token=None), 279: Logprob(logprob=-0.8948337435722351, rank=1, decoded_token=None)}, {284: Logprob(logprob=-0.06370629370212555, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.5985791683197021, rank=1, decoded_token=None)}, {17: Logprob(logprob=-1.9561364650726318, rank=3, decoded_token=None), 16: Logprob(logprob=-1.8311364650726318, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.5157890915870667, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.04689118638634682, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0020582936704158783, rank=1, decoded_token=None)}, {25173: Logprob(logprob=-0.5630612373352051, rank=1, decoded_token=None)}, {19: Logprob(logprob=-3.1775267124176025, rank=6, decoded_token=None), 21: Logprob(logprob=-0.9275267124176025, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.006182474084198475, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0009446449112147093, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00011395759065635502, rank=1, decoded_token=None)}, {25173: Logprob(logprob=-0.4082798957824707, rank=1, decoded_token=None)}, {17: Logprob(logprob=-1.7366771697998047, rank=2, decoded_token=None), 21: Logprob(logprob=-1.2366771697998047, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.017647743225097656, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.001081358641386032, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00011836781777674332, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.5549273490905762, rank=1, decoded_token=None)}, {605: Logprob(logprob=-5.195494651794434, rank=9, decoded_token=None), 17: Logprob(logprob=-0.6954944133758545, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0038563660345971584, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0010650444310158491, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00021228920377325267, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.13738475739955902, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.6242997646331787, rank=4, decoded_token=None), 21: Logprob(logprob=-1.6242997646331787, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0686674565076828, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.003958011511713266, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.00034767304896377027, rank=1, decoded_token=None)}, {426: Logprob(logprob=-0.8255325555801392, rank=1, decoded_token=None)}], outputs=[CompletionOutput(index=0, text='', token_ids=(271,), cumulative_logprob=None, logprobs=None, finish_reason=length, stop_reason=None)], finished=True, metrics=RequestMetrics(arrival_time=1732330219.9139628, last_token_time=1732330219.9139628, first_scheduled_time=1732330219.9404528, first_token_time=1732330220.0975826, time_in_queue=0.026489973068237305, finished_time=1732330220.098564, scheduler_time=0.002440982001644443, model_forward_time=None, model_execute_time=None), lora_request=None, num_cached_tokens=0)]
Requests returned from model:  [(-1.1178319454193115, True), (-1.1178319454193115, True), (-1.4928319454193115, False), (-2.1178319454193115, False), (-1.0755325555801392, False), (-0.8255325555801392, True), (-1.8255325555801392, False), (-2.8255324363708496, False)]
vllm (pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42), gen_kwargs: (None), limit: 2.0, num_fewshot: None, batch_size: auto
|  Tasks  |Version|Filter|n-shot| Metric |   |Value|   |Stderr|
|---------|------:|------|-----:|--------|---|----:|---|-----:|
|meta_mmlu|      1|none  |     0|acc     |↑  |    0|±  |     0|
|         |       |none  |     0|acc_norm|↑  |    0|±  |     0|

[rank0]:[W1123 02:50:22.231676133 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
end: Sat Nov 23 02:50:25 UTC 2024
Sat Nov 23 03:14:39 UTC 2024 - running command: lm_eval --model vllm --model_args pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42 --tasks meta_mmlu --batch_size auto --output_path eval_results --seed 42 --log_samples --limit 1
nohup: ignoring input
2024-11-23:03:14:49,455 INFO     [__main__.py:279] Verbosity set to INFO
2024-11-23:03:15:05,285 WARNING  [__main__.py:312]  --limit SHOULD ONLY BE USED FOR TESTING.REAL METRICS SHOULD NOT BE COMPUTED USING LIMIT.
2024-11-23:03:15:05,286 INFO     [__main__.py:376] Selected Tasks: ['meta_mmlu']
2024-11-23:03:15:05,295 INFO     [evaluator.py:164] Setting random seed to 42 | Setting numpy seed to 42 | Setting torch manual seed to 42 | Setting fewshot manual seed to 42
2024-11-23:03:15:05,295 INFO     [evaluator.py:201] Initializing vllm model, with arguments: {'pretrained': 'meta-llama/Llama-3.2-1B', 'tensor_parallel_size': 1, 'dtype': 'auto', 'gpu_memory_utilization': 0.25, 'data_parallel_size': 1, 'max_model_len': 8192, 'add_bos_token': True, 'seed': 42}
INFO 11-23 03:15:14 config.py:350] This model supports multiple tasks: {'generate', 'embedding'}. Defaulting to 'generate'.
INFO 11-23 03:15:14 llm_engine.py:249] Initializing an LLM engine (v0.6.4.post1) with config: model='meta-llama/Llama-3.2-1B', speculative_config=None, tokenizer='meta-llama/Llama-3.2-1B', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=42, served_model_name=meta-llama/Llama-3.2-1B, num_scheduler_steps=1, chunked_prefill_enabled=False multi_step_stream_outputs=True, enable_prefix_caching=False, use_async_output_proc=True, use_cached_outputs=False, chat_template_text_format=string, mm_processor_kwargs=None, pooler_config=None)
INFO 11-23 03:15:15 selector.py:135] Using Flash Attention backend.
INFO 11-23 03:15:15 model_runner.py:1072] Starting to load model meta-llama/Llama-3.2-1B...
INFO 11-23 03:15:15 weight_utils.py:243] Using model weights format ['*.safetensors']
INFO 11-23 03:15:15 weight_utils.py:288] No model.safetensors.index.json found in remote.
Loading safetensors checkpoint shards:   0% Completed | 0/1 [00:00<?, ?it/s]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:01<00:00,  1.84s/it]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:01<00:00,  1.84s/it]

INFO 11-23 03:15:17 model_runner.py:1077] Loading model weights took 2.3185 GB
INFO 11-23 03:15:18 worker.py:232] Memory profiling results: total_gpu_memory=39.38GiB initial_memory_usage=2.82GiB peak_torch_memory=3.52GiB memory_usage_post_profile=2.84GiB non_torch_memory=0.51GiB kv_cache_size=5.81GiB gpu_memory_utilization=0.25
INFO 11-23 03:15:18 gpu_executor.py:113] # GPU blocks: 11900, # CPU blocks: 8192
INFO 11-23 03:15:18 gpu_executor.py:117] Maximum concurrency for 8192 tokens per request: 23.24x
INFO 11-23 03:15:21 model_runner.py:1400] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 11-23 03:15:21 model_runner.py:1404] If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 11-23 03:15:34 model_runner.py:1518] Graph capturing finished in 12 secs, took 0.14 GiB
2024-11-23:03:15:35,635 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
2024-11-23:03:15:35,647 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
2024-11-23:03:15:37,673 INFO     [task.py:415] Building contexts for meta_mmlu on rank 0...
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00, 13662.23it/s]
2024-11-23:03:15:37,694 INFO     [evaluator.py:496] Running loglikelihood requests
Running loglikelihood requests:   0%|          | 0/4 [00:00<?, ?it/s]
Processed prompts:   0%|          | 0/4 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s][A
Processed prompts:  25%|██▌       | 1/4 [00:00<00:00,  9.57it/s, est. speed input: 5059.21 toks/s, output: 9.57 toks/s][AProcessed prompts: 100%|██████████| 4/4 [00:00<00:00, 37.23it/s, est. speed input: 19706.99 toks/s, output: 37.29 toks/s]
Running loglikelihood requests:  25%|██▌       | 1/4 [00:00<00:00,  8.66it/s]Running loglikelihood requests: 100%|██████████| 4/4 [00:00<00:00, 32.83it/s]
2024-11-23:03:15:39,907 INFO     [evaluation_tracker.py:206] Saving results aggregated
2024-11-23:03:15:39,913 INFO     [evaluation_tracker.py:287] Saving per-sample results for: meta_mmlu
Input:  [128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 11874, 4459, 5219, 617, 264, 3325, 4279, 5361, 315, 220, 1399, 13, 9062, 1396, 374, 2753, 1109, 477, 6273, 311, 220, 717, 13, 578, 12474, 4279, 8331, 315, 279, 1403, 5219, 285, 220, 17, 13, 3639, 527, 279, 1403, 5219, 5380, 32, 13, 220, 21, 323, 220, 605, 198, 33, 13, 220, 20, 323, 220, 717, 198, 34, 13, 220, 605, 323, 220, 717, 198, 35, 13, 220, 717, 323, 220, 868, 198, 16533, 25, 356]
Output:  RequestOutput(request_id=0, prompt=None, prompt_token_ids=[128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 11874, 4459, 5219, 617, 264, 3325, 4279, 5361, 315, 220, 1399, 13, 9062, 1396, 374, 2753, 1109, 477, 6273, 311, 220, 717, 13, 578, 12474, 4279, 8331, 315, 279, 1403, 5219, 285, 220, 17, 13, 3639, 527, 279, 1403, 5219, 5380, 32, 13, 220, 21, 323, 220, 605, 198, 33, 13, 220, 20, 323, 220, 717, 198, 34, 13, 220, 605, 323, 220, 717, 198, 35, 13, 220, 717, 323, 220, 868, 198, 16533, 25, 356], encoder_prompt=None, encoder_prompt_token_ids=None, prompt_logprobs=[None, {791: Logprob(logprob=-3.588294506072998, rank=4, decoded_token=None), 14924: Logprob(logprob=-1.213294506072998, rank=1, decoded_token=None)}, {2768: Logprob(logprob=-4.304756164550781, rank=2, decoded_token=None), 220: Logprob(logprob=-3.6797564029693604, rank=1, decoded_token=None)}, {527: Logprob(logprob=-2.969231605529785, rank=3, decoded_token=None), 374: Logprob(logprob=-1.9692317247390747, rank=1, decoded_token=None)}, {5361: Logprob(logprob=-9.316919326782227, rank=700, decoded_token=None), 279: Logprob(logprob=-1.566918969154358, rank=1, decoded_token=None)}, {5873: Logprob(logprob=-1.1169946193695068, rank=1, decoded_token=None)}, {4860: Logprob(logprob=-0.15302471816539764, rank=1, decoded_token=None)}, {320: Logprob(logprob=-3.3894879817962646, rank=9, decoded_token=None), 389: Logprob(logprob=-1.7644879817962646, rank=1, decoded_token=None)}, {4291: Logprob(logprob=-3.562437057495117, rank=2, decoded_token=None), 11865: Logprob(logprob=-0.562437117099762, rank=1, decoded_token=None)}, {11503: Logprob(logprob=-0.9702798128128052, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.4542173743247986, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.899801015853882, rank=4, decoded_token=None), 389: Logprob(logprob=-1.3998010158538818, rank=1, decoded_token=None)}, {36256: Logprob(logprob=-8.734892845153809, rank=631, decoded_token=None), 279: Logprob(logprob=-1.1098928451538086, rank=1, decoded_token=None)}, {38696: Logprob(logprob=-3.7674813270568848, rank=8, decoded_token=None), 19320: Logprob(logprob=-2.1424813270568848, rank=1, decoded_token=None)}, {382: Logprob(logprob=-5.597833156585693, rank=19, decoded_token=None), 13: Logprob(logprob=-1.097833275794983, rank=1, decoded_token=None)}, {791: Logprob(logprob=-3.544769287109375, rank=4, decoded_token=None), 16: Logprob(logprob=-1.4197694063186646, rank=1, decoded_token=None)}, {7187: Logprob(logprob=-7.414687633514404, rank=167, decoded_token=None), 2768: Logprob(logprob=-2.3521876335144043, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.11540365219116211, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.7252726554870605, rank=2, decoded_token=None), 264: Logprob(logprob=-0.4752727150917053, rank=1, decoded_token=None)}, {3363: Logprob(logprob=-1.8480002880096436, rank=1, decoded_token=None)}, {1405: Logprob(logprob=-5.9969987869262695, rank=13, decoded_token=None), 315: Logprob(logprob=-0.24699899554252625, rank=1, decoded_token=None)}, {33126: Logprob(logprob=-9.10548210144043, rank=325, decoded_token=None), 358: Logprob(logprob=-1.292981743812561, rank=1, decoded_token=None)}, {574: Logprob(logprob=-5.349006652832031, rank=8, decoded_token=None), 6439: Logprob(logprob=-0.4740064740180969, rank=1, decoded_token=None)}, {9405: Logprob(logprob=-0.40580296516418457, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.5615864396095276, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.7438945174217224, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-7.263688087463379, rank=140, decoded_token=None), 1041: Logprob(logprob=-2.638688087463379, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.7120769619941711, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-8.756370544433594, rank=570, decoded_token=None), 931: Logprob(logprob=-0.38137099146842957, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.46257808804512024, rank=1, decoded_token=None)}, {3639: Logprob(logprob=-4.10749626159668, rank=8, decoded_token=None), 578: Logprob(logprob=-1.2324963808059692, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.29674193263053894, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.1783972829580307, rank=1, decoded_token=None)}, {907: Logprob(logprob=-5.722339153289795, rank=27, decoded_token=None), 7187: Logprob(logprob=-0.8473392128944397, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.03685179725289345, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.9906996488571167, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.191212177276611, rank=12, decoded_token=None), 7187: Logprob(logprob=-1.1912120580673218, rank=1, decoded_token=None)}, {20: Logprob(logprob=-3.4952895641326904, rank=3, decoded_token=None), 605: Logprob(logprob=-2.9952895641326904, rank=1, decoded_token=None)}, {304: Logprob(logprob=-6.860769271850586, rank=33, decoded_token=None), 339: Logprob(logprob=-0.4857691526412964, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.4738154709339142, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.81992244720459, rank=9, decoded_token=None), 2768: Logprob(logprob=-1.5699224472045898, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.851509690284729, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-0.4733523726463318, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.3776562213897705, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-0.04871302843093872, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-3.7120940685272217, rank=5, decoded_token=None), 1980: Logprob(logprob=-0.8370941281318665, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.0033669471740723, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.2580585777759552, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.20247121155261993, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.971443772315979, rank=1, decoded_token=None)}, {9214: Logprob(logprob=-7.329587459564209, rank=44, decoded_token=None), 11: Logprob(logprob=-0.6420875191688538, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.33627015352249146, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.003795088967308402, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0006998711614869535, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021235832944512367, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.1533547639846802, rank=1, decoded_token=None)}, {11758: Logprob(logprob=-1.9098384380340576, rank=2, decoded_token=None), 11990: Logprob(logprob=-1.4098384380340576, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.007843528874218464, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0015495923580601811, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0005785936955362558, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006402693688869476, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.09296748787164688, rank=1, decoded_token=None)}, {22781: Logprob(logprob=-0.6998193264007568, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0074472189880907536, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0022168601863086224, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0005930095794610679, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.019136684015393257, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.05925050005316734, rank=1, decoded_token=None)}, {6305: Logprob(logprob=-0.6276966333389282, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.2591150999069214, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.909871518611908, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.060657717287540436, rank=1, decoded_token=None)}, {362: Logprob(logprob=-1.2651628255844116, rank=2, decoded_token=None), 423: Logprob(logprob=-1.1401628255844116, rank=1, decoded_token=None)}, {271: Logprob(logprob=-1.236945629119873, rank=2, decoded_token=None), 128001: Logprob(logprob=-0.7369455695152283, rank=1, decoded_token=None)}, {43819: Logprob(logprob=-12.281052589416504, rank=2698, decoded_token=None), 791: Logprob(logprob=-0.8435525894165039, rank=1, decoded_token=None)}, {21475: Logprob(logprob=-0.7285953164100647, rank=1, decoded_token=None)}, {1511: Logprob(logprob=-6.596356391906738, rank=50, decoded_token=None), 374: Logprob(logprob=-2.0338563919067383, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.3166232109069824, rank=3, decoded_token=None), 264: Logprob(logprob=-1.3166230916976929, rank=1, decoded_token=None)}, {6037: Logprob(logprob=-6.134354591369629, rank=53, decoded_token=None), 15150: Logprob(logprob=-2.509354829788208, rank=1, decoded_token=None)}, {330: Logprob(logprob=-3.653575897216797, rank=9, decoded_token=None), 315: Logprob(logprob=-1.5285758972167969, rank=1, decoded_token=None)}, {2261: Logprob(logprob=-4.241303443908691, rank=15, decoded_token=None), 2746: Logprob(logprob=-2.6163032054901123, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.6807642579078674, rank=1, decoded_token=None)}, {806: Logprob(logprob=-4.885201930999756, rank=18, decoded_token=None), 20: Logprob(logprob=-1.3852018117904663, rank=1, decoded_token=None)}, {1: Logprob(logprob=-1.440927505493164, rank=2, decoded_token=None), 311: Logprob(logprob=-0.9409274458885193, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.5772078633308411, rank=1, decoded_token=None)}, {1893: Logprob(logprob=-6.191239356994629, rank=44, decoded_token=None), 1505: Logprob(logprob=-1.5662392377853394, rank=1, decoded_token=None)}, {279: Logprob(logprob=-1.369935393333435, rank=2, decoded_token=None), 264: Logprob(logprob=-0.7449353933334351, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.322933554649353, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-6.340333938598633, rank=23, decoded_token=None), 220: Logprob(logprob=-0.2778337895870209, rank=1, decoded_token=None)}, {6982: Logprob(logprob=-3.008331298828125, rank=5, decoded_token=None), 220: Logprob(logprob=-1.2583311796188354, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-0.696544349193573, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.47080329060554504, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.408674716949463, rank=9, decoded_token=None), 3639: Logprob(logprob=-0.7836745381355286, rank=1, decoded_token=None)}, {605: Logprob(logprob=-4.432986259460449, rank=13, decoded_token=None), 16: Logprob(logprob=-2.18298602104187, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.9232057332992554, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.13041946291923523, rank=1, decoded_token=None)}, {1691: Logprob(logprob=-0.8227146863937378, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.007162133697420359, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.016214758157730103, rank=1, decoded_token=None)}, {843: Logprob(logprob=-0.13016277551651, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.03512261062860489, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.20052661001682281, rank=1, decoded_token=None)}, {3391: Logprob(logprob=-0.02468840219080448, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.08266056329011917, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3703943192958832, rank=1, decoded_token=None)}, {4370: Logprob(logprob=-0.017463840544223785, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-9.801653861999512, rank=120, decoded_token=None), 11: Logprob(logprob=-0.17665395140647888, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-4.195326805114746, rank=8, decoded_token=None), 1396: Logprob(logprob=-1.070326566696167, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.4466686248779297, rank=2, decoded_token=None), 374: Logprob(logprob=-0.44666874408721924, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.517330527305603, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.113140106201172, rank=3, decoded_token=None), 6037: Logprob(logprob=-0.8631401658058167, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.443703293800354, rank=2, decoded_token=None), 220: Logprob(logprob=-1.318703293800354, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.23402449488639832, rank=1, decoded_token=None)}, {837: Logprob(logprob=-0.6284106373786926, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.37667617201805115, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.0740572139620781, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.009778810665011406, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.5895971655845642, rank=1, decoded_token=None)}, {220: Logprob(logprob=-2.43047833442688, rank=5, decoded_token=None), 1176: Logprob(logprob=-2.05547833442688, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.1376230716705322, rank=3, decoded_token=None), 806: Logprob(logprob=-1.8876230716705322, rank=1, decoded_token=None)}, {339: Logprob(logprob=-0.6972476840019226, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.1368379592895508, rank=2, decoded_token=None), 4751: Logprob(logprob=-0.5118379592895508, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.17106032371521, rank=2, decoded_token=None), 374: Logprob(logprob=-0.54606032371521, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.014991242438554764, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.19605356454849243, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.600100040435791, rank=2, decoded_token=None), 374: Logprob(logprob=-0.10010002553462982, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.20332926511764526, rank=1, decoded_token=None)}, {459: Logprob(logprob=-4.175275802612305, rank=6, decoded_token=None), 220: Logprob(logprob=-0.5502755641937256, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.4642753601074219, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.02154143527150154, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.20088475942611694, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.002081967191770673, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0003781795676331967, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.056677043437957764, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.308137893676758, rank=4, decoded_token=None), 220: Logprob(logprob=-0.3081379532814026, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.6069552898406982, rank=4, decoded_token=None), 220: Logprob(logprob=-1.8569552898406982, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.774920642375946, rank=1, decoded_token=None)}, {2646: Logprob(logprob=-3.097163200378418, rank=8, decoded_token=None), 3136: Logprob(logprob=-1.8471633195877075, rank=1, decoded_token=None)}, {617: Logprob(logprob=-2.366727113723755, rank=3, decoded_token=None), 842: Logprob(logprob=-1.1167271137237549, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.652055263519287, rank=7, decoded_token=None), 264: Logprob(logprob=-0.9020552039146423, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-2.718801498413086, rank=4, decoded_token=None), 24871: Logprob(logprob=-0.7188013792037964, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.0695536658167839, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-3.1284074783325195, rank=4, decoded_token=None), 304: Logprob(logprob=-0.87840735912323, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.013708023354411125, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-0.05030599236488342, rank=1, decoded_token=None)}, {1023: Logprob(logprob=-0.0032524564303457737, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03535380959510803, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.010325347073376179, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00024101213784888387, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.140742689371109, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-5.092126846313477, rank=9, decoded_token=None), 1396: Logprob(logprob=-0.8421266674995422, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.4843006134033203, rank=4, decoded_token=None), 1396: Logprob(logprob=-0.23430049419403076, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.11257536709308624, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.3171550929546356, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.00759677030146122, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.02107418328523636, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.09753574430942535, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.4928134083747864, rank=1, decoded_token=None)}, {459: Logprob(logprob=-3.0057926177978516, rank=5, decoded_token=None), 220: Logprob(logprob=-1.7557926177978516, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.8141931891441345, rank=2, decoded_token=None), 10535: Logprob(logprob=-0.6891931891441345, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.07718711346387863, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-7.487396240234375, rank=28, decoded_token=None), 627: Logprob(logprob=-0.6123961806297302, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.15662676095962524, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.012751000933349133, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.005057043395936489, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03090181201696396, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.02183726243674755, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0004822045157197863, rank=1, decoded_token=None)}, {1442: Logprob(logprob=-4.839500427246094, rank=6, decoded_token=None), 578: Logprob(logprob=-0.33950039744377136, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.566116213798523, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.3449784517288208, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.1413413286209106, rank=1, decoded_token=None)}, {3940: Logprob(logprob=-4.172558307647705, rank=14, decoded_token=None), 374: Logprob(logprob=-1.4225584268569946, rank=1, decoded_token=None)}, {449: Logprob(logprob=-0.06449252367019653, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.9140709638595581, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.7719259262084961, rank=2, decoded_token=None), 1524: Logprob(logprob=-0.6469259262084961, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.007958251982927322, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-2.8203039169311523, rank=2, decoded_token=None), 11: Logprob(logprob=-0.1953037977218628, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.6145880222320557, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.5863301753997803, rank=2, decoded_token=None), 1828: Logprob(logprob=-0.4613301157951355, rank=1, decoded_token=None)}, {1053: Logprob(logprob=-2.094866991043091, rank=2, decoded_token=None), 690: Logprob(logprob=-0.21986699104309082, rank=1, decoded_token=None)}, {617: Logprob(logprob=-3.046118974685669, rank=6, decoded_token=None), 2646: Logprob(logprob=-0.921118974685669, rank=1, decoded_token=None)}, {1193: Logprob(logprob=-3.4279844760894775, rank=7, decoded_token=None), 459: Logprob(logprob=-0.8029844760894775, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.308468222618103, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.018749739974737167, rank=1, decoded_token=None)}, {304: Logprob(logprob=-2.9477155208587646, rank=3, decoded_token=None), 627: Logprob(logprob=-0.3227156102657318, rank=1, decoded_token=None)}, {433: Logprob(logprob=-0.40446826815605164, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.21264755725860596, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.025269512087106705, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0027451948262751102, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.1849918365478516, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.1902220994234085, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.3071374893188477, rank=2, decoded_token=None), 791: Logprob(logprob=-1.9321374893188477, rank=1, decoded_token=None)}, {2860: Logprob(logprob=-5.8816609382629395, rank=57, decoded_token=None), 1396: Logprob(logprob=-2.6941609382629395, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.02797979861497879, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.23590943217277527, rank=1, decoded_token=None)}, {966: Logprob(logprob=-4.081195831298828, rank=3, decoded_token=None), 605: Logprob(logprob=-3.956195592880249, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-6.011350631713867, rank=47, decoded_token=None), 4236: Logprob(logprob=-1.6988508701324463, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.6415536403656006, rank=9, decoded_token=None), 31408: Logprob(logprob=-1.8915536403656006, rank=1, decoded_token=None)}, {1514: Logprob(logprob=-1.6141451597213745, rank=2, decoded_token=None), 387: Logprob(logprob=-0.9891451597213745, rank=1, decoded_token=None)}, {19794: Logprob(logprob=-4.327911853790283, rank=6, decoded_token=None), 304: Logprob(logprob=-0.7029119729995728, rank=1, decoded_token=None)}, {520: Logprob(logprob=-2.610771656036377, rank=4, decoded_token=None), 304: Logprob(logprob=-0.7357717752456665, rank=1, decoded_token=None)}, {264: Logprob(logprob=-0.8295858502388, rank=1, decoded_token=None)}, {6246: Logprob(logprob=-5.445433616638184, rank=25, decoded_token=None), 16520: Logprob(logprob=-1.0704338550567627, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.8759067058563232, rank=1, decoded_token=None)}, {2684: Logprob(logprob=-3.019108295440674, rank=7, decoded_token=None), 1442: Logprob(logprob=-1.7691081762313843, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.6913377642631531, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.022329222410917282, rank=1, decoded_token=None)}, {7041: Logprob(logprob=-3.9607925415039062, rank=6, decoded_token=None), 220: Logprob(logprob=-0.33579257130622864, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.288790225982666, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.200063943862915, rank=1, decoded_token=None), 17: Logprob(logprob=-2.200063943862915, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-0.6154614090919495, rank=1, decoded_token=None)}, {389: Logprob(logprob=-2.105520248413086, rank=3, decoded_token=None), 505: Logprob(logprob=-1.730520248413086, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-1.2467472553253174, rank=2, decoded_token=None), 279: Logprob(logprob=-0.49674728512763977, rank=1, decoded_token=None)}, {2128: Logprob(logprob=-0.08914763480424881, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.16352039575576782, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-2.8792216777801514, rank=4, decoded_token=None), 2650: Logprob(logprob=-1.0042216777801514, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-1.2772589921951294, rank=2, decoded_token=None), 315: Logprob(logprob=-1.0272589921951294, rank=1, decoded_token=None)}, {12722: Logprob(logprob=-4.80352258682251, rank=9, decoded_token=None), 374: Logprob(logprob=-0.5535227656364441, rank=1, decoded_token=None)}, {15100: Logprob(logprob=-4.0572991371154785, rank=7, decoded_token=None), 16964: Logprob(logprob=-0.5572991371154785, rank=1, decoded_token=None)}, {1268: Logprob(logprob=-0.9948503971099854, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.8683412075042725, rank=3, decoded_token=None), 279: Logprob(logprob=-1.2433412075042725, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-1.9003151655197144, rank=2, decoded_token=None), 8417: Logprob(logprob=-1.1503151655197144, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.11957751214504242, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.29255211353302, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.01057143323123455, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.7831801772117615, rank=1, decoded_token=None)}, {4460: Logprob(logprob=-3.463230609893799, rank=3, decoded_token=None), 430: Logprob(logprob=-0.8382306098937988, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9446107149124146, rank=2, decoded_token=None), 311: Logprob(logprob=-0.8196107149124146, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.04526291787624359, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.002380991354584694, rank=1, decoded_token=None)}, {2758: Logprob(logprob=-3.3964881896972656, rank=8, decoded_token=None), 578: Logprob(logprob=-2.1464881896972656, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.38579824566841125, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.9311184883117676, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.38374000787734985, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.3195199966430664, rank=2, decoded_token=None), 279: Logprob(logprob=-0.44451993703842163, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.10298678278923035, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.7452938556671143, rank=2, decoded_token=None), 627: Logprob(logprob=-0.7452937960624695, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.4569380283355713, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.816202163696289, rank=4, decoded_token=None), 279: Logprob(logprob=-0.06620228290557861, rank=1, decoded_token=None)}, {1758: Logprob(logprob=-0.8483269810676575, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.920579731464386, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.4476555585861206, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0015714927576482296, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00015269544383045286, rank=1, decoded_token=None)}, {64002: Logprob(logprob=-2.5445642471313477, rank=3, decoded_token=None), 94310: Logprob(logprob=-0.5445643663406372, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.040661152452230453, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.1308070570230484, rank=1, decoded_token=None)}, {555: Logprob(logprob=-0.035039275884628296, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.00441908510401845, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.013742946088314056, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.09101356565952301, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.06291541457176208, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.23998305201530457, rank=1, decoded_token=None)}, {21: Logprob(logprob=-0.0345701165497303, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.00949143711477518, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.0618923157453537, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0015372138004750013, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00010275312524754554, rank=1, decoded_token=None)}, {72159: Logprob(logprob=-1.416687250137329, rank=2, decoded_token=None), 94310: Logprob(logprob=-0.7916873097419739, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.022464442998170853, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.1311088651418686, rank=1, decoded_token=None)}, {323: Logprob(logprob=-5.759943962097168, rank=2, decoded_token=None), 555: Logprob(logprob=-0.009944183751940727, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.005024425685405731, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.10427399724721909, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.16913986206054688, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.024288708344101906, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04584870859980583, rank=1, decoded_token=None)}, {3965: Logprob(logprob=-0.16225406527519226, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.09998979419469833, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.008857247419655323, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0020776845049113035, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0003250309091527015, rank=1, decoded_token=None)}, {94310: Logprob(logprob=-0.7316688895225525, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.024832606315612793, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.6226915121078491, rank=1, decoded_token=None)}, {505: Logprob(logprob=-0.10961204022169113, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.010747289285063744, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.05260615423321724, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.02702752687036991, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.012585973367094994, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0407465361058712, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.009129801765084267, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.017733123153448105, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.05732721835374832, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004556629806756973, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0005477358354255557, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.3356648683547974, rank=3, decoded_token=None), 356: Logprob(logprob=-1.2106648683547974, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.2082667499780655, rank=1, decoded_token=None)}, {32: Logprob(logprob=-1.9418500661849976, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-5.220272541046143, rank=29, decoded_token=None), 2860: Logprob(logprob=-3.0952725410461426, rank=1, decoded_token=None)}, {31878: Logprob(logprob=-1.610248327255249, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.7332974672317505, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-8.542618751525879, rank=186, decoded_token=None), 18: Logprob(logprob=-2.542618751525879, rank=1, decoded_token=None)}, {2204: Logprob(logprob=-2.599426507949829, rank=2, decoded_token=None), 13840: Logprob(logprob=-2.474426507949829, rank=1, decoded_token=None)}, {8146: Logprob(logprob=-5.755116939544678, rank=24, decoded_token=None), 4595: Logprob(logprob=-1.3801170587539673, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.027865495532751083, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-3.957357883453369, rank=10, decoded_token=None), 259: Logprob(logprob=-2.832357883453369, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.40048009157180786, rank=1, decoded_token=None)}, {2435: Logprob(logprob=-4.845759868621826, rank=13, decoded_token=None), 1442: Logprob(logprob=-1.4707597494125366, rank=1, decoded_token=None)}, {617: Logprob(logprob=-1.3862104415893555, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.847692608833313, rank=1, decoded_token=None)}, {914: Logprob(logprob=-4.27924108505249, rank=17, decoded_token=None), 18: Logprob(logprob=-2.9042410850524902, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-4.734525680541992, rank=13, decoded_token=None), 2204: Logprob(logprob=-0.9845254421234131, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.17049723863601685, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-2.0231032371520996, rank=2, decoded_token=None), 2579: Logprob(logprob=-1.7731033563613892, rank=1, decoded_token=None)}, {1933: Logprob(logprob=-0.12822699546813965, rank=1, decoded_token=None)}, {304: Logprob(logprob=-3.447733163833618, rank=5, decoded_token=None), 13: Logprob(logprob=-0.4477331042289734, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-7.156528472900391, rank=17, decoded_token=None), 5708: Logprob(logprob=-0.2815282940864563, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.10994840413331985, rank=1, decoded_token=None)}, {578: Logprob(logprob=-2.5678606033325195, rank=5, decoded_token=None), 2650: Logprob(logprob=-1.317860722541809, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.8113741874694824, rank=3, decoded_token=None), 3637: Logprob(logprob=-0.8113741278648376, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.09289318323135376, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.6233457922935486, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.7501171827316284, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-2.1427054405212402, rank=2, decoded_token=None), 1855: Logprob(logprob=-0.5177054405212402, rank=1, decoded_token=None)}, {279: Logprob(logprob=-3.4584686756134033, rank=6, decoded_token=None), 304: Logprob(logprob=-1.3334686756134033, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.026147279888391495, rank=1, decoded_token=None)}, {706: Logprob(logprob=-0.34631913900375366, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.6868782043457031, rank=2, decoded_token=None), 374: Logprob(logprob=-1.0618782043457031, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.2303718775510788, rank=1, decoded_token=None)}, {649: Logprob(logprob=-2.7231407165527344, rank=2, decoded_token=None), 374: Logprob(logprob=-0.3481407165527344, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.054041046649217606, rank=1, decoded_token=None)}, {1766: Logprob(logprob=-2.5916926860809326, rank=4, decoded_token=None), 5439: Logprob(logprob=-1.0916926860809326, rank=1, decoded_token=None)}, {1701: Logprob(logprob=-2.2964775562286377, rank=2, decoded_token=None), 555: Logprob(logprob=-0.17147766053676605, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.42406484484672546, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-3.539501428604126, rank=7, decoded_token=None), 6037: Logprob(logprob=-1.289501428604126, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-4.590996742248535, rank=15, decoded_token=None), 220: Logprob(logprob=-1.2159966230392456, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.18096934258937836, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.9475879669189453, rank=2, decoded_token=None), 3639: Logprob(logprob=-1.1975879669189453, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-0.4854806661605835, rank=1, decoded_token=None)}, {25800: Logprob(logprob=-3.8487393856048584, rank=9, decoded_token=None), 11: Logprob(logprob=-1.7862393856048584, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.1915293186903, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.07257572561502457, rank=1, decoded_token=None)}, {13: Logprob(logprob=-2.225902557373047, rank=3, decoded_token=None), 284: Logprob(logprob=-1.6009026765823364, rank=1, decoded_token=None)}, {2650: Logprob(logprob=-2.9975926876068115, rank=3, decoded_token=None), 3639: Logprob(logprob=-0.6225926280021667, rank=1, decoded_token=None)}, {1690: Logprob(logprob=-0.08352108299732208, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.6937007308006287, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.15021462738513947, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-0.1846829354763031, rank=1, decoded_token=None)}, {1587: Logprob(logprob=-0.9513101577758789, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.025589339435100555, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.003244970692321658, rank=1, decoded_token=None)}, {617: Logprob(logprob=-0.10589171200990677, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.1511233001947403, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.037622109055519104, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.09561489522457123, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.07025675475597382, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.002441641641780734, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021361514925956726, rank=1, decoded_token=None)}, {25541: Logprob(logprob=-11.017716407775879, rank=927, decoded_token=None), 7699: Logprob(logprob=-2.267716407775879, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.7192279100418091, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0011468507582321763, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00013636612857226282, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.001517931348644197, rank=1, decoded_token=None)}, {17: Logprob(logprob=-4.038790702819824, rank=7, decoded_token=None), 7699: Logprob(logprob=-2.913790464401245, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.023376699537038803, rank=1, decoded_token=None)}, {21129: Logprob(logprob=-5.540423393249512, rank=45, decoded_token=None), 2636: Logprob(logprob=-3.540423631668091, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.008513230830430984, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.00035577642847783864, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001481661747675389, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0015720878727734089, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.26859188079834, rank=2, decoded_token=None), 20: Logprob(logprob=-2.14359188079834, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.006552401464432478, rank=1, decoded_token=None)}, {24599: Logprob(logprob=-6.160186767578125, rank=81, decoded_token=None), 21129: Logprob(logprob=-2.535186529159546, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.004695461131632328, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.000506511190906167, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002585315378382802, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0038100522942841053, rank=1, decoded_token=None)}, {19: Logprob(logprob=-2.5259666442871094, rank=3, decoded_token=None), 18: Logprob(logprob=-0.7759665250778198, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.001276512397453189, rank=1, decoded_token=None)}, {5154: Logprob(logprob=-5.772514343261719, rank=71, decoded_token=None), 18070: Logprob(logprob=-2.772514581680298, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.5313923954963684, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004962034057825804, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0004538459761533886, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.0903221368789673, rank=1, decoded_token=None), 362: Logprob(logprob=-1.0903221368789673, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.23396459221839905, rank=1, decoded_token=None)}, {23956: Logprob(logprob=-3.7109880447387695, rank=5, decoded_token=None), 32: Logprob(logprob=-1.7109880447387695, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-2.3338446617126465, rank=3, decoded_token=None), 315: Logprob(logprob=-1.458844780921936, rank=1, decoded_token=None)}, {374: Logprob(logprob=-1.2901480197906494, rank=1, decoded_token=None)}, {13890: Logprob(logprob=-0.29379332065582275, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.004455045331269503, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.5699459910392761, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.582611322402954, rank=2, decoded_token=None), 17: Logprob(logprob=-2.457611322402954, rank=1, decoded_token=None)}, {865: Logprob(logprob=-3.8140597343444824, rank=6, decoded_token=None), 25800: Logprob(logprob=-0.939059853553772, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.22526046633720398, rank=1, decoded_token=None)}, {24: Logprob(logprob=-3.268810987472534, rank=8, decoded_token=None), 17: Logprob(logprob=-2.018810987472534, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9523714780807495, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.02629231847822666, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.002087677363306284, rank=1, decoded_token=None)}, {320: Logprob(logprob=-4.041932106018066, rank=2, decoded_token=None), 220: Logprob(logprob=-0.0419318750500679, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3275642395019531, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7747173309326172, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.01943170465528965, rank=1, decoded_token=None)}, {19: Logprob(logprob=-3.8843350410461426, rank=6, decoded_token=None), 24: Logprob(logprob=-0.2593349516391754, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.05427434667944908, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7900131344795227, rank=1, decoded_token=None)}, {320: Logprob(logprob=-1.6092212200164795, rank=2, decoded_token=None), 220: Logprob(logprob=-0.2342211753129959, rank=1, decoded_token=None)}, {21: Logprob(logprob=-4.122803688049316, rank=6, decoded_token=None), 20: Logprob(logprob=-0.8728036880493164, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.053970567882061005, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006345955654978752, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.5473098754882812, rank=5, decoded_token=None), 18: Logprob(logprob=-1.1723099946975708, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.06624624133110046, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0031123552471399307, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00019047829846385866, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.5430195927619934, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3349359631538391, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.17014674842357635, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.11895304173231125, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.2283027172088623, rank=4, decoded_token=None), 24: Logprob(logprob=-1.2283027172088623, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.21531498432159424, rank=1, decoded_token=None)}, {489: Logprob(logprob=-4.436285972595215, rank=3, decoded_token=None), 865: Logprob(logprob=-0.061286140233278275, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.43919575214385986, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.5670137405395508, rank=3, decoded_token=None), 19: Logprob(logprob=-1.3170137405395508, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.013229803182184696, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.020044738426804543, rank=1, decoded_token=None)}, {19: Logprob(logprob=-1.059314250946045, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.14613543450832367, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0012510338565334678, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00013481661153491586, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.36141881346702576, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.170744389295578, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.15453915297985077, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0653778612613678, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.4421030282974243, rank=3, decoded_token=None), 19: Logprob(logprob=-1.1921030282974243, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.09968782961368561, rank=1, decoded_token=None)}, {489: Logprob(logprob=-0.7550356984138489, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.3567902743816376, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.5658089518547058, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.03483690321445465, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.05940350890159607, rank=1, decoded_token=None)}, {24: Logprob(logprob=-1.1212691068649292, rank=2, decoded_token=None), 19: Logprob(logprob=-0.9962691068649292, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.013908135704696178, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0008878341759555042, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001971527235582471, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.19026270508766174, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.07903989404439926, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.1152166947722435, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.040283940732479095, rank=1, decoded_token=None)}, {24: Logprob(logprob=-0.6784765124320984, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.02332417666912079, rank=1, decoded_token=None)}, {865: Logprob(logprob=-4.38916015625, rank=4, decoded_token=None), 489: Logprob(logprob=-0.13916020095348358, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.059930216521024704, rank=1, decoded_token=None)}, {21: Logprob(logprob=-1.9063451290130615, rank=2, decoded_token=None), 20: Logprob(logprob=-0.4063451290130615, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.02287174016237259, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.002457695547491312, rank=1, decoded_token=None)}, {24: Logprob(logprob=-5.066433429718018, rank=5, decoded_token=None), 20: Logprob(logprob=-0.19143354892730713, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.015977919101715088, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004998686723411083, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0003066784702241421, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.108638048171997, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.18586991727352142, rank=1, decoded_token=None)}, {11874: Logprob(logprob=-5.224460124969482, rank=13, decoded_token=None), 32: Logprob(logprob=-1.849460244178772, rank=1, decoded_token=None)}, {4459: Logprob(logprob=-7.009128570556641, rank=124, decoded_token=None), 5219: Logprob(logprob=-1.821628451347351, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.6522552967071533, rank=1, decoded_token=None)}, {617: Logprob(logprob=-1.379534363746643, rank=2, decoded_token=None), 527: Logprob(logprob=-1.254534363746643, rank=1, decoded_token=None)}, {264: Logprob(logprob=-0.5606241226196289, rank=1, decoded_token=None)}, {3325: Logprob(logprob=-9.22218132019043, rank=39, decoded_token=None), 2694: Logprob(logprob=-0.2846815884113312, rank=1, decoded_token=None)}, {4279: Logprob(logprob=-0.061864301562309265, rank=1, decoded_token=None)}, {5361: Logprob(logprob=-0.45201748609542847, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.17637768387794495, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.023118602111935616, rank=1, decoded_token=None)}, {1399: Logprob(logprob=-3.963719367980957, rank=14, decoded_token=None), 717: Logprob(logprob=-2.338719367980957, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.09445195645093918, rank=1, decoded_token=None)}, {9062: Logprob(logprob=-5.071889877319336, rank=12, decoded_token=None), 578: Logprob(logprob=-1.196889877319336, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.6336301565170288, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.3426891267299652, rank=1, decoded_token=None)}, {2753: Logprob(logprob=-2.6435422897338867, rank=3, decoded_token=None), 220: Logprob(logprob=-1.0185424089431763, rank=1, decoded_token=None)}, {1109: Logprob(logprob=-0.004161983262747526, rank=1, decoded_token=None)}, {477: Logprob(logprob=-2.879474401473999, rank=3, decoded_token=None), 220: Logprob(logprob=-0.37947434186935425, rank=1, decoded_token=None)}, {6273: Logprob(logprob=-0.013294622302055359, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.0058578010648489, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.09096752852201462, rank=1, decoded_token=None)}, {717: Logprob(logprob=-5.163353443145752, rank=29, decoded_token=None), 1041: Logprob(logprob=-1.9133533239364624, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.1529577076435089, rank=1, decoded_token=None)}, {578: Logprob(logprob=-1.5697429180145264, rank=2, decoded_token=None), 16299: Logprob(logprob=-0.9447429180145264, rank=1, decoded_token=None)}, {12474: Logprob(logprob=-2.645151138305664, rank=3, decoded_token=None), 3325: Logprob(logprob=-1.270151138305664, rank=1, decoded_token=None)}, {4279: Logprob(logprob=-0.6883967518806458, rank=1, decoded_token=None)}, {8331: Logprob(logprob=-0.40138059854507446, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.16735176742076874, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.33446672558784485, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-0.18579617142677307, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.2953820526599884, rank=1, decoded_token=None)}, {285: Logprob(logprob=-9.538186073303223, rank=41, decoded_token=None), 374: Logprob(logprob=-0.038186460733413696, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.9321149587631226, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.0747475624084473, rank=3, decoded_token=None), 21: Logprob(logprob=-1.6997476816177368, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.17374888062477112, rank=1, decoded_token=None)}, {3639: Logprob(logprob=-1.1434378623962402, rank=2, decoded_token=None), 16299: Logprob(logprob=-0.8934378623962402, rank=1, decoded_token=None)}, {527: Logprob(logprob=-2.005824565887451, rank=2, decoded_token=None), 374: Logprob(logprob=-0.2558245360851288, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.07729481160640717, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-0.310687780380249, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.7019672989845276, rank=1, decoded_token=None), 4459: Logprob(logprob=-0.7019672989845276, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.0899902880191803, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.014821651391685009, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0012823462020605803, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.03980715200304985, rank=1, decoded_token=None)}, {21: Logprob(logprob=-1.936407446861267, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.24611333012580872, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.005055620335042477, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.329893112182617, rank=3, decoded_token=None), 717: Logprob(logprob=-1.4548931121826172, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.023442961275577545, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0009132028790190816, rank=1, decoded_token=None)}, {13: Logprob(logprob=-7.390703103737906e-05, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.004810308571904898, rank=1, decoded_token=None)}, {20: Logprob(logprob=-3.1714460849761963, rank=7, decoded_token=None), 21: Logprob(logprob=-1.5464460849761963, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.02755010686814785, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0016718233237043023, rank=1, decoded_token=None)}, {717: Logprob(logprob=-1.2207993268966675, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0012977044098079205, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.00026008085114881396, rank=1, decoded_token=None)}, {13: Logprob(logprob=-6.186770770000294e-05, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.005501368548721075, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.967453718185425, rank=8, decoded_token=None), 19: Logprob(logprob=-1.4674537181854248, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.003204688895493746, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0013855629367753863, rank=1, decoded_token=None)}, {717: Logprob(logprob=-0.7422707080841064, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0011626873165369034, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.00032074074260890484, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00017677174764685333, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.015494913794100285, rank=1, decoded_token=None)}, {717: Logprob(logprob=-2.0872957706451416, rank=3, decoded_token=None), 21: Logprob(logprob=-1.2122957706451416, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.002190573140978813, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.001105650793761015, rank=1, decoded_token=None)}, {868: Logprob(logprob=-2.141770362854004, rank=2, decoded_token=None), 605: Logprob(logprob=-1.016770362854004, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.02330053597688675, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.002792746527120471, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0005763299996033311, rank=1, decoded_token=None)}, {356: Logprob(logprob=-1.53548264503479, rank=3, decoded_token=None), 362: Logprob(logprob=-1.03548264503479, rank=1, decoded_token=None)}], outputs=[CompletionOutput(index=0, text='', token_ids=(271,), cumulative_logprob=None, logprobs=None, finish_reason=length, stop_reason=None)], finished=True, metrics=RequestMetrics(arrival_time=1732331737.7071214, last_token_time=1732331737.7071214, first_scheduled_time=1732331737.7121127, first_token_time=1732331737.8119168, time_in_queue=0.004991292953491211, finished_time=1732331737.812442, scheduler_time=0.001441366001017741, model_forward_time=None, model_execute_time=None), lora_request=None, num_cached_tokens=0)
Answer:  (-1.53548264503479, False)
Input:  [128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 11874, 4459, 5219, 617, 264, 3325, 4279, 5361, 315, 220, 1399, 13, 9062, 1396, 374, 2753, 1109, 477, 6273, 311, 220, 717, 13, 578, 12474, 4279, 8331, 315, 279, 1403, 5219, 285, 220, 17, 13, 3639, 527, 279, 1403, 5219, 5380, 32, 13, 220, 21, 323, 220, 605, 198, 33, 13, 220, 20, 323, 220, 717, 198, 34, 13, 220, 605, 323, 220, 717, 198, 35, 13, 220, 717, 323, 220, 868, 198, 16533, 25, 362]
Output:  RequestOutput(request_id=1, prompt=None, prompt_token_ids=[128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 11874, 4459, 5219, 617, 264, 3325, 4279, 5361, 315, 220, 1399, 13, 9062, 1396, 374, 2753, 1109, 477, 6273, 311, 220, 717, 13, 578, 12474, 4279, 8331, 315, 279, 1403, 5219, 285, 220, 17, 13, 3639, 527, 279, 1403, 5219, 5380, 32, 13, 220, 21, 323, 220, 605, 198, 33, 13, 220, 20, 323, 220, 717, 198, 34, 13, 220, 605, 323, 220, 717, 198, 35, 13, 220, 717, 323, 220, 868, 198, 16533, 25, 362], encoder_prompt=None, encoder_prompt_token_ids=None, prompt_logprobs=[None, {791: Logprob(logprob=-3.588294506072998, rank=4, decoded_token=None), 14924: Logprob(logprob=-1.213294506072998, rank=1, decoded_token=None)}, {2768: Logprob(logprob=-4.304756164550781, rank=2, decoded_token=None), 220: Logprob(logprob=-3.6797564029693604, rank=1, decoded_token=None)}, {527: Logprob(logprob=-2.969231605529785, rank=3, decoded_token=None), 374: Logprob(logprob=-1.9692317247390747, rank=1, decoded_token=None)}, {5361: Logprob(logprob=-9.316919326782227, rank=700, decoded_token=None), 279: Logprob(logprob=-1.566918969154358, rank=1, decoded_token=None)}, {5873: Logprob(logprob=-1.1169946193695068, rank=1, decoded_token=None)}, {4860: Logprob(logprob=-0.15302471816539764, rank=1, decoded_token=None)}, {320: Logprob(logprob=-3.3894879817962646, rank=9, decoded_token=None), 389: Logprob(logprob=-1.7644879817962646, rank=1, decoded_token=None)}, {4291: Logprob(logprob=-3.562437057495117, rank=2, decoded_token=None), 11865: Logprob(logprob=-0.562437117099762, rank=1, decoded_token=None)}, {11503: Logprob(logprob=-0.9702798128128052, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.4542173743247986, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.899801015853882, rank=4, decoded_token=None), 389: Logprob(logprob=-1.3998010158538818, rank=1, decoded_token=None)}, {36256: Logprob(logprob=-8.734892845153809, rank=631, decoded_token=None), 279: Logprob(logprob=-1.1098928451538086, rank=1, decoded_token=None)}, {38696: Logprob(logprob=-3.7674813270568848, rank=8, decoded_token=None), 19320: Logprob(logprob=-2.1424813270568848, rank=1, decoded_token=None)}, {382: Logprob(logprob=-5.597833156585693, rank=19, decoded_token=None), 13: Logprob(logprob=-1.097833275794983, rank=1, decoded_token=None)}, {791: Logprob(logprob=-3.544769287109375, rank=4, decoded_token=None), 16: Logprob(logprob=-1.4197694063186646, rank=1, decoded_token=None)}, {7187: Logprob(logprob=-7.414687633514404, rank=167, decoded_token=None), 2768: Logprob(logprob=-2.3521876335144043, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.11540365219116211, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.7252726554870605, rank=2, decoded_token=None), 264: Logprob(logprob=-0.4752727150917053, rank=1, decoded_token=None)}, {3363: Logprob(logprob=-1.8480002880096436, rank=1, decoded_token=None)}, {1405: Logprob(logprob=-5.9969987869262695, rank=13, decoded_token=None), 315: Logprob(logprob=-0.24699899554252625, rank=1, decoded_token=None)}, {33126: Logprob(logprob=-9.10548210144043, rank=325, decoded_token=None), 358: Logprob(logprob=-1.292981743812561, rank=1, decoded_token=None)}, {574: Logprob(logprob=-5.349006652832031, rank=8, decoded_token=None), 6439: Logprob(logprob=-0.4740064740180969, rank=1, decoded_token=None)}, {9405: Logprob(logprob=-0.40580296516418457, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.5615864396095276, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.7438945174217224, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-7.263688087463379, rank=140, decoded_token=None), 1041: Logprob(logprob=-2.638688087463379, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.7120769619941711, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-8.756370544433594, rank=570, decoded_token=None), 931: Logprob(logprob=-0.38137099146842957, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.46257808804512024, rank=1, decoded_token=None)}, {3639: Logprob(logprob=-4.10749626159668, rank=8, decoded_token=None), 578: Logprob(logprob=-1.2324963808059692, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.29674193263053894, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.1783972829580307, rank=1, decoded_token=None)}, {907: Logprob(logprob=-5.722339153289795, rank=27, decoded_token=None), 7187: Logprob(logprob=-0.8473392128944397, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.03685179725289345, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.9906996488571167, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.191212177276611, rank=12, decoded_token=None), 7187: Logprob(logprob=-1.1912120580673218, rank=1, decoded_token=None)}, {20: Logprob(logprob=-3.4952895641326904, rank=3, decoded_token=None), 605: Logprob(logprob=-2.9952895641326904, rank=1, decoded_token=None)}, {304: Logprob(logprob=-6.860769271850586, rank=33, decoded_token=None), 339: Logprob(logprob=-0.4857691526412964, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.4738154709339142, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.81992244720459, rank=9, decoded_token=None), 2768: Logprob(logprob=-1.5699224472045898, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.851509690284729, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-0.4733523726463318, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.3776562213897705, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-0.04871302843093872, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-3.7120940685272217, rank=5, decoded_token=None), 1980: Logprob(logprob=-0.8370941281318665, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.0033669471740723, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.2580585777759552, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.20247121155261993, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.971443772315979, rank=1, decoded_token=None)}, {9214: Logprob(logprob=-7.329587459564209, rank=44, decoded_token=None), 11: Logprob(logprob=-0.6420875191688538, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.33627015352249146, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.003795088967308402, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0006998711614869535, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021235832944512367, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.1533547639846802, rank=1, decoded_token=None)}, {11758: Logprob(logprob=-1.9098384380340576, rank=2, decoded_token=None), 11990: Logprob(logprob=-1.4098384380340576, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.007843528874218464, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0015495923580601811, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0005785936955362558, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006402693688869476, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.09296748787164688, rank=1, decoded_token=None)}, {22781: Logprob(logprob=-0.6998193264007568, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0074472189880907536, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0022168601863086224, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0005930095794610679, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.019136684015393257, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.05925050005316734, rank=1, decoded_token=None)}, {6305: Logprob(logprob=-0.6276966333389282, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.2591150999069214, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.909871518611908, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.060657717287540436, rank=1, decoded_token=None)}, {362: Logprob(logprob=-1.2651628255844116, rank=2, decoded_token=None), 423: Logprob(logprob=-1.1401628255844116, rank=1, decoded_token=None)}, {271: Logprob(logprob=-1.236945629119873, rank=2, decoded_token=None), 128001: Logprob(logprob=-0.7369455695152283, rank=1, decoded_token=None)}, {43819: Logprob(logprob=-12.281052589416504, rank=2698, decoded_token=None), 791: Logprob(logprob=-0.8435525894165039, rank=1, decoded_token=None)}, {21475: Logprob(logprob=-0.7285953164100647, rank=1, decoded_token=None)}, {1511: Logprob(logprob=-6.596356391906738, rank=50, decoded_token=None), 374: Logprob(logprob=-2.0338563919067383, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.3166232109069824, rank=3, decoded_token=None), 264: Logprob(logprob=-1.3166230916976929, rank=1, decoded_token=None)}, {6037: Logprob(logprob=-6.134354591369629, rank=53, decoded_token=None), 15150: Logprob(logprob=-2.509354829788208, rank=1, decoded_token=None)}, {330: Logprob(logprob=-3.653575897216797, rank=9, decoded_token=None), 315: Logprob(logprob=-1.5285758972167969, rank=1, decoded_token=None)}, {2261: Logprob(logprob=-4.241303443908691, rank=15, decoded_token=None), 2746: Logprob(logprob=-2.6163032054901123, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.6807642579078674, rank=1, decoded_token=None)}, {806: Logprob(logprob=-4.885201930999756, rank=18, decoded_token=None), 20: Logprob(logprob=-1.3852018117904663, rank=1, decoded_token=None)}, {1: Logprob(logprob=-1.440927505493164, rank=2, decoded_token=None), 311: Logprob(logprob=-0.9409274458885193, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.5772078633308411, rank=1, decoded_token=None)}, {1893: Logprob(logprob=-6.191239356994629, rank=44, decoded_token=None), 1505: Logprob(logprob=-1.5662392377853394, rank=1, decoded_token=None)}, {279: Logprob(logprob=-1.369935393333435, rank=2, decoded_token=None), 264: Logprob(logprob=-0.7449353933334351, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.322933554649353, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-6.340333938598633, rank=23, decoded_token=None), 220: Logprob(logprob=-0.2778337895870209, rank=1, decoded_token=None)}, {6982: Logprob(logprob=-3.008331298828125, rank=5, decoded_token=None), 220: Logprob(logprob=-1.2583311796188354, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-0.696544349193573, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.47080329060554504, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.408674716949463, rank=9, decoded_token=None), 3639: Logprob(logprob=-0.7836745381355286, rank=1, decoded_token=None)}, {605: Logprob(logprob=-4.432986259460449, rank=13, decoded_token=None), 16: Logprob(logprob=-2.18298602104187, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.9232057332992554, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.13041946291923523, rank=1, decoded_token=None)}, {1691: Logprob(logprob=-0.8227146863937378, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.007162133697420359, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.016214758157730103, rank=1, decoded_token=None)}, {843: Logprob(logprob=-0.13016277551651, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.03512261062860489, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.20052661001682281, rank=1, decoded_token=None)}, {3391: Logprob(logprob=-0.02468840219080448, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.08266056329011917, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3703943192958832, rank=1, decoded_token=None)}, {4370: Logprob(logprob=-0.017463840544223785, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-9.801653861999512, rank=120, decoded_token=None), 11: Logprob(logprob=-0.17665395140647888, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-4.195326805114746, rank=8, decoded_token=None), 1396: Logprob(logprob=-1.070326566696167, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.4466686248779297, rank=2, decoded_token=None), 374: Logprob(logprob=-0.44666874408721924, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.517330527305603, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.113140106201172, rank=3, decoded_token=None), 6037: Logprob(logprob=-0.8631401658058167, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.443703293800354, rank=2, decoded_token=None), 220: Logprob(logprob=-1.318703293800354, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.23402449488639832, rank=1, decoded_token=None)}, {837: Logprob(logprob=-0.6284106373786926, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.37667617201805115, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.0740572139620781, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.009778810665011406, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.5895971655845642, rank=1, decoded_token=None)}, {220: Logprob(logprob=-2.43047833442688, rank=5, decoded_token=None), 1176: Logprob(logprob=-2.05547833442688, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.1376230716705322, rank=3, decoded_token=None), 806: Logprob(logprob=-1.8876230716705322, rank=1, decoded_token=None)}, {339: Logprob(logprob=-0.6972476840019226, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.1368379592895508, rank=2, decoded_token=None), 4751: Logprob(logprob=-0.5118379592895508, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.17106032371521, rank=2, decoded_token=None), 374: Logprob(logprob=-0.54606032371521, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.014991242438554764, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.19605356454849243, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.600100040435791, rank=2, decoded_token=None), 374: Logprob(logprob=-0.10010002553462982, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.20332926511764526, rank=1, decoded_token=None)}, {459: Logprob(logprob=-4.175275802612305, rank=6, decoded_token=None), 220: Logprob(logprob=-0.5502755641937256, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.4642753601074219, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.02154143527150154, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.20088475942611694, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.002081967191770673, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0003781795676331967, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.056677043437957764, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.308137893676758, rank=4, decoded_token=None), 220: Logprob(logprob=-0.3081379532814026, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.6069552898406982, rank=4, decoded_token=None), 220: Logprob(logprob=-1.8569552898406982, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.774920642375946, rank=1, decoded_token=None)}, {2646: Logprob(logprob=-3.097163200378418, rank=8, decoded_token=None), 3136: Logprob(logprob=-1.8471633195877075, rank=1, decoded_token=None)}, {617: Logprob(logprob=-2.366727113723755, rank=3, decoded_token=None), 842: Logprob(logprob=-1.1167271137237549, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.652055263519287, rank=7, decoded_token=None), 264: Logprob(logprob=-0.9020552039146423, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-2.718801498413086, rank=4, decoded_token=None), 24871: Logprob(logprob=-0.7188013792037964, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.0695536658167839, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-3.1284074783325195, rank=4, decoded_token=None), 304: Logprob(logprob=-0.87840735912323, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.013708023354411125, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-0.05030599236488342, rank=1, decoded_token=None)}, {1023: Logprob(logprob=-0.0032524564303457737, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03535380959510803, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.010325347073376179, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00024101213784888387, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.140742689371109, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-5.092126846313477, rank=9, decoded_token=None), 1396: Logprob(logprob=-0.8421266674995422, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.4843006134033203, rank=4, decoded_token=None), 1396: Logprob(logprob=-0.23430049419403076, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.11257536709308624, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.3171550929546356, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.00759677030146122, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.02107418328523636, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.09753574430942535, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.4928134083747864, rank=1, decoded_token=None)}, {459: Logprob(logprob=-3.0057926177978516, rank=5, decoded_token=None), 220: Logprob(logprob=-1.7557926177978516, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.8141931891441345, rank=2, decoded_token=None), 10535: Logprob(logprob=-0.6891931891441345, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.07718711346387863, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-7.487396240234375, rank=28, decoded_token=None), 627: Logprob(logprob=-0.6123961806297302, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.15662676095962524, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.012751000933349133, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.005057043395936489, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03090181201696396, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.02183726243674755, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0004822045157197863, rank=1, decoded_token=None)}, {1442: Logprob(logprob=-4.839500427246094, rank=6, decoded_token=None), 578: Logprob(logprob=-0.33950039744377136, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.566116213798523, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.3449784517288208, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.1413413286209106, rank=1, decoded_token=None)}, {3940: Logprob(logprob=-4.172558307647705, rank=14, decoded_token=None), 374: Logprob(logprob=-1.4225584268569946, rank=1, decoded_token=None)}, {449: Logprob(logprob=-0.06449252367019653, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.9140709638595581, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.7719259262084961, rank=2, decoded_token=None), 1524: Logprob(logprob=-0.6469259262084961, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.007958251982927322, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-2.8203039169311523, rank=2, decoded_token=None), 11: Logprob(logprob=-0.1953037977218628, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.6145880222320557, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.5863301753997803, rank=2, decoded_token=None), 1828: Logprob(logprob=-0.4613301157951355, rank=1, decoded_token=None)}, {1053: Logprob(logprob=-2.094866991043091, rank=2, decoded_token=None), 690: Logprob(logprob=-0.21986699104309082, rank=1, decoded_token=None)}, {617: Logprob(logprob=-3.046118974685669, rank=6, decoded_token=None), 2646: Logprob(logprob=-0.921118974685669, rank=1, decoded_token=None)}, {1193: Logprob(logprob=-3.4279844760894775, rank=7, decoded_token=None), 459: Logprob(logprob=-0.8029844760894775, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.308468222618103, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.018749739974737167, rank=1, decoded_token=None)}, {304: Logprob(logprob=-2.9477155208587646, rank=3, decoded_token=None), 627: Logprob(logprob=-0.3227156102657318, rank=1, decoded_token=None)}, {433: Logprob(logprob=-0.40446826815605164, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.21264755725860596, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.025269512087106705, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0027451948262751102, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.1849918365478516, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.1902220994234085, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.3071374893188477, rank=2, decoded_token=None), 791: Logprob(logprob=-1.9321374893188477, rank=1, decoded_token=None)}, {2860: Logprob(logprob=-5.8816609382629395, rank=57, decoded_token=None), 1396: Logprob(logprob=-2.6941609382629395, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.02797979861497879, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.23590943217277527, rank=1, decoded_token=None)}, {966: Logprob(logprob=-4.081195831298828, rank=3, decoded_token=None), 605: Logprob(logprob=-3.956195592880249, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-6.011350631713867, rank=47, decoded_token=None), 4236: Logprob(logprob=-1.6988508701324463, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.6415536403656006, rank=9, decoded_token=None), 31408: Logprob(logprob=-1.8915536403656006, rank=1, decoded_token=None)}, {1514: Logprob(logprob=-1.6141451597213745, rank=2, decoded_token=None), 387: Logprob(logprob=-0.9891451597213745, rank=1, decoded_token=None)}, {19794: Logprob(logprob=-4.327911853790283, rank=6, decoded_token=None), 304: Logprob(logprob=-0.7029119729995728, rank=1, decoded_token=None)}, {520: Logprob(logprob=-2.610771656036377, rank=4, decoded_token=None), 304: Logprob(logprob=-0.7357717752456665, rank=1, decoded_token=None)}, {264: Logprob(logprob=-0.8295858502388, rank=1, decoded_token=None)}, {6246: Logprob(logprob=-5.445433616638184, rank=25, decoded_token=None), 16520: Logprob(logprob=-1.0704338550567627, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.8759067058563232, rank=1, decoded_token=None)}, {2684: Logprob(logprob=-3.019108295440674, rank=7, decoded_token=None), 1442: Logprob(logprob=-1.7691081762313843, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.6913377642631531, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.022329222410917282, rank=1, decoded_token=None)}, {7041: Logprob(logprob=-3.9607925415039062, rank=6, decoded_token=None), 220: Logprob(logprob=-0.33579257130622864, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.288790225982666, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.200063943862915, rank=1, decoded_token=None), 17: Logprob(logprob=-2.200063943862915, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-0.6154614090919495, rank=1, decoded_token=None)}, {389: Logprob(logprob=-2.105520248413086, rank=3, decoded_token=None), 505: Logprob(logprob=-1.730520248413086, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-1.2467472553253174, rank=2, decoded_token=None), 279: Logprob(logprob=-0.49674728512763977, rank=1, decoded_token=None)}, {2128: Logprob(logprob=-0.08914763480424881, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.16352039575576782, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-2.8792216777801514, rank=4, decoded_token=None), 2650: Logprob(logprob=-1.0042216777801514, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-1.2772589921951294, rank=2, decoded_token=None), 315: Logprob(logprob=-1.0272589921951294, rank=1, decoded_token=None)}, {12722: Logprob(logprob=-4.80352258682251, rank=9, decoded_token=None), 374: Logprob(logprob=-0.5535227656364441, rank=1, decoded_token=None)}, {15100: Logprob(logprob=-4.0572991371154785, rank=7, decoded_token=None), 16964: Logprob(logprob=-0.5572991371154785, rank=1, decoded_token=None)}, {1268: Logprob(logprob=-0.9948503971099854, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.8683412075042725, rank=3, decoded_token=None), 279: Logprob(logprob=-1.2433412075042725, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-1.9003151655197144, rank=2, decoded_token=None), 8417: Logprob(logprob=-1.1503151655197144, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.11957751214504242, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.29255211353302, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.01057143323123455, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.7831801772117615, rank=1, decoded_token=None)}, {4460: Logprob(logprob=-3.463230609893799, rank=3, decoded_token=None), 430: Logprob(logprob=-0.8382306098937988, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9446107149124146, rank=2, decoded_token=None), 311: Logprob(logprob=-0.8196107149124146, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.04526291787624359, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.002380991354584694, rank=1, decoded_token=None)}, {2758: Logprob(logprob=-3.3964881896972656, rank=8, decoded_token=None), 578: Logprob(logprob=-2.1464881896972656, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.38579824566841125, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.9311184883117676, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.38374000787734985, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.3195199966430664, rank=2, decoded_token=None), 279: Logprob(logprob=-0.44451993703842163, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.10298678278923035, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.7452938556671143, rank=2, decoded_token=None), 627: Logprob(logprob=-0.7452937960624695, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.4569380283355713, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.816202163696289, rank=4, decoded_token=None), 279: Logprob(logprob=-0.06620228290557861, rank=1, decoded_token=None)}, {1758: Logprob(logprob=-0.8483269810676575, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.920579731464386, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.4476555585861206, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0015714927576482296, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00015269544383045286, rank=1, decoded_token=None)}, {64002: Logprob(logprob=-2.5445642471313477, rank=3, decoded_token=None), 94310: Logprob(logprob=-0.5445643663406372, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.040661152452230453, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.1308070570230484, rank=1, decoded_token=None)}, {555: Logprob(logprob=-0.035039275884628296, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.00441908510401845, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.013742946088314056, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.09101356565952301, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.06291541457176208, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.23998305201530457, rank=1, decoded_token=None)}, {21: Logprob(logprob=-0.0345701165497303, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.00949143711477518, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.0618923157453537, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0015372138004750013, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00010275312524754554, rank=1, decoded_token=None)}, {72159: Logprob(logprob=-1.416687250137329, rank=2, decoded_token=None), 94310: Logprob(logprob=-0.7916873097419739, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.022464442998170853, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.1311088651418686, rank=1, decoded_token=None)}, {323: Logprob(logprob=-5.759943962097168, rank=2, decoded_token=None), 555: Logprob(logprob=-0.009944183751940727, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.005024425685405731, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.10427399724721909, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.16913986206054688, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.024288708344101906, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04584870859980583, rank=1, decoded_token=None)}, {3965: Logprob(logprob=-0.16225406527519226, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.09998979419469833, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.008857247419655323, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0020776845049113035, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0003250309091527015, rank=1, decoded_token=None)}, {94310: Logprob(logprob=-0.7316688895225525, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.024832606315612793, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.6226915121078491, rank=1, decoded_token=None)}, {505: Logprob(logprob=-0.10961204022169113, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.010747289285063744, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.05260615423321724, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.02702752687036991, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.012585973367094994, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0407465361058712, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.009129801765084267, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.017733123153448105, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.05732721835374832, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004556629806756973, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0005477358354255557, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.3356648683547974, rank=3, decoded_token=None), 356: Logprob(logprob=-1.2106648683547974, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.2082667499780655, rank=1, decoded_token=None)}, {32: Logprob(logprob=-1.9418500661849976, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-5.220272541046143, rank=29, decoded_token=None), 2860: Logprob(logprob=-3.0952725410461426, rank=1, decoded_token=None)}, {31878: Logprob(logprob=-1.610248327255249, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.7332974672317505, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-8.542618751525879, rank=186, decoded_token=None), 18: Logprob(logprob=-2.542618751525879, rank=1, decoded_token=None)}, {2204: Logprob(logprob=-2.599426507949829, rank=2, decoded_token=None), 13840: Logprob(logprob=-2.474426507949829, rank=1, decoded_token=None)}, {8146: Logprob(logprob=-5.755116939544678, rank=24, decoded_token=None), 4595: Logprob(logprob=-1.3801170587539673, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.027865495532751083, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-3.957357883453369, rank=10, decoded_token=None), 259: Logprob(logprob=-2.832357883453369, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.40048009157180786, rank=1, decoded_token=None)}, {2435: Logprob(logprob=-4.845759868621826, rank=13, decoded_token=None), 1442: Logprob(logprob=-1.4707597494125366, rank=1, decoded_token=None)}, {617: Logprob(logprob=-1.3862104415893555, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.847692608833313, rank=1, decoded_token=None)}, {914: Logprob(logprob=-4.27924108505249, rank=17, decoded_token=None), 18: Logprob(logprob=-2.9042410850524902, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-4.734525680541992, rank=13, decoded_token=None), 2204: Logprob(logprob=-0.9845254421234131, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.17049723863601685, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-2.0231032371520996, rank=2, decoded_token=None), 2579: Logprob(logprob=-1.7731033563613892, rank=1, decoded_token=None)}, {1933: Logprob(logprob=-0.12822699546813965, rank=1, decoded_token=None)}, {304: Logprob(logprob=-3.447733163833618, rank=5, decoded_token=None), 13: Logprob(logprob=-0.4477331042289734, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-7.156528472900391, rank=17, decoded_token=None), 5708: Logprob(logprob=-0.2815282940864563, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.10994840413331985, rank=1, decoded_token=None)}, {578: Logprob(logprob=-2.5678606033325195, rank=5, decoded_token=None), 2650: Logprob(logprob=-1.317860722541809, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.8113741874694824, rank=3, decoded_token=None), 3637: Logprob(logprob=-0.8113741278648376, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.09289318323135376, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.6233457922935486, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.7501171827316284, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-2.1427054405212402, rank=2, decoded_token=None), 1855: Logprob(logprob=-0.5177054405212402, rank=1, decoded_token=None)}, {279: Logprob(logprob=-3.4584686756134033, rank=6, decoded_token=None), 304: Logprob(logprob=-1.3334686756134033, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.026147279888391495, rank=1, decoded_token=None)}, {706: Logprob(logprob=-0.34631913900375366, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.6868782043457031, rank=2, decoded_token=None), 374: Logprob(logprob=-1.0618782043457031, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.2303718775510788, rank=1, decoded_token=None)}, {649: Logprob(logprob=-2.7231407165527344, rank=2, decoded_token=None), 374: Logprob(logprob=-0.3481407165527344, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.054041046649217606, rank=1, decoded_token=None)}, {1766: Logprob(logprob=-2.5916926860809326, rank=4, decoded_token=None), 5439: Logprob(logprob=-1.0916926860809326, rank=1, decoded_token=None)}, {1701: Logprob(logprob=-2.2964775562286377, rank=2, decoded_token=None), 555: Logprob(logprob=-0.17147766053676605, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.42406484484672546, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-3.539501428604126, rank=7, decoded_token=None), 6037: Logprob(logprob=-1.289501428604126, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-4.590996742248535, rank=15, decoded_token=None), 220: Logprob(logprob=-1.2159966230392456, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.18096934258937836, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.9475879669189453, rank=2, decoded_token=None), 3639: Logprob(logprob=-1.1975879669189453, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-0.4854806661605835, rank=1, decoded_token=None)}, {25800: Logprob(logprob=-3.8487393856048584, rank=9, decoded_token=None), 11: Logprob(logprob=-1.7862393856048584, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.1915293186903, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.07257572561502457, rank=1, decoded_token=None)}, {13: Logprob(logprob=-2.225902557373047, rank=3, decoded_token=None), 284: Logprob(logprob=-1.6009026765823364, rank=1, decoded_token=None)}, {2650: Logprob(logprob=-2.9975926876068115, rank=3, decoded_token=None), 3639: Logprob(logprob=-0.6225926280021667, rank=1, decoded_token=None)}, {1690: Logprob(logprob=-0.08352108299732208, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.6937007308006287, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.15021462738513947, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-0.1846829354763031, rank=1, decoded_token=None)}, {1587: Logprob(logprob=-0.9513101577758789, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.025589339435100555, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.003244970692321658, rank=1, decoded_token=None)}, {617: Logprob(logprob=-0.10589171200990677, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.1511233001947403, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.037622109055519104, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.09561489522457123, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.07025675475597382, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.002441641641780734, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021361514925956726, rank=1, decoded_token=None)}, {25541: Logprob(logprob=-11.017716407775879, rank=927, decoded_token=None), 7699: Logprob(logprob=-2.267716407775879, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.7192279100418091, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0011468507582321763, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00013636612857226282, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.001517931348644197, rank=1, decoded_token=None)}, {17: Logprob(logprob=-4.038790702819824, rank=7, decoded_token=None), 7699: Logprob(logprob=-2.913790464401245, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.023376699537038803, rank=1, decoded_token=None)}, {21129: Logprob(logprob=-5.540423393249512, rank=45, decoded_token=None), 2636: Logprob(logprob=-3.540423631668091, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.008513230830430984, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.00035577642847783864, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001481661747675389, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0015720878727734089, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.26859188079834, rank=2, decoded_token=None), 20: Logprob(logprob=-2.14359188079834, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.006552401464432478, rank=1, decoded_token=None)}, {24599: Logprob(logprob=-6.160186767578125, rank=81, decoded_token=None), 21129: Logprob(logprob=-2.535186529159546, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.004695461131632328, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.000506511190906167, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002585315378382802, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0038100522942841053, rank=1, decoded_token=None)}, {19: Logprob(logprob=-2.5259666442871094, rank=3, decoded_token=None), 18: Logprob(logprob=-0.7759665250778198, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.001276512397453189, rank=1, decoded_token=None)}, {5154: Logprob(logprob=-5.772514343261719, rank=71, decoded_token=None), 18070: Logprob(logprob=-2.772514581680298, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.5313923954963684, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004962034057825804, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0004538459761533886, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.0903221368789673, rank=1, decoded_token=None), 362: Logprob(logprob=-1.0903221368789673, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.23396459221839905, rank=1, decoded_token=None)}, {23956: Logprob(logprob=-3.7109880447387695, rank=5, decoded_token=None), 32: Logprob(logprob=-1.7109880447387695, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-2.3338446617126465, rank=3, decoded_token=None), 315: Logprob(logprob=-1.458844780921936, rank=1, decoded_token=None)}, {374: Logprob(logprob=-1.2901480197906494, rank=1, decoded_token=None)}, {13890: Logprob(logprob=-0.29379332065582275, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.004455045331269503, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.5699459910392761, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.582611322402954, rank=2, decoded_token=None), 17: Logprob(logprob=-2.457611322402954, rank=1, decoded_token=None)}, {865: Logprob(logprob=-3.8140597343444824, rank=6, decoded_token=None), 25800: Logprob(logprob=-0.939059853553772, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.22526046633720398, rank=1, decoded_token=None)}, {24: Logprob(logprob=-3.268810987472534, rank=8, decoded_token=None), 17: Logprob(logprob=-2.018810987472534, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9523714780807495, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.02629231847822666, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.002087677363306284, rank=1, decoded_token=None)}, {320: Logprob(logprob=-4.041932106018066, rank=2, decoded_token=None), 220: Logprob(logprob=-0.0419318750500679, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3275642395019531, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7747173309326172, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.01943170465528965, rank=1, decoded_token=None)}, {19: Logprob(logprob=-3.8843350410461426, rank=6, decoded_token=None), 24: Logprob(logprob=-0.2593349516391754, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.05427434667944908, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7900131344795227, rank=1, decoded_token=None)}, {320: Logprob(logprob=-1.6092212200164795, rank=2, decoded_token=None), 220: Logprob(logprob=-0.2342211753129959, rank=1, decoded_token=None)}, {21: Logprob(logprob=-4.122803688049316, rank=6, decoded_token=None), 20: Logprob(logprob=-0.8728036880493164, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.053970567882061005, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006345955654978752, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.5473098754882812, rank=5, decoded_token=None), 18: Logprob(logprob=-1.1723099946975708, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.06624624133110046, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0031123552471399307, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00019047829846385866, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.5430195927619934, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3349359631538391, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.17014674842357635, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.11895304173231125, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.2283027172088623, rank=4, decoded_token=None), 24: Logprob(logprob=-1.2283027172088623, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.21531498432159424, rank=1, decoded_token=None)}, {489: Logprob(logprob=-4.436285972595215, rank=3, decoded_token=None), 865: Logprob(logprob=-0.061286140233278275, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.43919575214385986, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.5670137405395508, rank=3, decoded_token=None), 19: Logprob(logprob=-1.3170137405395508, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.013229803182184696, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.020044738426804543, rank=1, decoded_token=None)}, {19: Logprob(logprob=-1.059314250946045, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.14613543450832367, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0012510338565334678, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00013481661153491586, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.36141881346702576, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.170744389295578, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.15453915297985077, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0653778612613678, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.4421030282974243, rank=3, decoded_token=None), 19: Logprob(logprob=-1.1921030282974243, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.09968782961368561, rank=1, decoded_token=None)}, {489: Logprob(logprob=-0.7550356984138489, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.3567902743816376, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.5658089518547058, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.03483690321445465, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.05940350890159607, rank=1, decoded_token=None)}, {24: Logprob(logprob=-1.1212691068649292, rank=2, decoded_token=None), 19: Logprob(logprob=-0.9962691068649292, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.013908135704696178, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0008878341759555042, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001971527235582471, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.19026270508766174, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.07903989404439926, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.1152166947722435, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.040283940732479095, rank=1, decoded_token=None)}, {24: Logprob(logprob=-0.6784765124320984, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.02332417666912079, rank=1, decoded_token=None)}, {865: Logprob(logprob=-4.38916015625, rank=4, decoded_token=None), 489: Logprob(logprob=-0.13916020095348358, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.059930216521024704, rank=1, decoded_token=None)}, {21: Logprob(logprob=-1.9063451290130615, rank=2, decoded_token=None), 20: Logprob(logprob=-0.4063451290130615, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.02287174016237259, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.002457695547491312, rank=1, decoded_token=None)}, {24: Logprob(logprob=-5.066433429718018, rank=5, decoded_token=None), 20: Logprob(logprob=-0.19143354892730713, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.015977919101715088, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004998686723411083, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0003066784702241421, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.108638048171997, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.18586991727352142, rank=1, decoded_token=None)}, {11874: Logprob(logprob=-5.224460124969482, rank=13, decoded_token=None), 32: Logprob(logprob=-1.849460244178772, rank=1, decoded_token=None)}, {4459: Logprob(logprob=-7.009128570556641, rank=124, decoded_token=None), 5219: Logprob(logprob=-1.821628451347351, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.6522552967071533, rank=1, decoded_token=None)}, {617: Logprob(logprob=-1.379534363746643, rank=2, decoded_token=None), 527: Logprob(logprob=-1.254534363746643, rank=1, decoded_token=None)}, {264: Logprob(logprob=-0.5606241226196289, rank=1, decoded_token=None)}, {3325: Logprob(logprob=-9.22218132019043, rank=39, decoded_token=None), 2694: Logprob(logprob=-0.2846815884113312, rank=1, decoded_token=None)}, {4279: Logprob(logprob=-0.061864301562309265, rank=1, decoded_token=None)}, {5361: Logprob(logprob=-0.45201748609542847, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.17637768387794495, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.023118602111935616, rank=1, decoded_token=None)}, {1399: Logprob(logprob=-3.963719367980957, rank=14, decoded_token=None), 717: Logprob(logprob=-2.338719367980957, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.09445195645093918, rank=1, decoded_token=None)}, {9062: Logprob(logprob=-5.071889877319336, rank=12, decoded_token=None), 578: Logprob(logprob=-1.196889877319336, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.6336301565170288, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.3426891267299652, rank=1, decoded_token=None)}, {2753: Logprob(logprob=-2.6435422897338867, rank=3, decoded_token=None), 220: Logprob(logprob=-1.0185424089431763, rank=1, decoded_token=None)}, {1109: Logprob(logprob=-0.004161983262747526, rank=1, decoded_token=None)}, {477: Logprob(logprob=-2.879474401473999, rank=3, decoded_token=None), 220: Logprob(logprob=-0.37947434186935425, rank=1, decoded_token=None)}, {6273: Logprob(logprob=-0.013294622302055359, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.0058578010648489, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.09096752852201462, rank=1, decoded_token=None)}, {717: Logprob(logprob=-5.163353443145752, rank=29, decoded_token=None), 1041: Logprob(logprob=-1.9133533239364624, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.1529577076435089, rank=1, decoded_token=None)}, {578: Logprob(logprob=-1.5697429180145264, rank=2, decoded_token=None), 16299: Logprob(logprob=-0.9447429180145264, rank=1, decoded_token=None)}, {12474: Logprob(logprob=-2.645151138305664, rank=3, decoded_token=None), 3325: Logprob(logprob=-1.270151138305664, rank=1, decoded_token=None)}, {4279: Logprob(logprob=-0.6883967518806458, rank=1, decoded_token=None)}, {8331: Logprob(logprob=-0.40138059854507446, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.16735176742076874, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.33446672558784485, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-0.18579617142677307, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.2953820526599884, rank=1, decoded_token=None)}, {285: Logprob(logprob=-9.538186073303223, rank=41, decoded_token=None), 374: Logprob(logprob=-0.038186460733413696, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.9321149587631226, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.0747475624084473, rank=3, decoded_token=None), 21: Logprob(logprob=-1.6997476816177368, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.17374888062477112, rank=1, decoded_token=None)}, {3639: Logprob(logprob=-1.1434378623962402, rank=2, decoded_token=None), 16299: Logprob(logprob=-0.8934378623962402, rank=1, decoded_token=None)}, {527: Logprob(logprob=-2.005824565887451, rank=2, decoded_token=None), 374: Logprob(logprob=-0.2558245360851288, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.07729481160640717, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-0.310687780380249, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.7019672989845276, rank=1, decoded_token=None), 4459: Logprob(logprob=-0.7019672989845276, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.0899902880191803, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.014821651391685009, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0012823462020605803, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.03980715200304985, rank=1, decoded_token=None)}, {21: Logprob(logprob=-1.936407446861267, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.24611333012580872, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.005055620335042477, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.329893112182617, rank=3, decoded_token=None), 717: Logprob(logprob=-1.4548931121826172, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.023442961275577545, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0009132028790190816, rank=1, decoded_token=None)}, {13: Logprob(logprob=-7.390703103737906e-05, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.004810308571904898, rank=1, decoded_token=None)}, {20: Logprob(logprob=-3.1714460849761963, rank=7, decoded_token=None), 21: Logprob(logprob=-1.5464460849761963, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.02755010686814785, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0016718233237043023, rank=1, decoded_token=None)}, {717: Logprob(logprob=-1.2207993268966675, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0012977044098079205, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.00026008085114881396, rank=1, decoded_token=None)}, {13: Logprob(logprob=-6.186770770000294e-05, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.005501368548721075, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.967453718185425, rank=8, decoded_token=None), 19: Logprob(logprob=-1.4674537181854248, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.003204688895493746, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0013855629367753863, rank=1, decoded_token=None)}, {717: Logprob(logprob=-0.7422707080841064, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0011626873165369034, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.00032074074260890484, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00017677174764685333, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.015494913794100285, rank=1, decoded_token=None)}, {717: Logprob(logprob=-2.0872957706451416, rank=3, decoded_token=None), 21: Logprob(logprob=-1.2122957706451416, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.002190573140978813, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.001105650793761015, rank=1, decoded_token=None)}, {868: Logprob(logprob=-2.141770362854004, rank=2, decoded_token=None), 605: Logprob(logprob=-1.016770362854004, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.02330053597688675, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.002792746527120471, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0005763299996033311, rank=1, decoded_token=None)}, {362: Logprob(logprob=-1.03548264503479, rank=1, decoded_token=None)}], outputs=[CompletionOutput(index=0, text='', token_ids=(271,), cumulative_logprob=None, logprobs=None, finish_reason=length, stop_reason=None)], finished=True, metrics=RequestMetrics(arrival_time=1732331737.7074056, last_token_time=1732331737.7074056, first_scheduled_time=1732331737.7121127, first_token_time=1732331737.8119168, time_in_queue=0.0047070980072021484, finished_time=1732331737.8124642, scheduler_time=0.001441366001017741, model_forward_time=None, model_execute_time=None), lora_request=None, num_cached_tokens=0)
Answer:  (-1.03548264503479, True)
Input:  [128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 11874, 4459, 5219, 617, 264, 3325, 4279, 5361, 315, 220, 1399, 13, 9062, 1396, 374, 2753, 1109, 477, 6273, 311, 220, 717, 13, 578, 12474, 4279, 8331, 315, 279, 1403, 5219, 285, 220, 17, 13, 3639, 527, 279, 1403, 5219, 5380, 32, 13, 220, 21, 323, 220, 605, 198, 33, 13, 220, 20, 323, 220, 717, 198, 34, 13, 220, 605, 323, 220, 717, 198, 35, 13, 220, 717, 323, 220, 868, 198, 16533, 25, 423]
Output:  RequestOutput(request_id=2, prompt=None, prompt_token_ids=[128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 11874, 4459, 5219, 617, 264, 3325, 4279, 5361, 315, 220, 1399, 13, 9062, 1396, 374, 2753, 1109, 477, 6273, 311, 220, 717, 13, 578, 12474, 4279, 8331, 315, 279, 1403, 5219, 285, 220, 17, 13, 3639, 527, 279, 1403, 5219, 5380, 32, 13, 220, 21, 323, 220, 605, 198, 33, 13, 220, 20, 323, 220, 717, 198, 34, 13, 220, 605, 323, 220, 717, 198, 35, 13, 220, 717, 323, 220, 868, 198, 16533, 25, 423], encoder_prompt=None, encoder_prompt_token_ids=None, prompt_logprobs=[None, {791: Logprob(logprob=-3.588294506072998, rank=4, decoded_token=None), 14924: Logprob(logprob=-1.213294506072998, rank=1, decoded_token=None)}, {2768: Logprob(logprob=-4.304756164550781, rank=2, decoded_token=None), 220: Logprob(logprob=-3.6797564029693604, rank=1, decoded_token=None)}, {527: Logprob(logprob=-2.969231605529785, rank=3, decoded_token=None), 374: Logprob(logprob=-1.9692317247390747, rank=1, decoded_token=None)}, {5361: Logprob(logprob=-9.316919326782227, rank=700, decoded_token=None), 279: Logprob(logprob=-1.566918969154358, rank=1, decoded_token=None)}, {5873: Logprob(logprob=-1.1169946193695068, rank=1, decoded_token=None)}, {4860: Logprob(logprob=-0.15302471816539764, rank=1, decoded_token=None)}, {320: Logprob(logprob=-3.3894879817962646, rank=9, decoded_token=None), 389: Logprob(logprob=-1.7644879817962646, rank=1, decoded_token=None)}, {4291: Logprob(logprob=-3.562437057495117, rank=2, decoded_token=None), 11865: Logprob(logprob=-0.562437117099762, rank=1, decoded_token=None)}, {11503: Logprob(logprob=-0.9702798128128052, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.4542173743247986, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.899801015853882, rank=4, decoded_token=None), 389: Logprob(logprob=-1.3998010158538818, rank=1, decoded_token=None)}, {36256: Logprob(logprob=-8.734892845153809, rank=631, decoded_token=None), 279: Logprob(logprob=-1.1098928451538086, rank=1, decoded_token=None)}, {38696: Logprob(logprob=-3.7674813270568848, rank=8, decoded_token=None), 19320: Logprob(logprob=-2.1424813270568848, rank=1, decoded_token=None)}, {382: Logprob(logprob=-5.597833156585693, rank=19, decoded_token=None), 13: Logprob(logprob=-1.097833275794983, rank=1, decoded_token=None)}, {791: Logprob(logprob=-3.544769287109375, rank=4, decoded_token=None), 16: Logprob(logprob=-1.4197694063186646, rank=1, decoded_token=None)}, {7187: Logprob(logprob=-7.414687633514404, rank=167, decoded_token=None), 2768: Logprob(logprob=-2.3521876335144043, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.11540365219116211, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.7252726554870605, rank=2, decoded_token=None), 264: Logprob(logprob=-0.4752727150917053, rank=1, decoded_token=None)}, {3363: Logprob(logprob=-1.8480002880096436, rank=1, decoded_token=None)}, {1405: Logprob(logprob=-5.9969987869262695, rank=13, decoded_token=None), 315: Logprob(logprob=-0.24699899554252625, rank=1, decoded_token=None)}, {33126: Logprob(logprob=-9.10548210144043, rank=325, decoded_token=None), 358: Logprob(logprob=-1.292981743812561, rank=1, decoded_token=None)}, {574: Logprob(logprob=-5.349006652832031, rank=8, decoded_token=None), 6439: Logprob(logprob=-0.4740064740180969, rank=1, decoded_token=None)}, {9405: Logprob(logprob=-0.40580296516418457, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.5615864396095276, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.7438945174217224, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-7.263688087463379, rank=140, decoded_token=None), 1041: Logprob(logprob=-2.638688087463379, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.7120769619941711, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-8.756370544433594, rank=570, decoded_token=None), 931: Logprob(logprob=-0.38137099146842957, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.46257808804512024, rank=1, decoded_token=None)}, {3639: Logprob(logprob=-4.10749626159668, rank=8, decoded_token=None), 578: Logprob(logprob=-1.2324963808059692, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.29674193263053894, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.1783972829580307, rank=1, decoded_token=None)}, {907: Logprob(logprob=-5.722339153289795, rank=27, decoded_token=None), 7187: Logprob(logprob=-0.8473392128944397, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.03685179725289345, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.9906996488571167, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.191212177276611, rank=12, decoded_token=None), 7187: Logprob(logprob=-1.1912120580673218, rank=1, decoded_token=None)}, {20: Logprob(logprob=-3.4952895641326904, rank=3, decoded_token=None), 605: Logprob(logprob=-2.9952895641326904, rank=1, decoded_token=None)}, {304: Logprob(logprob=-6.860769271850586, rank=33, decoded_token=None), 339: Logprob(logprob=-0.4857691526412964, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.4738154709339142, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.81992244720459, rank=9, decoded_token=None), 2768: Logprob(logprob=-1.5699224472045898, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.851509690284729, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-0.4733523726463318, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.3776562213897705, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-0.04871302843093872, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-3.7120940685272217, rank=5, decoded_token=None), 1980: Logprob(logprob=-0.8370941281318665, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.0033669471740723, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.2580585777759552, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.20247121155261993, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.971443772315979, rank=1, decoded_token=None)}, {9214: Logprob(logprob=-7.329587459564209, rank=44, decoded_token=None), 11: Logprob(logprob=-0.6420875191688538, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.33627015352249146, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.003795088967308402, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0006998711614869535, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021235832944512367, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.1533547639846802, rank=1, decoded_token=None)}, {11758: Logprob(logprob=-1.9098384380340576, rank=2, decoded_token=None), 11990: Logprob(logprob=-1.4098384380340576, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.007843528874218464, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0015495923580601811, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0005785936955362558, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006402693688869476, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.09296748787164688, rank=1, decoded_token=None)}, {22781: Logprob(logprob=-0.6998193264007568, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0074472189880907536, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0022168601863086224, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0005930095794610679, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.019136684015393257, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.05925050005316734, rank=1, decoded_token=None)}, {6305: Logprob(logprob=-0.6276966333389282, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.2591150999069214, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.909871518611908, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.060657717287540436, rank=1, decoded_token=None)}, {362: Logprob(logprob=-1.2651628255844116, rank=2, decoded_token=None), 423: Logprob(logprob=-1.1401628255844116, rank=1, decoded_token=None)}, {271: Logprob(logprob=-1.236945629119873, rank=2, decoded_token=None), 128001: Logprob(logprob=-0.7369455695152283, rank=1, decoded_token=None)}, {43819: Logprob(logprob=-12.281052589416504, rank=2698, decoded_token=None), 791: Logprob(logprob=-0.8435525894165039, rank=1, decoded_token=None)}, {21475: Logprob(logprob=-0.7285953164100647, rank=1, decoded_token=None)}, {1511: Logprob(logprob=-6.596356391906738, rank=50, decoded_token=None), 374: Logprob(logprob=-2.0338563919067383, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.3166232109069824, rank=3, decoded_token=None), 264: Logprob(logprob=-1.3166230916976929, rank=1, decoded_token=None)}, {6037: Logprob(logprob=-6.134354591369629, rank=53, decoded_token=None), 15150: Logprob(logprob=-2.509354829788208, rank=1, decoded_token=None)}, {330: Logprob(logprob=-3.653575897216797, rank=9, decoded_token=None), 315: Logprob(logprob=-1.5285758972167969, rank=1, decoded_token=None)}, {2261: Logprob(logprob=-4.241303443908691, rank=15, decoded_token=None), 2746: Logprob(logprob=-2.6163032054901123, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.6807642579078674, rank=1, decoded_token=None)}, {806: Logprob(logprob=-4.885201930999756, rank=18, decoded_token=None), 20: Logprob(logprob=-1.3852018117904663, rank=1, decoded_token=None)}, {1: Logprob(logprob=-1.440927505493164, rank=2, decoded_token=None), 311: Logprob(logprob=-0.9409274458885193, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.5772078633308411, rank=1, decoded_token=None)}, {1893: Logprob(logprob=-6.191239356994629, rank=44, decoded_token=None), 1505: Logprob(logprob=-1.5662392377853394, rank=1, decoded_token=None)}, {279: Logprob(logprob=-1.369935393333435, rank=2, decoded_token=None), 264: Logprob(logprob=-0.7449353933334351, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.322933554649353, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-6.340333938598633, rank=23, decoded_token=None), 220: Logprob(logprob=-0.2778337895870209, rank=1, decoded_token=None)}, {6982: Logprob(logprob=-3.008331298828125, rank=5, decoded_token=None), 220: Logprob(logprob=-1.2583311796188354, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-0.696544349193573, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.47080329060554504, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.408674716949463, rank=9, decoded_token=None), 3639: Logprob(logprob=-0.7836745381355286, rank=1, decoded_token=None)}, {605: Logprob(logprob=-4.432986259460449, rank=13, decoded_token=None), 16: Logprob(logprob=-2.18298602104187, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.9232057332992554, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.13041946291923523, rank=1, decoded_token=None)}, {1691: Logprob(logprob=-0.8227146863937378, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.007162133697420359, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.016214758157730103, rank=1, decoded_token=None)}, {843: Logprob(logprob=-0.13016277551651, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.03512261062860489, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.20052661001682281, rank=1, decoded_token=None)}, {3391: Logprob(logprob=-0.02468840219080448, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.08266056329011917, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3703943192958832, rank=1, decoded_token=None)}, {4370: Logprob(logprob=-0.017463840544223785, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-9.801653861999512, rank=120, decoded_token=None), 11: Logprob(logprob=-0.17665395140647888, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-4.195326805114746, rank=8, decoded_token=None), 1396: Logprob(logprob=-1.070326566696167, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.4466686248779297, rank=2, decoded_token=None), 374: Logprob(logprob=-0.44666874408721924, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.517330527305603, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.113140106201172, rank=3, decoded_token=None), 6037: Logprob(logprob=-0.8631401658058167, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.443703293800354, rank=2, decoded_token=None), 220: Logprob(logprob=-1.318703293800354, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.23402449488639832, rank=1, decoded_token=None)}, {837: Logprob(logprob=-0.6284106373786926, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.37667617201805115, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.0740572139620781, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.009778810665011406, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.5895971655845642, rank=1, decoded_token=None)}, {220: Logprob(logprob=-2.43047833442688, rank=5, decoded_token=None), 1176: Logprob(logprob=-2.05547833442688, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.1376230716705322, rank=3, decoded_token=None), 806: Logprob(logprob=-1.8876230716705322, rank=1, decoded_token=None)}, {339: Logprob(logprob=-0.6972476840019226, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.1368379592895508, rank=2, decoded_token=None), 4751: Logprob(logprob=-0.5118379592895508, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.17106032371521, rank=2, decoded_token=None), 374: Logprob(logprob=-0.54606032371521, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.014991242438554764, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.19605356454849243, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.600100040435791, rank=2, decoded_token=None), 374: Logprob(logprob=-0.10010002553462982, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.20332926511764526, rank=1, decoded_token=None)}, {459: Logprob(logprob=-4.175275802612305, rank=6, decoded_token=None), 220: Logprob(logprob=-0.5502755641937256, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.4642753601074219, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.02154143527150154, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.20088475942611694, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.002081967191770673, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0003781795676331967, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.056677043437957764, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.308137893676758, rank=4, decoded_token=None), 220: Logprob(logprob=-0.3081379532814026, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.6069552898406982, rank=4, decoded_token=None), 220: Logprob(logprob=-1.8569552898406982, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.774920642375946, rank=1, decoded_token=None)}, {2646: Logprob(logprob=-3.097163200378418, rank=8, decoded_token=None), 3136: Logprob(logprob=-1.8471633195877075, rank=1, decoded_token=None)}, {617: Logprob(logprob=-2.366727113723755, rank=3, decoded_token=None), 842: Logprob(logprob=-1.1167271137237549, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.652055263519287, rank=7, decoded_token=None), 264: Logprob(logprob=-0.9020552039146423, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-2.718801498413086, rank=4, decoded_token=None), 24871: Logprob(logprob=-0.7188013792037964, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.0695536658167839, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-3.1284074783325195, rank=4, decoded_token=None), 304: Logprob(logprob=-0.87840735912323, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.013708023354411125, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-0.05030599236488342, rank=1, decoded_token=None)}, {1023: Logprob(logprob=-0.0032524564303457737, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03535380959510803, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.010325347073376179, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00024101213784888387, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.140742689371109, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-5.092126846313477, rank=9, decoded_token=None), 1396: Logprob(logprob=-0.8421266674995422, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.4843006134033203, rank=4, decoded_token=None), 1396: Logprob(logprob=-0.23430049419403076, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.11257536709308624, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.3171550929546356, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.00759677030146122, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.02107418328523636, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.09753574430942535, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.4928134083747864, rank=1, decoded_token=None)}, {459: Logprob(logprob=-3.0057926177978516, rank=5, decoded_token=None), 220: Logprob(logprob=-1.7557926177978516, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.8141931891441345, rank=2, decoded_token=None), 10535: Logprob(logprob=-0.6891931891441345, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.07718711346387863, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-7.487396240234375, rank=28, decoded_token=None), 627: Logprob(logprob=-0.6123961806297302, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.15662676095962524, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.012751000933349133, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.005057043395936489, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03090181201696396, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.02183726243674755, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0004822045157197863, rank=1, decoded_token=None)}, {1442: Logprob(logprob=-4.839500427246094, rank=6, decoded_token=None), 578: Logprob(logprob=-0.33950039744377136, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.566116213798523, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.3449784517288208, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.1413413286209106, rank=1, decoded_token=None)}, {3940: Logprob(logprob=-4.172558307647705, rank=14, decoded_token=None), 374: Logprob(logprob=-1.4225584268569946, rank=1, decoded_token=None)}, {449: Logprob(logprob=-0.06449252367019653, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.9140709638595581, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.7719259262084961, rank=2, decoded_token=None), 1524: Logprob(logprob=-0.6469259262084961, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.007958251982927322, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-2.8203039169311523, rank=2, decoded_token=None), 11: Logprob(logprob=-0.1953037977218628, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.6145880222320557, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.5863301753997803, rank=2, decoded_token=None), 1828: Logprob(logprob=-0.4613301157951355, rank=1, decoded_token=None)}, {1053: Logprob(logprob=-2.094866991043091, rank=2, decoded_token=None), 690: Logprob(logprob=-0.21986699104309082, rank=1, decoded_token=None)}, {617: Logprob(logprob=-3.046118974685669, rank=6, decoded_token=None), 2646: Logprob(logprob=-0.921118974685669, rank=1, decoded_token=None)}, {1193: Logprob(logprob=-3.4279844760894775, rank=7, decoded_token=None), 459: Logprob(logprob=-0.8029844760894775, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.308468222618103, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.018749739974737167, rank=1, decoded_token=None)}, {304: Logprob(logprob=-2.9477155208587646, rank=3, decoded_token=None), 627: Logprob(logprob=-0.3227156102657318, rank=1, decoded_token=None)}, {433: Logprob(logprob=-0.40446826815605164, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.21264755725860596, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.025269512087106705, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0027451948262751102, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.1849918365478516, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.1902220994234085, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.3071374893188477, rank=2, decoded_token=None), 791: Logprob(logprob=-1.9321374893188477, rank=1, decoded_token=None)}, {2860: Logprob(logprob=-5.8816609382629395, rank=57, decoded_token=None), 1396: Logprob(logprob=-2.6941609382629395, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.02797979861497879, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.23590943217277527, rank=1, decoded_token=None)}, {966: Logprob(logprob=-4.081195831298828, rank=3, decoded_token=None), 605: Logprob(logprob=-3.956195592880249, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-6.011350631713867, rank=47, decoded_token=None), 4236: Logprob(logprob=-1.6988508701324463, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.6415536403656006, rank=9, decoded_token=None), 31408: Logprob(logprob=-1.8915536403656006, rank=1, decoded_token=None)}, {1514: Logprob(logprob=-1.6141451597213745, rank=2, decoded_token=None), 387: Logprob(logprob=-0.9891451597213745, rank=1, decoded_token=None)}, {19794: Logprob(logprob=-4.327911853790283, rank=6, decoded_token=None), 304: Logprob(logprob=-0.7029119729995728, rank=1, decoded_token=None)}, {520: Logprob(logprob=-2.610771656036377, rank=4, decoded_token=None), 304: Logprob(logprob=-0.7357717752456665, rank=1, decoded_token=None)}, {264: Logprob(logprob=-0.8295858502388, rank=1, decoded_token=None)}, {6246: Logprob(logprob=-5.445433616638184, rank=25, decoded_token=None), 16520: Logprob(logprob=-1.0704338550567627, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.8759067058563232, rank=1, decoded_token=None)}, {2684: Logprob(logprob=-3.019108295440674, rank=7, decoded_token=None), 1442: Logprob(logprob=-1.7691081762313843, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.6913377642631531, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.022329222410917282, rank=1, decoded_token=None)}, {7041: Logprob(logprob=-3.9607925415039062, rank=6, decoded_token=None), 220: Logprob(logprob=-0.33579257130622864, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.288790225982666, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.200063943862915, rank=1, decoded_token=None), 17: Logprob(logprob=-2.200063943862915, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-0.6154614090919495, rank=1, decoded_token=None)}, {389: Logprob(logprob=-2.105520248413086, rank=3, decoded_token=None), 505: Logprob(logprob=-1.730520248413086, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-1.2467472553253174, rank=2, decoded_token=None), 279: Logprob(logprob=-0.49674728512763977, rank=1, decoded_token=None)}, {2128: Logprob(logprob=-0.08914763480424881, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.16352039575576782, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-2.8792216777801514, rank=4, decoded_token=None), 2650: Logprob(logprob=-1.0042216777801514, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-1.2772589921951294, rank=2, decoded_token=None), 315: Logprob(logprob=-1.0272589921951294, rank=1, decoded_token=None)}, {12722: Logprob(logprob=-4.80352258682251, rank=9, decoded_token=None), 374: Logprob(logprob=-0.5535227656364441, rank=1, decoded_token=None)}, {15100: Logprob(logprob=-4.0572991371154785, rank=7, decoded_token=None), 16964: Logprob(logprob=-0.5572991371154785, rank=1, decoded_token=None)}, {1268: Logprob(logprob=-0.9948503971099854, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.8683412075042725, rank=3, decoded_token=None), 279: Logprob(logprob=-1.2433412075042725, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-1.9003151655197144, rank=2, decoded_token=None), 8417: Logprob(logprob=-1.1503151655197144, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.11957751214504242, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.29255211353302, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.01057143323123455, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.7831801772117615, rank=1, decoded_token=None)}, {4460: Logprob(logprob=-3.463230609893799, rank=3, decoded_token=None), 430: Logprob(logprob=-0.8382306098937988, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9446107149124146, rank=2, decoded_token=None), 311: Logprob(logprob=-0.8196107149124146, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.04526291787624359, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.002380991354584694, rank=1, decoded_token=None)}, {2758: Logprob(logprob=-3.3964881896972656, rank=8, decoded_token=None), 578: Logprob(logprob=-2.1464881896972656, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.38579824566841125, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.9311184883117676, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.38374000787734985, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.3195199966430664, rank=2, decoded_token=None), 279: Logprob(logprob=-0.44451993703842163, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.10298678278923035, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.7452938556671143, rank=2, decoded_token=None), 627: Logprob(logprob=-0.7452937960624695, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.4569380283355713, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.816202163696289, rank=4, decoded_token=None), 279: Logprob(logprob=-0.06620228290557861, rank=1, decoded_token=None)}, {1758: Logprob(logprob=-0.8483269810676575, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.920579731464386, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.4476555585861206, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0015714927576482296, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00015269544383045286, rank=1, decoded_token=None)}, {64002: Logprob(logprob=-2.5445642471313477, rank=3, decoded_token=None), 94310: Logprob(logprob=-0.5445643663406372, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.040661152452230453, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.1308070570230484, rank=1, decoded_token=None)}, {555: Logprob(logprob=-0.035039275884628296, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.00441908510401845, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.013742946088314056, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.09101356565952301, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.06291541457176208, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.23998305201530457, rank=1, decoded_token=None)}, {21: Logprob(logprob=-0.0345701165497303, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.00949143711477518, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.0618923157453537, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0015372138004750013, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00010275312524754554, rank=1, decoded_token=None)}, {72159: Logprob(logprob=-1.416687250137329, rank=2, decoded_token=None), 94310: Logprob(logprob=-0.7916873097419739, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.022464442998170853, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.1311088651418686, rank=1, decoded_token=None)}, {323: Logprob(logprob=-5.759943962097168, rank=2, decoded_token=None), 555: Logprob(logprob=-0.009944183751940727, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.005024425685405731, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.10427399724721909, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.16913986206054688, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.024288708344101906, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04584870859980583, rank=1, decoded_token=None)}, {3965: Logprob(logprob=-0.16225406527519226, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.09998979419469833, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.008857247419655323, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0020776845049113035, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0003250309091527015, rank=1, decoded_token=None)}, {94310: Logprob(logprob=-0.7316688895225525, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.024832606315612793, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.6226915121078491, rank=1, decoded_token=None)}, {505: Logprob(logprob=-0.10961204022169113, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.010747289285063744, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.05260615423321724, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.02702752687036991, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.012585973367094994, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0407465361058712, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.009129801765084267, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.017733123153448105, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.05732721835374832, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004556629806756973, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0005477358354255557, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.3356648683547974, rank=3, decoded_token=None), 356: Logprob(logprob=-1.2106648683547974, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.2082667499780655, rank=1, decoded_token=None)}, {32: Logprob(logprob=-1.9418500661849976, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-5.220272541046143, rank=29, decoded_token=None), 2860: Logprob(logprob=-3.0952725410461426, rank=1, decoded_token=None)}, {31878: Logprob(logprob=-1.610248327255249, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.7332974672317505, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-8.542618751525879, rank=186, decoded_token=None), 18: Logprob(logprob=-2.542618751525879, rank=1, decoded_token=None)}, {2204: Logprob(logprob=-2.599426507949829, rank=2, decoded_token=None), 13840: Logprob(logprob=-2.474426507949829, rank=1, decoded_token=None)}, {8146: Logprob(logprob=-5.755116939544678, rank=24, decoded_token=None), 4595: Logprob(logprob=-1.3801170587539673, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.027865495532751083, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-3.957357883453369, rank=10, decoded_token=None), 259: Logprob(logprob=-2.832357883453369, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.40048009157180786, rank=1, decoded_token=None)}, {2435: Logprob(logprob=-4.845759868621826, rank=13, decoded_token=None), 1442: Logprob(logprob=-1.4707597494125366, rank=1, decoded_token=None)}, {617: Logprob(logprob=-1.3862104415893555, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.847692608833313, rank=1, decoded_token=None)}, {914: Logprob(logprob=-4.27924108505249, rank=17, decoded_token=None), 18: Logprob(logprob=-2.9042410850524902, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-4.734525680541992, rank=13, decoded_token=None), 2204: Logprob(logprob=-0.9845254421234131, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.17049723863601685, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-2.0231032371520996, rank=2, decoded_token=None), 2579: Logprob(logprob=-1.7731033563613892, rank=1, decoded_token=None)}, {1933: Logprob(logprob=-0.12822699546813965, rank=1, decoded_token=None)}, {304: Logprob(logprob=-3.447733163833618, rank=5, decoded_token=None), 13: Logprob(logprob=-0.4477331042289734, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-7.156528472900391, rank=17, decoded_token=None), 5708: Logprob(logprob=-0.2815282940864563, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.10994840413331985, rank=1, decoded_token=None)}, {578: Logprob(logprob=-2.5678606033325195, rank=5, decoded_token=None), 2650: Logprob(logprob=-1.317860722541809, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.8113741874694824, rank=3, decoded_token=None), 3637: Logprob(logprob=-0.8113741278648376, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.09289318323135376, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.6233457922935486, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.7501171827316284, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-2.1427054405212402, rank=2, decoded_token=None), 1855: Logprob(logprob=-0.5177054405212402, rank=1, decoded_token=None)}, {279: Logprob(logprob=-3.4584686756134033, rank=6, decoded_token=None), 304: Logprob(logprob=-1.3334686756134033, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.026147279888391495, rank=1, decoded_token=None)}, {706: Logprob(logprob=-0.34631913900375366, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.6868782043457031, rank=2, decoded_token=None), 374: Logprob(logprob=-1.0618782043457031, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.2303718775510788, rank=1, decoded_token=None)}, {649: Logprob(logprob=-2.7231407165527344, rank=2, decoded_token=None), 374: Logprob(logprob=-0.3481407165527344, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.054041046649217606, rank=1, decoded_token=None)}, {1766: Logprob(logprob=-2.5916926860809326, rank=4, decoded_token=None), 5439: Logprob(logprob=-1.0916926860809326, rank=1, decoded_token=None)}, {1701: Logprob(logprob=-2.2964775562286377, rank=2, decoded_token=None), 555: Logprob(logprob=-0.17147766053676605, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.42406484484672546, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-3.539501428604126, rank=7, decoded_token=None), 6037: Logprob(logprob=-1.289501428604126, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-4.590996742248535, rank=15, decoded_token=None), 220: Logprob(logprob=-1.2159966230392456, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.18096934258937836, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.9475879669189453, rank=2, decoded_token=None), 3639: Logprob(logprob=-1.1975879669189453, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-0.4854806661605835, rank=1, decoded_token=None)}, {25800: Logprob(logprob=-3.8487393856048584, rank=9, decoded_token=None), 11: Logprob(logprob=-1.7862393856048584, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.1915293186903, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.07257572561502457, rank=1, decoded_token=None)}, {13: Logprob(logprob=-2.225902557373047, rank=3, decoded_token=None), 284: Logprob(logprob=-1.6009026765823364, rank=1, decoded_token=None)}, {2650: Logprob(logprob=-2.9975926876068115, rank=3, decoded_token=None), 3639: Logprob(logprob=-0.6225926280021667, rank=1, decoded_token=None)}, {1690: Logprob(logprob=-0.08352108299732208, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.6937007308006287, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.15021462738513947, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-0.1846829354763031, rank=1, decoded_token=None)}, {1587: Logprob(logprob=-0.9513101577758789, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.025589339435100555, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.003244970692321658, rank=1, decoded_token=None)}, {617: Logprob(logprob=-0.10589171200990677, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.1511233001947403, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.037622109055519104, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.09561489522457123, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.07025675475597382, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.002441641641780734, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021361514925956726, rank=1, decoded_token=None)}, {25541: Logprob(logprob=-11.017716407775879, rank=927, decoded_token=None), 7699: Logprob(logprob=-2.267716407775879, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.7192279100418091, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0011468507582321763, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00013636612857226282, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.001517931348644197, rank=1, decoded_token=None)}, {17: Logprob(logprob=-4.038790702819824, rank=7, decoded_token=None), 7699: Logprob(logprob=-2.913790464401245, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.023376699537038803, rank=1, decoded_token=None)}, {21129: Logprob(logprob=-5.540423393249512, rank=45, decoded_token=None), 2636: Logprob(logprob=-3.540423631668091, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.008513230830430984, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.00035577642847783864, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001481661747675389, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0015720878727734089, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.26859188079834, rank=2, decoded_token=None), 20: Logprob(logprob=-2.14359188079834, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.006552401464432478, rank=1, decoded_token=None)}, {24599: Logprob(logprob=-6.160186767578125, rank=81, decoded_token=None), 21129: Logprob(logprob=-2.535186529159546, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.004695461131632328, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.000506511190906167, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002585315378382802, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0038100522942841053, rank=1, decoded_token=None)}, {19: Logprob(logprob=-2.5259666442871094, rank=3, decoded_token=None), 18: Logprob(logprob=-0.7759665250778198, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.001276512397453189, rank=1, decoded_token=None)}, {5154: Logprob(logprob=-5.772514343261719, rank=71, decoded_token=None), 18070: Logprob(logprob=-2.772514581680298, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.5313923954963684, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004962034057825804, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0004538459761533886, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.0903221368789673, rank=1, decoded_token=None), 362: Logprob(logprob=-1.0903221368789673, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.23396459221839905, rank=1, decoded_token=None)}, {23956: Logprob(logprob=-3.7109880447387695, rank=5, decoded_token=None), 32: Logprob(logprob=-1.7109880447387695, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-2.3338446617126465, rank=3, decoded_token=None), 315: Logprob(logprob=-1.458844780921936, rank=1, decoded_token=None)}, {374: Logprob(logprob=-1.2901480197906494, rank=1, decoded_token=None)}, {13890: Logprob(logprob=-0.29379332065582275, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.004455045331269503, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.5699459910392761, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.582611322402954, rank=2, decoded_token=None), 17: Logprob(logprob=-2.457611322402954, rank=1, decoded_token=None)}, {865: Logprob(logprob=-3.8140597343444824, rank=6, decoded_token=None), 25800: Logprob(logprob=-0.939059853553772, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.22526046633720398, rank=1, decoded_token=None)}, {24: Logprob(logprob=-3.268810987472534, rank=8, decoded_token=None), 17: Logprob(logprob=-2.018810987472534, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9523714780807495, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.02629231847822666, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.002087677363306284, rank=1, decoded_token=None)}, {320: Logprob(logprob=-4.041932106018066, rank=2, decoded_token=None), 220: Logprob(logprob=-0.0419318750500679, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3275642395019531, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7747173309326172, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.01943170465528965, rank=1, decoded_token=None)}, {19: Logprob(logprob=-3.8843350410461426, rank=6, decoded_token=None), 24: Logprob(logprob=-0.2593349516391754, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.05427434667944908, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7900131344795227, rank=1, decoded_token=None)}, {320: Logprob(logprob=-1.6092212200164795, rank=2, decoded_token=None), 220: Logprob(logprob=-0.2342211753129959, rank=1, decoded_token=None)}, {21: Logprob(logprob=-4.122803688049316, rank=6, decoded_token=None), 20: Logprob(logprob=-0.8728036880493164, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.053970567882061005, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006345955654978752, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.5473098754882812, rank=5, decoded_token=None), 18: Logprob(logprob=-1.1723099946975708, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.06624624133110046, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0031123552471399307, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00019047829846385866, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.5430195927619934, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3349359631538391, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.17014674842357635, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.11895304173231125, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.2283027172088623, rank=4, decoded_token=None), 24: Logprob(logprob=-1.2283027172088623, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.21531498432159424, rank=1, decoded_token=None)}, {489: Logprob(logprob=-4.436285972595215, rank=3, decoded_token=None), 865: Logprob(logprob=-0.061286140233278275, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.43919575214385986, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.5670137405395508, rank=3, decoded_token=None), 19: Logprob(logprob=-1.3170137405395508, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.013229803182184696, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.020044738426804543, rank=1, decoded_token=None)}, {19: Logprob(logprob=-1.059314250946045, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.14613543450832367, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0012510338565334678, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00013481661153491586, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.36141881346702576, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.170744389295578, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.15453915297985077, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0653778612613678, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.4421030282974243, rank=3, decoded_token=None), 19: Logprob(logprob=-1.1921030282974243, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.09968782961368561, rank=1, decoded_token=None)}, {489: Logprob(logprob=-0.7550356984138489, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.3567902743816376, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.5658089518547058, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.03483690321445465, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.05940350890159607, rank=1, decoded_token=None)}, {24: Logprob(logprob=-1.1212691068649292, rank=2, decoded_token=None), 19: Logprob(logprob=-0.9962691068649292, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.013908135704696178, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0008878341759555042, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001971527235582471, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.19026270508766174, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.07903989404439926, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.1152166947722435, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.040283940732479095, rank=1, decoded_token=None)}, {24: Logprob(logprob=-0.6784765124320984, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.02332417666912079, rank=1, decoded_token=None)}, {865: Logprob(logprob=-4.38916015625, rank=4, decoded_token=None), 489: Logprob(logprob=-0.13916020095348358, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.059930216521024704, rank=1, decoded_token=None)}, {21: Logprob(logprob=-1.9063451290130615, rank=2, decoded_token=None), 20: Logprob(logprob=-0.4063451290130615, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.02287174016237259, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.002457695547491312, rank=1, decoded_token=None)}, {24: Logprob(logprob=-5.066433429718018, rank=5, decoded_token=None), 20: Logprob(logprob=-0.19143354892730713, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.015977919101715088, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004998686723411083, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0003066784702241421, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.108638048171997, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.18586991727352142, rank=1, decoded_token=None)}, {11874: Logprob(logprob=-5.224460124969482, rank=13, decoded_token=None), 32: Logprob(logprob=-1.849460244178772, rank=1, decoded_token=None)}, {4459: Logprob(logprob=-7.009128570556641, rank=124, decoded_token=None), 5219: Logprob(logprob=-1.821628451347351, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.6522552967071533, rank=1, decoded_token=None)}, {617: Logprob(logprob=-1.379534363746643, rank=2, decoded_token=None), 527: Logprob(logprob=-1.254534363746643, rank=1, decoded_token=None)}, {264: Logprob(logprob=-0.5606241226196289, rank=1, decoded_token=None)}, {3325: Logprob(logprob=-9.22218132019043, rank=39, decoded_token=None), 2694: Logprob(logprob=-0.2846815884113312, rank=1, decoded_token=None)}, {4279: Logprob(logprob=-0.061864301562309265, rank=1, decoded_token=None)}, {5361: Logprob(logprob=-0.45201748609542847, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.17637768387794495, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.023118602111935616, rank=1, decoded_token=None)}, {1399: Logprob(logprob=-3.963719367980957, rank=14, decoded_token=None), 717: Logprob(logprob=-2.338719367980957, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.09445195645093918, rank=1, decoded_token=None)}, {9062: Logprob(logprob=-5.071889877319336, rank=12, decoded_token=None), 578: Logprob(logprob=-1.196889877319336, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.6336301565170288, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.3426891267299652, rank=1, decoded_token=None)}, {2753: Logprob(logprob=-2.6435422897338867, rank=3, decoded_token=None), 220: Logprob(logprob=-1.0185424089431763, rank=1, decoded_token=None)}, {1109: Logprob(logprob=-0.004161983262747526, rank=1, decoded_token=None)}, {477: Logprob(logprob=-2.879474401473999, rank=3, decoded_token=None), 220: Logprob(logprob=-0.37947434186935425, rank=1, decoded_token=None)}, {6273: Logprob(logprob=-0.013294622302055359, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.0058578010648489, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.09096752852201462, rank=1, decoded_token=None)}, {717: Logprob(logprob=-5.163353443145752, rank=29, decoded_token=None), 1041: Logprob(logprob=-1.9133533239364624, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.1529577076435089, rank=1, decoded_token=None)}, {578: Logprob(logprob=-1.5697429180145264, rank=2, decoded_token=None), 16299: Logprob(logprob=-0.9447429180145264, rank=1, decoded_token=None)}, {12474: Logprob(logprob=-2.645151138305664, rank=3, decoded_token=None), 3325: Logprob(logprob=-1.270151138305664, rank=1, decoded_token=None)}, {4279: Logprob(logprob=-0.6883967518806458, rank=1, decoded_token=None)}, {8331: Logprob(logprob=-0.40138059854507446, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.16735176742076874, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.33446672558784485, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-0.18579617142677307, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.2953820526599884, rank=1, decoded_token=None)}, {285: Logprob(logprob=-9.538186073303223, rank=41, decoded_token=None), 374: Logprob(logprob=-0.038186460733413696, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.9321149587631226, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.0747475624084473, rank=3, decoded_token=None), 21: Logprob(logprob=-1.6997476816177368, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.17374888062477112, rank=1, decoded_token=None)}, {3639: Logprob(logprob=-1.1434378623962402, rank=2, decoded_token=None), 16299: Logprob(logprob=-0.8934378623962402, rank=1, decoded_token=None)}, {527: Logprob(logprob=-2.005824565887451, rank=2, decoded_token=None), 374: Logprob(logprob=-0.2558245360851288, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.07729481160640717, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-0.310687780380249, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.7019672989845276, rank=1, decoded_token=None), 4459: Logprob(logprob=-0.7019672989845276, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.0899902880191803, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.014821651391685009, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0012823462020605803, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.03980715200304985, rank=1, decoded_token=None)}, {21: Logprob(logprob=-1.936407446861267, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.24611333012580872, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.005055620335042477, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.329893112182617, rank=3, decoded_token=None), 717: Logprob(logprob=-1.4548931121826172, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.023442961275577545, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0009132028790190816, rank=1, decoded_token=None)}, {13: Logprob(logprob=-7.390703103737906e-05, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.004810308571904898, rank=1, decoded_token=None)}, {20: Logprob(logprob=-3.1714460849761963, rank=7, decoded_token=None), 21: Logprob(logprob=-1.5464460849761963, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.02755010686814785, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0016718233237043023, rank=1, decoded_token=None)}, {717: Logprob(logprob=-1.2207993268966675, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0012977044098079205, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.00026008085114881396, rank=1, decoded_token=None)}, {13: Logprob(logprob=-6.186770770000294e-05, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.005501368548721075, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.967453718185425, rank=8, decoded_token=None), 19: Logprob(logprob=-1.4674537181854248, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.003204688895493746, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0013855629367753863, rank=1, decoded_token=None)}, {717: Logprob(logprob=-0.7422707080841064, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0011626873165369034, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.00032074074260890484, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00017677174764685333, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.015494913794100285, rank=1, decoded_token=None)}, {717: Logprob(logprob=-2.0872957706451416, rank=3, decoded_token=None), 21: Logprob(logprob=-1.2122957706451416, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.002190573140978813, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.001105650793761015, rank=1, decoded_token=None)}, {868: Logprob(logprob=-2.141770362854004, rank=2, decoded_token=None), 605: Logprob(logprob=-1.016770362854004, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.02330053597688675, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.002792746527120471, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0005763299996033311, rank=1, decoded_token=None)}, {423: Logprob(logprob=-2.16048264503479, rank=4, decoded_token=None), 362: Logprob(logprob=-1.03548264503479, rank=1, decoded_token=None)}], outputs=[CompletionOutput(index=0, text='', token_ids=(271,), cumulative_logprob=None, logprobs=None, finish_reason=length, stop_reason=None)], finished=True, metrics=RequestMetrics(arrival_time=1732331737.7076116, last_token_time=1732331737.7076116, first_scheduled_time=1732331737.7121127, first_token_time=1732331737.8119168, time_in_queue=0.0045011043548583984, finished_time=1732331737.812479, scheduler_time=0.001441366001017741, model_forward_time=None, model_execute_time=None), lora_request=None, num_cached_tokens=0)
Answer:  (-2.16048264503479, False)
Input:  [128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 11874, 4459, 5219, 617, 264, 3325, 4279, 5361, 315, 220, 1399, 13, 9062, 1396, 374, 2753, 1109, 477, 6273, 311, 220, 717, 13, 578, 12474, 4279, 8331, 315, 279, 1403, 5219, 285, 220, 17, 13, 3639, 527, 279, 1403, 5219, 5380, 32, 13, 220, 21, 323, 220, 605, 198, 33, 13, 220, 20, 323, 220, 717, 198, 34, 13, 220, 605, 323, 220, 717, 198, 35, 13, 220, 717, 323, 220, 868, 198, 16533, 25, 426]
Output:  RequestOutput(request_id=3, prompt=None, prompt_token_ids=[128000, 791, 2768, 527, 5361, 5873, 4860, 320, 4291, 11503, 8, 922, 36256, 38696, 382, 791, 7187, 315, 279, 3363, 1405, 33126, 574, 9405, 374, 220, 9591, 11, 23038, 13, 3639, 374, 279, 907, 315, 279, 220, 20, 304, 279, 1396, 220, 9591, 11, 23038, 5380, 32, 13, 220, 20, 9214, 198, 33, 13, 220, 20, 11758, 198, 34, 13, 220, 20, 22781, 198, 35, 13, 220, 20, 6305, 198, 16533, 25, 362, 271, 43819, 21475, 1511, 279, 6037, 330, 2261, 220, 806, 1, 311, 1893, 279, 1396, 5497, 6982, 3770, 13, 220, 605, 11, 220, 1691, 11, 220, 843, 11, 220, 3391, 11, 220, 4370, 16299, 5224, 922, 279, 1396, 5497, 374, 837, 5380, 32, 13, 578, 220, 605, 339, 1396, 304, 279, 5497, 690, 387, 459, 1524, 1396, 627, 33, 13, 578, 1396, 5497, 690, 2646, 617, 1403, 1524, 5219, 1828, 311, 1855, 1023, 627, 34, 13, 578, 1828, 1403, 5219, 304, 279, 5497, 690, 387, 459, 1524, 1396, 1243, 459, 10535, 1396, 627, 35, 13, 1442, 279, 1396, 5497, 3940, 449, 459, 10535, 1396, 1243, 279, 5497, 1053, 617, 1193, 10535, 5219, 304, 433, 627, 16533, 25, 426, 271, 32, 2860, 315, 220, 966, 4311, 690, 1514, 19794, 520, 264, 6246, 13, 2684, 690, 387, 7041, 220, 20, 4311, 389, 1855, 2128, 13, 16299, 5224, 12722, 15100, 1268, 311, 1505, 279, 1396, 315, 7411, 4460, 5380, 32, 13, 2758, 220, 20, 311, 220, 966, 311, 1505, 220, 1758, 7411, 627, 33, 13, 64002, 220, 966, 555, 220, 20, 311, 1505, 220, 21, 7411, 627, 34, 13, 72159, 220, 966, 323, 220, 20, 311, 1505, 220, 3965, 7411, 627, 35, 13, 94310, 220, 20, 505, 220, 966, 311, 1505, 220, 914, 7411, 627, 16533, 25, 426, 271, 32, 3637, 31878, 220, 7699, 2204, 8146, 315, 6308, 13, 2435, 617, 220, 914, 43732, 315, 1855, 1933, 304, 5942, 13, 578, 1396, 315, 43732, 315, 6308, 279, 3637, 706, 304, 5942, 649, 387, 1766, 1701, 279, 7645, 3770, 13, 220, 7699, 25800, 220, 914, 13, 2650, 1690, 43732, 315, 6308, 1587, 279, 3637, 617, 304, 5942, 5380, 32, 13, 220, 25541, 198, 33, 13, 220, 17, 11, 21129, 198, 34, 13, 220, 17, 11, 24599, 198, 35, 13, 220, 19, 11, 5154, 198, 16533, 25, 426, 271, 23956, 7645, 374, 13890, 311, 220, 20, 865, 220, 24, 5380, 32, 13, 320, 20, 865, 220, 19, 8, 865, 320, 21, 865, 220, 20, 340, 33, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 19, 340, 34, 13, 320, 20, 865, 220, 20, 8, 489, 320, 20, 865, 220, 24, 340, 35, 13, 320, 20, 865, 220, 24, 8, 865, 320, 21, 865, 220, 24, 340, 16533, 25, 426, 271, 11874, 4459, 5219, 617, 264, 3325, 4279, 5361, 315, 220, 1399, 13, 9062, 1396, 374, 2753, 1109, 477, 6273, 311, 220, 717, 13, 578, 12474, 4279, 8331, 315, 279, 1403, 5219, 285, 220, 17, 13, 3639, 527, 279, 1403, 5219, 5380, 32, 13, 220, 21, 323, 220, 605, 198, 33, 13, 220, 20, 323, 220, 717, 198, 34, 13, 220, 605, 323, 220, 717, 198, 35, 13, 220, 717, 323, 220, 868, 198, 16533, 25, 426], encoder_prompt=None, encoder_prompt_token_ids=None, prompt_logprobs=[None, {791: Logprob(logprob=-3.588294506072998, rank=4, decoded_token=None), 14924: Logprob(logprob=-1.213294506072998, rank=1, decoded_token=None)}, {2768: Logprob(logprob=-4.304756164550781, rank=2, decoded_token=None), 220: Logprob(logprob=-3.6797564029693604, rank=1, decoded_token=None)}, {527: Logprob(logprob=-2.969231605529785, rank=3, decoded_token=None), 374: Logprob(logprob=-1.9692317247390747, rank=1, decoded_token=None)}, {5361: Logprob(logprob=-9.316919326782227, rank=700, decoded_token=None), 279: Logprob(logprob=-1.566918969154358, rank=1, decoded_token=None)}, {5873: Logprob(logprob=-1.1169946193695068, rank=1, decoded_token=None)}, {4860: Logprob(logprob=-0.15302471816539764, rank=1, decoded_token=None)}, {320: Logprob(logprob=-3.3894879817962646, rank=9, decoded_token=None), 389: Logprob(logprob=-1.7644879817962646, rank=1, decoded_token=None)}, {4291: Logprob(logprob=-3.562437057495117, rank=2, decoded_token=None), 11865: Logprob(logprob=-0.562437117099762, rank=1, decoded_token=None)}, {11503: Logprob(logprob=-0.9702798128128052, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.4542173743247986, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.899801015853882, rank=4, decoded_token=None), 389: Logprob(logprob=-1.3998010158538818, rank=1, decoded_token=None)}, {36256: Logprob(logprob=-8.734892845153809, rank=631, decoded_token=None), 279: Logprob(logprob=-1.1098928451538086, rank=1, decoded_token=None)}, {38696: Logprob(logprob=-3.7674813270568848, rank=8, decoded_token=None), 19320: Logprob(logprob=-2.1424813270568848, rank=1, decoded_token=None)}, {382: Logprob(logprob=-5.597833156585693, rank=19, decoded_token=None), 13: Logprob(logprob=-1.097833275794983, rank=1, decoded_token=None)}, {791: Logprob(logprob=-3.544769287109375, rank=4, decoded_token=None), 16: Logprob(logprob=-1.4197694063186646, rank=1, decoded_token=None)}, {7187: Logprob(logprob=-7.414687633514404, rank=167, decoded_token=None), 2768: Logprob(logprob=-2.3521876335144043, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.11540365219116211, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.7252726554870605, rank=2, decoded_token=None), 264: Logprob(logprob=-0.4752727150917053, rank=1, decoded_token=None)}, {3363: Logprob(logprob=-1.8480002880096436, rank=1, decoded_token=None)}, {1405: Logprob(logprob=-5.9969987869262695, rank=13, decoded_token=None), 315: Logprob(logprob=-0.24699899554252625, rank=1, decoded_token=None)}, {33126: Logprob(logprob=-9.10548210144043, rank=325, decoded_token=None), 358: Logprob(logprob=-1.292981743812561, rank=1, decoded_token=None)}, {574: Logprob(logprob=-5.349006652832031, rank=8, decoded_token=None), 6439: Logprob(logprob=-0.4740064740180969, rank=1, decoded_token=None)}, {9405: Logprob(logprob=-0.40580296516418457, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.5615864396095276, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.7438945174217224, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-7.263688087463379, rank=140, decoded_token=None), 1041: Logprob(logprob=-2.638688087463379, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.7120769619941711, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-8.756370544433594, rank=570, decoded_token=None), 931: Logprob(logprob=-0.38137099146842957, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.46257808804512024, rank=1, decoded_token=None)}, {3639: Logprob(logprob=-4.10749626159668, rank=8, decoded_token=None), 578: Logprob(logprob=-1.2324963808059692, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.29674193263053894, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.1783972829580307, rank=1, decoded_token=None)}, {907: Logprob(logprob=-5.722339153289795, rank=27, decoded_token=None), 7187: Logprob(logprob=-0.8473392128944397, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.03685179725289345, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.9906996488571167, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.191212177276611, rank=12, decoded_token=None), 7187: Logprob(logprob=-1.1912120580673218, rank=1, decoded_token=None)}, {20: Logprob(logprob=-3.4952895641326904, rank=3, decoded_token=None), 605: Logprob(logprob=-2.9952895641326904, rank=1, decoded_token=None)}, {304: Logprob(logprob=-6.860769271850586, rank=33, decoded_token=None), 339: Logprob(logprob=-0.4857691526412964, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.4738154709339142, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.81992244720459, rank=9, decoded_token=None), 2768: Logprob(logprob=-1.5699224472045898, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.851509690284729, rank=1, decoded_token=None)}, {9591: Logprob(logprob=-0.4733523726463318, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.3776562213897705, rank=1, decoded_token=None)}, {23038: Logprob(logprob=-0.04871302843093872, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-3.7120940685272217, rank=5, decoded_token=None), 1980: Logprob(logprob=-0.8370941281318665, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.0033669471740723, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.2580585777759552, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.20247121155261993, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.971443772315979, rank=1, decoded_token=None)}, {9214: Logprob(logprob=-7.329587459564209, rank=44, decoded_token=None), 11: Logprob(logprob=-0.6420875191688538, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.33627015352249146, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.003795088967308402, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0006998711614869535, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021235832944512367, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.1533547639846802, rank=1, decoded_token=None)}, {11758: Logprob(logprob=-1.9098384380340576, rank=2, decoded_token=None), 11990: Logprob(logprob=-1.4098384380340576, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.007843528874218464, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0015495923580601811, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0005785936955362558, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006402693688869476, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.09296748787164688, rank=1, decoded_token=None)}, {22781: Logprob(logprob=-0.6998193264007568, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0074472189880907536, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0022168601863086224, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0005930095794610679, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.019136684015393257, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.05925050005316734, rank=1, decoded_token=None)}, {6305: Logprob(logprob=-0.6276966333389282, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.2591150999069214, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.909871518611908, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.060657717287540436, rank=1, decoded_token=None)}, {362: Logprob(logprob=-1.2651628255844116, rank=2, decoded_token=None), 423: Logprob(logprob=-1.1401628255844116, rank=1, decoded_token=None)}, {271: Logprob(logprob=-1.236945629119873, rank=2, decoded_token=None), 128001: Logprob(logprob=-0.7369455695152283, rank=1, decoded_token=None)}, {43819: Logprob(logprob=-12.281052589416504, rank=2698, decoded_token=None), 791: Logprob(logprob=-0.8435525894165039, rank=1, decoded_token=None)}, {21475: Logprob(logprob=-0.7285953164100647, rank=1, decoded_token=None)}, {1511: Logprob(logprob=-6.596356391906738, rank=50, decoded_token=None), 374: Logprob(logprob=-2.0338563919067383, rank=1, decoded_token=None)}, {279: Logprob(logprob=-2.3166232109069824, rank=3, decoded_token=None), 264: Logprob(logprob=-1.3166230916976929, rank=1, decoded_token=None)}, {6037: Logprob(logprob=-6.134354591369629, rank=53, decoded_token=None), 15150: Logprob(logprob=-2.509354829788208, rank=1, decoded_token=None)}, {330: Logprob(logprob=-3.653575897216797, rank=9, decoded_token=None), 315: Logprob(logprob=-1.5285758972167969, rank=1, decoded_token=None)}, {2261: Logprob(logprob=-4.241303443908691, rank=15, decoded_token=None), 2746: Logprob(logprob=-2.6163032054901123, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.6807642579078674, rank=1, decoded_token=None)}, {806: Logprob(logprob=-4.885201930999756, rank=18, decoded_token=None), 20: Logprob(logprob=-1.3852018117904663, rank=1, decoded_token=None)}, {1: Logprob(logprob=-1.440927505493164, rank=2, decoded_token=None), 311: Logprob(logprob=-0.9409274458885193, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.5772078633308411, rank=1, decoded_token=None)}, {1893: Logprob(logprob=-6.191239356994629, rank=44, decoded_token=None), 1505: Logprob(logprob=-1.5662392377853394, rank=1, decoded_token=None)}, {279: Logprob(logprob=-1.369935393333435, rank=2, decoded_token=None), 264: Logprob(logprob=-0.7449353933334351, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.322933554649353, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-6.340333938598633, rank=23, decoded_token=None), 220: Logprob(logprob=-0.2778337895870209, rank=1, decoded_token=None)}, {6982: Logprob(logprob=-3.008331298828125, rank=5, decoded_token=None), 220: Logprob(logprob=-1.2583311796188354, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-0.696544349193573, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.47080329060554504, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.408674716949463, rank=9, decoded_token=None), 3639: Logprob(logprob=-0.7836745381355286, rank=1, decoded_token=None)}, {605: Logprob(logprob=-4.432986259460449, rank=13, decoded_token=None), 16: Logprob(logprob=-2.18298602104187, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.9232057332992554, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.13041946291923523, rank=1, decoded_token=None)}, {1691: Logprob(logprob=-0.8227146863937378, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.007162133697420359, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.016214758157730103, rank=1, decoded_token=None)}, {843: Logprob(logprob=-0.13016277551651, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.03512261062860489, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.20052661001682281, rank=1, decoded_token=None)}, {3391: Logprob(logprob=-0.02468840219080448, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.08266056329011917, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.3703943192958832, rank=1, decoded_token=None)}, {4370: Logprob(logprob=-0.017463840544223785, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-9.801653861999512, rank=120, decoded_token=None), 11: Logprob(logprob=-0.17665395140647888, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-4.195326805114746, rank=8, decoded_token=None), 1396: Logprob(logprob=-1.070326566696167, rank=1, decoded_token=None)}, {922: Logprob(logprob=-2.4466686248779297, rank=2, decoded_token=None), 374: Logprob(logprob=-0.44666874408721924, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.517330527305603, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.113140106201172, rank=3, decoded_token=None), 6037: Logprob(logprob=-0.8631401658058167, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.443703293800354, rank=2, decoded_token=None), 220: Logprob(logprob=-1.318703293800354, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.23402449488639832, rank=1, decoded_token=None)}, {837: Logprob(logprob=-0.6284106373786926, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.37667617201805115, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.0740572139620781, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.009778810665011406, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.5895971655845642, rank=1, decoded_token=None)}, {220: Logprob(logprob=-2.43047833442688, rank=5, decoded_token=None), 1176: Logprob(logprob=-2.05547833442688, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.1376230716705322, rank=3, decoded_token=None), 806: Logprob(logprob=-1.8876230716705322, rank=1, decoded_token=None)}, {339: Logprob(logprob=-0.6972476840019226, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.1368379592895508, rank=2, decoded_token=None), 4751: Logprob(logprob=-0.5118379592895508, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.17106032371521, rank=2, decoded_token=None), 374: Logprob(logprob=-0.54606032371521, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.014991242438554764, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.19605356454849243, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.600100040435791, rank=2, decoded_token=None), 374: Logprob(logprob=-0.10010002553462982, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.20332926511764526, rank=1, decoded_token=None)}, {459: Logprob(logprob=-4.175275802612305, rank=6, decoded_token=None), 220: Logprob(logprob=-0.5502755641937256, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.4642753601074219, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.02154143527150154, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.20088475942611694, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.002081967191770673, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0003781795676331967, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.056677043437957764, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-3.308137893676758, rank=4, decoded_token=None), 220: Logprob(logprob=-0.3081379532814026, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.6069552898406982, rank=4, decoded_token=None), 220: Logprob(logprob=-1.8569552898406982, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.774920642375946, rank=1, decoded_token=None)}, {2646: Logprob(logprob=-3.097163200378418, rank=8, decoded_token=None), 3136: Logprob(logprob=-1.8471633195877075, rank=1, decoded_token=None)}, {617: Logprob(logprob=-2.366727113723755, rank=3, decoded_token=None), 842: Logprob(logprob=-1.1167271137237549, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.652055263519287, rank=7, decoded_token=None), 264: Logprob(logprob=-0.9020552039146423, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-2.718801498413086, rank=4, decoded_token=None), 24871: Logprob(logprob=-0.7188013792037964, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.0695536658167839, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-3.1284074783325195, rank=4, decoded_token=None), 304: Logprob(logprob=-0.87840735912323, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.013708023354411125, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-0.05030599236488342, rank=1, decoded_token=None)}, {1023: Logprob(logprob=-0.0032524564303457737, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03535380959510803, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.010325347073376179, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00024101213784888387, rank=1, decoded_token=None)}, {578: Logprob(logprob=-0.140742689371109, rank=1, decoded_token=None)}, {1828: Logprob(logprob=-5.092126846313477, rank=9, decoded_token=None), 1396: Logprob(logprob=-0.8421266674995422, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-3.4843006134033203, rank=4, decoded_token=None), 1396: Logprob(logprob=-0.23430049419403076, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.11257536709308624, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.3171550929546356, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.00759677030146122, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-0.02107418328523636, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.09753574430942535, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.4928134083747864, rank=1, decoded_token=None)}, {459: Logprob(logprob=-3.0057926177978516, rank=5, decoded_token=None), 220: Logprob(logprob=-1.7557926177978516, rank=1, decoded_token=None)}, {1524: Logprob(logprob=-0.8141931891441345, rank=2, decoded_token=None), 10535: Logprob(logprob=-0.6891931891441345, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.07718711346387863, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-7.487396240234375, rank=28, decoded_token=None), 627: Logprob(logprob=-0.6123961806297302, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.15662676095962524, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.012751000933349133, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.005057043395936489, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.03090181201696396, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.02183726243674755, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0004822045157197863, rank=1, decoded_token=None)}, {1442: Logprob(logprob=-4.839500427246094, rank=6, decoded_token=None), 578: Logprob(logprob=-0.33950039744377136, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.566116213798523, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-1.3449784517288208, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-1.1413413286209106, rank=1, decoded_token=None)}, {3940: Logprob(logprob=-4.172558307647705, rank=14, decoded_token=None), 374: Logprob(logprob=-1.4225584268569946, rank=1, decoded_token=None)}, {449: Logprob(logprob=-0.06449252367019653, rank=1, decoded_token=None)}, {459: Logprob(logprob=-0.9140709638595581, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.7719259262084961, rank=2, decoded_token=None), 1524: Logprob(logprob=-0.6469259262084961, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.007958251982927322, rank=1, decoded_token=None)}, {1243: Logprob(logprob=-2.8203039169311523, rank=2, decoded_token=None), 11: Logprob(logprob=-0.1953037977218628, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.6145880222320557, rank=1, decoded_token=None)}, {5497: Logprob(logprob=-2.5863301753997803, rank=2, decoded_token=None), 1828: Logprob(logprob=-0.4613301157951355, rank=1, decoded_token=None)}, {1053: Logprob(logprob=-2.094866991043091, rank=2, decoded_token=None), 690: Logprob(logprob=-0.21986699104309082, rank=1, decoded_token=None)}, {617: Logprob(logprob=-3.046118974685669, rank=6, decoded_token=None), 2646: Logprob(logprob=-0.921118974685669, rank=1, decoded_token=None)}, {1193: Logprob(logprob=-3.4279844760894775, rank=7, decoded_token=None), 459: Logprob(logprob=-0.8029844760894775, rank=1, decoded_token=None)}, {10535: Logprob(logprob=-0.308468222618103, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.018749739974737167, rank=1, decoded_token=None)}, {304: Logprob(logprob=-2.9477155208587646, rank=3, decoded_token=None), 627: Logprob(logprob=-0.3227156102657318, rank=1, decoded_token=None)}, {433: Logprob(logprob=-0.40446826815605164, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.21264755725860596, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.025269512087106705, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0027451948262751102, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.1849918365478516, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.1902220994234085, rank=1, decoded_token=None)}, {32: Logprob(logprob=-2.3071374893188477, rank=2, decoded_token=None), 791: Logprob(logprob=-1.9321374893188477, rank=1, decoded_token=None)}, {2860: Logprob(logprob=-5.8816609382629395, rank=57, decoded_token=None), 1396: Logprob(logprob=-2.6941609382629395, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.02797979861497879, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.23590943217277527, rank=1, decoded_token=None)}, {966: Logprob(logprob=-4.081195831298828, rank=3, decoded_token=None), 605: Logprob(logprob=-3.956195592880249, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-6.011350631713867, rank=47, decoded_token=None), 4236: Logprob(logprob=-1.6988508701324463, rank=1, decoded_token=None)}, {690: Logprob(logprob=-3.6415536403656006, rank=9, decoded_token=None), 31408: Logprob(logprob=-1.8915536403656006, rank=1, decoded_token=None)}, {1514: Logprob(logprob=-1.6141451597213745, rank=2, decoded_token=None), 387: Logprob(logprob=-0.9891451597213745, rank=1, decoded_token=None)}, {19794: Logprob(logprob=-4.327911853790283, rank=6, decoded_token=None), 304: Logprob(logprob=-0.7029119729995728, rank=1, decoded_token=None)}, {520: Logprob(logprob=-2.610771656036377, rank=4, decoded_token=None), 304: Logprob(logprob=-0.7357717752456665, rank=1, decoded_token=None)}, {264: Logprob(logprob=-0.8295858502388, rank=1, decoded_token=None)}, {6246: Logprob(logprob=-5.445433616638184, rank=25, decoded_token=None), 16520: Logprob(logprob=-1.0704338550567627, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.8759067058563232, rank=1, decoded_token=None)}, {2684: Logprob(logprob=-3.019108295440674, rank=7, decoded_token=None), 1442: Logprob(logprob=-1.7691081762313843, rank=1, decoded_token=None)}, {690: Logprob(logprob=-0.6913377642631531, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.022329222410917282, rank=1, decoded_token=None)}, {7041: Logprob(logprob=-3.9607925415039062, rank=6, decoded_token=None), 220: Logprob(logprob=-0.33579257130622864, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.288790225982666, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.200063943862915, rank=1, decoded_token=None), 17: Logprob(logprob=-2.200063943862915, rank=1, decoded_token=None)}, {4311: Logprob(logprob=-0.6154614090919495, rank=1, decoded_token=None)}, {389: Logprob(logprob=-2.105520248413086, rank=3, decoded_token=None), 505: Logprob(logprob=-1.730520248413086, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-1.2467472553253174, rank=2, decoded_token=None), 279: Logprob(logprob=-0.49674728512763977, rank=1, decoded_token=None)}, {2128: Logprob(logprob=-0.08914763480424881, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.16352039575576782, rank=1, decoded_token=None)}, {16299: Logprob(logprob=-2.8792216777801514, rank=4, decoded_token=None), 2650: Logprob(logprob=-1.0042216777801514, rank=1, decoded_token=None)}, {5224: Logprob(logprob=-1.2772589921951294, rank=2, decoded_token=None), 315: Logprob(logprob=-1.0272589921951294, rank=1, decoded_token=None)}, {12722: Logprob(logprob=-4.80352258682251, rank=9, decoded_token=None), 374: Logprob(logprob=-0.5535227656364441, rank=1, decoded_token=None)}, {15100: Logprob(logprob=-4.0572991371154785, rank=7, decoded_token=None), 16964: Logprob(logprob=-0.5572991371154785, rank=1, decoded_token=None)}, {1268: Logprob(logprob=-0.9948503971099854, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.8683412075042725, rank=3, decoded_token=None), 279: Logprob(logprob=-1.2433412075042725, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-1.9003151655197144, rank=2, decoded_token=None), 8417: Logprob(logprob=-1.1503151655197144, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.11957751214504242, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.29255211353302, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.01057143323123455, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.7831801772117615, rank=1, decoded_token=None)}, {4460: Logprob(logprob=-3.463230609893799, rank=3, decoded_token=None), 430: Logprob(logprob=-0.8382306098937988, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9446107149124146, rank=2, decoded_token=None), 311: Logprob(logprob=-0.8196107149124146, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.04526291787624359, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.002380991354584694, rank=1, decoded_token=None)}, {2758: Logprob(logprob=-3.3964881896972656, rank=8, decoded_token=None), 578: Logprob(logprob=-2.1464881896972656, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.38579824566841125, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.9311184883117676, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.38374000787734985, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.3195199966430664, rank=2, decoded_token=None), 279: Logprob(logprob=-0.44451993703842163, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.10298678278923035, rank=1, decoded_token=None)}, {311: Logprob(logprob=-1.7452938556671143, rank=2, decoded_token=None), 627: Logprob(logprob=-0.7452937960624695, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.4569380283355713, rank=1, decoded_token=None)}, {220: Logprob(logprob=-4.816202163696289, rank=4, decoded_token=None), 279: Logprob(logprob=-0.06620228290557861, rank=1, decoded_token=None)}, {1758: Logprob(logprob=-0.8483269810676575, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.920579731464386, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.4476555585861206, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0015714927576482296, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00015269544383045286, rank=1, decoded_token=None)}, {64002: Logprob(logprob=-2.5445642471313477, rank=3, decoded_token=None), 94310: Logprob(logprob=-0.5445643663406372, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.040661152452230453, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.1308070570230484, rank=1, decoded_token=None)}, {555: Logprob(logprob=-0.035039275884628296, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.00441908510401845, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.013742946088314056, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.09101356565952301, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.06291541457176208, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.23998305201530457, rank=1, decoded_token=None)}, {21: Logprob(logprob=-0.0345701165497303, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.00949143711477518, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.0618923157453537, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0015372138004750013, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00010275312524754554, rank=1, decoded_token=None)}, {72159: Logprob(logprob=-1.416687250137329, rank=2, decoded_token=None), 94310: Logprob(logprob=-0.7916873097419739, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.022464442998170853, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.1311088651418686, rank=1, decoded_token=None)}, {323: Logprob(logprob=-5.759943962097168, rank=2, decoded_token=None), 555: Logprob(logprob=-0.009944183751940727, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.005024425685405731, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.10427399724721909, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.16913986206054688, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.024288708344101906, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.04584870859980583, rank=1, decoded_token=None)}, {3965: Logprob(logprob=-0.16225406527519226, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.09998979419469833, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.008857247419655323, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0020776845049113035, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0003250309091527015, rank=1, decoded_token=None)}, {94310: Logprob(logprob=-0.7316688895225525, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.024832606315612793, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.6226915121078491, rank=1, decoded_token=None)}, {505: Logprob(logprob=-0.10961204022169113, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.010747289285063744, rank=1, decoded_token=None)}, {966: Logprob(logprob=-0.05260615423321724, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.02702752687036991, rank=1, decoded_token=None)}, {1505: Logprob(logprob=-0.012585973367094994, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0407465361058712, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.009129801765084267, rank=1, decoded_token=None)}, {7411: Logprob(logprob=-0.017733123153448105, rank=1, decoded_token=None)}, {627: Logprob(logprob=-0.05732721835374832, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004556629806756973, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0005477358354255557, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.3356648683547974, rank=3, decoded_token=None), 356: Logprob(logprob=-1.2106648683547974, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.2082667499780655, rank=1, decoded_token=None)}, {32: Logprob(logprob=-1.9418500661849976, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-5.220272541046143, rank=29, decoded_token=None), 2860: Logprob(logprob=-3.0952725410461426, rank=1, decoded_token=None)}, {31878: Logprob(logprob=-1.610248327255249, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.7332974672317505, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-8.542618751525879, rank=186, decoded_token=None), 18: Logprob(logprob=-2.542618751525879, rank=1, decoded_token=None)}, {2204: Logprob(logprob=-2.599426507949829, rank=2, decoded_token=None), 13840: Logprob(logprob=-2.474426507949829, rank=1, decoded_token=None)}, {8146: Logprob(logprob=-5.755116939544678, rank=24, decoded_token=None), 4595: Logprob(logprob=-1.3801170587539673, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.027865495532751083, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-3.957357883453369, rank=10, decoded_token=None), 259: Logprob(logprob=-2.832357883453369, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.40048009157180786, rank=1, decoded_token=None)}, {2435: Logprob(logprob=-4.845759868621826, rank=13, decoded_token=None), 1442: Logprob(logprob=-1.4707597494125366, rank=1, decoded_token=None)}, {617: Logprob(logprob=-1.3862104415893555, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.847692608833313, rank=1, decoded_token=None)}, {914: Logprob(logprob=-4.27924108505249, rank=17, decoded_token=None), 18: Logprob(logprob=-2.9042410850524902, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-4.734525680541992, rank=13, decoded_token=None), 2204: Logprob(logprob=-0.9845254421234131, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.17049723863601685, rank=1, decoded_token=None)}, {1855: Logprob(logprob=-2.0231032371520996, rank=2, decoded_token=None), 2579: Logprob(logprob=-1.7731033563613892, rank=1, decoded_token=None)}, {1933: Logprob(logprob=-0.12822699546813965, rank=1, decoded_token=None)}, {304: Logprob(logprob=-3.447733163833618, rank=5, decoded_token=None), 13: Logprob(logprob=-0.4477331042289734, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-7.156528472900391, rank=17, decoded_token=None), 5708: Logprob(logprob=-0.2815282940864563, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.10994840413331985, rank=1, decoded_token=None)}, {578: Logprob(logprob=-2.5678606033325195, rank=5, decoded_token=None), 2650: Logprob(logprob=-1.317860722541809, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-2.8113741874694824, rank=3, decoded_token=None), 3637: Logprob(logprob=-0.8113741278648376, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.09289318323135376, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.6233457922935486, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.7501171827316284, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-2.1427054405212402, rank=2, decoded_token=None), 1855: Logprob(logprob=-0.5177054405212402, rank=1, decoded_token=None)}, {279: Logprob(logprob=-3.4584686756134033, rank=6, decoded_token=None), 304: Logprob(logprob=-1.3334686756134033, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.026147279888391495, rank=1, decoded_token=None)}, {706: Logprob(logprob=-0.34631913900375366, rank=1, decoded_token=None)}, {304: Logprob(logprob=-1.6868782043457031, rank=2, decoded_token=None), 374: Logprob(logprob=-1.0618782043457031, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.2303718775510788, rank=1, decoded_token=None)}, {649: Logprob(logprob=-2.7231407165527344, rank=2, decoded_token=None), 374: Logprob(logprob=-0.3481407165527344, rank=1, decoded_token=None)}, {387: Logprob(logprob=-0.054041046649217606, rank=1, decoded_token=None)}, {1766: Logprob(logprob=-2.5916926860809326, rank=4, decoded_token=None), 5439: Logprob(logprob=-1.0916926860809326, rank=1, decoded_token=None)}, {1701: Logprob(logprob=-2.2964775562286377, rank=2, decoded_token=None), 555: Logprob(logprob=-0.17147766053676605, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.42406484484672546, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-3.539501428604126, rank=7, decoded_token=None), 6037: Logprob(logprob=-1.289501428604126, rank=1, decoded_token=None)}, {3770: Logprob(logprob=-4.590996742248535, rank=15, decoded_token=None), 220: Logprob(logprob=-1.2159966230392456, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.18096934258937836, rank=1, decoded_token=None)}, {220: Logprob(logprob=-1.9475879669189453, rank=2, decoded_token=None), 3639: Logprob(logprob=-1.1975879669189453, rank=1, decoded_token=None)}, {7699: Logprob(logprob=-0.4854806661605835, rank=1, decoded_token=None)}, {25800: Logprob(logprob=-3.8487393856048584, rank=9, decoded_token=None), 11: Logprob(logprob=-1.7862393856048584, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.1915293186903, rank=1, decoded_token=None)}, {914: Logprob(logprob=-0.07257572561502457, rank=1, decoded_token=None)}, {13: Logprob(logprob=-2.225902557373047, rank=3, decoded_token=None), 284: Logprob(logprob=-1.6009026765823364, rank=1, decoded_token=None)}, {2650: Logprob(logprob=-2.9975926876068115, rank=3, decoded_token=None), 3639: Logprob(logprob=-0.6225926280021667, rank=1, decoded_token=None)}, {1690: Logprob(logprob=-0.08352108299732208, rank=1, decoded_token=None)}, {43732: Logprob(logprob=-0.6937007308006287, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.15021462738513947, rank=1, decoded_token=None)}, {6308: Logprob(logprob=-0.1846829354763031, rank=1, decoded_token=None)}, {1587: Logprob(logprob=-0.9513101577758789, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.025589339435100555, rank=1, decoded_token=None)}, {3637: Logprob(logprob=-0.003244970692321658, rank=1, decoded_token=None)}, {617: Logprob(logprob=-0.10589171200990677, rank=1, decoded_token=None)}, {304: Logprob(logprob=-0.1511233001947403, rank=1, decoded_token=None)}, {5942: Logprob(logprob=-0.037622109055519104, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.09561489522457123, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.07025675475597382, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.002441641641780734, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.021361514925956726, rank=1, decoded_token=None)}, {25541: Logprob(logprob=-11.017716407775879, rank=927, decoded_token=None), 7699: Logprob(logprob=-2.267716407775879, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.7192279100418091, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0011468507582321763, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00013636612857226282, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.001517931348644197, rank=1, decoded_token=None)}, {17: Logprob(logprob=-4.038790702819824, rank=7, decoded_token=None), 7699: Logprob(logprob=-2.913790464401245, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.023376699537038803, rank=1, decoded_token=None)}, {21129: Logprob(logprob=-5.540423393249512, rank=45, decoded_token=None), 2636: Logprob(logprob=-3.540423631668091, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.008513230830430984, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.00035577642847783864, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001481661747675389, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0015720878727734089, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.26859188079834, rank=2, decoded_token=None), 20: Logprob(logprob=-2.14359188079834, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.006552401464432478, rank=1, decoded_token=None)}, {24599: Logprob(logprob=-6.160186767578125, rank=81, decoded_token=None), 21129: Logprob(logprob=-2.535186529159546, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.004695461131632328, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.000506511190906167, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0002585315378382802, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0038100522942841053, rank=1, decoded_token=None)}, {19: Logprob(logprob=-2.5259666442871094, rank=3, decoded_token=None), 18: Logprob(logprob=-0.7759665250778198, rank=1, decoded_token=None)}, {11: Logprob(logprob=-0.001276512397453189, rank=1, decoded_token=None)}, {5154: Logprob(logprob=-5.772514343261719, rank=71, decoded_token=None), 18070: Logprob(logprob=-2.772514581680298, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.5313923954963684, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004962034057825804, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0004538459761533886, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.0903221368789673, rank=1, decoded_token=None), 362: Logprob(logprob=-1.0903221368789673, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.23396459221839905, rank=1, decoded_token=None)}, {23956: Logprob(logprob=-3.7109880447387695, rank=5, decoded_token=None), 32: Logprob(logprob=-1.7109880447387695, rank=1, decoded_token=None)}, {7645: Logprob(logprob=-2.3338446617126465, rank=3, decoded_token=None), 315: Logprob(logprob=-1.458844780921936, rank=1, decoded_token=None)}, {374: Logprob(logprob=-1.2901480197906494, rank=1, decoded_token=None)}, {13890: Logprob(logprob=-0.29379332065582275, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.004455045331269503, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.5699459910392761, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.582611322402954, rank=2, decoded_token=None), 17: Logprob(logprob=-2.457611322402954, rank=1, decoded_token=None)}, {865: Logprob(logprob=-3.8140597343444824, rank=6, decoded_token=None), 25800: Logprob(logprob=-0.939059853553772, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.22526046633720398, rank=1, decoded_token=None)}, {24: Logprob(logprob=-3.268810987472534, rank=8, decoded_token=None), 17: Logprob(logprob=-2.018810987472534, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.9523714780807495, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.02629231847822666, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.002087677363306284, rank=1, decoded_token=None)}, {320: Logprob(logprob=-4.041932106018066, rank=2, decoded_token=None), 220: Logprob(logprob=-0.0419318750500679, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3275642395019531, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7747173309326172, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.01943170465528965, rank=1, decoded_token=None)}, {19: Logprob(logprob=-3.8843350410461426, rank=6, decoded_token=None), 24: Logprob(logprob=-0.2593349516391754, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.05427434667944908, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.7900131344795227, rank=1, decoded_token=None)}, {320: Logprob(logprob=-1.6092212200164795, rank=2, decoded_token=None), 220: Logprob(logprob=-0.2342211753129959, rank=1, decoded_token=None)}, {21: Logprob(logprob=-4.122803688049316, rank=6, decoded_token=None), 20: Logprob(logprob=-0.8728036880493164, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.053970567882061005, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.006345955654978752, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.5473098754882812, rank=5, decoded_token=None), 18: Logprob(logprob=-1.1723099946975708, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.06624624133110046, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0031123552471399307, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00019047829846385866, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.5430195927619934, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.3349359631538391, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.17014674842357635, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.11895304173231125, rank=1, decoded_token=None)}, {20: Logprob(logprob=-2.2283027172088623, rank=4, decoded_token=None), 24: Logprob(logprob=-1.2283027172088623, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.21531498432159424, rank=1, decoded_token=None)}, {489: Logprob(logprob=-4.436285972595215, rank=3, decoded_token=None), 865: Logprob(logprob=-0.061286140233278275, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.43919575214385986, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.5670137405395508, rank=3, decoded_token=None), 19: Logprob(logprob=-1.3170137405395508, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.013229803182184696, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.020044738426804543, rank=1, decoded_token=None)}, {19: Logprob(logprob=-1.059314250946045, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.14613543450832367, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.0012510338565334678, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00013481661153491586, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.36141881346702576, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.170744389295578, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.15453915297985077, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0653778612613678, rank=1, decoded_token=None)}, {20: Logprob(logprob=-1.4421030282974243, rank=3, decoded_token=None), 19: Logprob(logprob=-1.1921030282974243, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.09968782961368561, rank=1, decoded_token=None)}, {489: Logprob(logprob=-0.7550356984138489, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.3567902743816376, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.5658089518547058, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.03483690321445465, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.05940350890159607, rank=1, decoded_token=None)}, {24: Logprob(logprob=-1.1212691068649292, rank=2, decoded_token=None), 19: Logprob(logprob=-0.9962691068649292, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.013908135704696178, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.0008878341759555042, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0001971527235582471, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.19026270508766174, rank=1, decoded_token=None)}, {20: Logprob(logprob=-0.07903989404439926, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.1152166947722435, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.040283940732479095, rank=1, decoded_token=None)}, {24: Logprob(logprob=-0.6784765124320984, rank=1, decoded_token=None)}, {8: Logprob(logprob=-0.02332417666912079, rank=1, decoded_token=None)}, {865: Logprob(logprob=-4.38916015625, rank=4, decoded_token=None), 489: Logprob(logprob=-0.13916020095348358, rank=1, decoded_token=None)}, {320: Logprob(logprob=-0.059930216521024704, rank=1, decoded_token=None)}, {21: Logprob(logprob=-1.9063451290130615, rank=2, decoded_token=None), 20: Logprob(logprob=-0.4063451290130615, rank=1, decoded_token=None)}, {865: Logprob(logprob=-0.02287174016237259, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.002457695547491312, rank=1, decoded_token=None)}, {24: Logprob(logprob=-5.066433429718018, rank=5, decoded_token=None), 20: Logprob(logprob=-0.19143354892730713, rank=1, decoded_token=None)}, {340: Logprob(logprob=-0.015977919101715088, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.004998686723411083, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0003066784702241421, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.108638048171997, rank=1, decoded_token=None)}, {271: Logprob(logprob=-0.18586991727352142, rank=1, decoded_token=None)}, {11874: Logprob(logprob=-5.224460124969482, rank=13, decoded_token=None), 32: Logprob(logprob=-1.849460244178772, rank=1, decoded_token=None)}, {4459: Logprob(logprob=-7.009128570556641, rank=124, decoded_token=None), 5219: Logprob(logprob=-1.821628451347351, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.6522552967071533, rank=1, decoded_token=None)}, {617: Logprob(logprob=-1.379534363746643, rank=2, decoded_token=None), 527: Logprob(logprob=-1.254534363746643, rank=1, decoded_token=None)}, {264: Logprob(logprob=-0.5606241226196289, rank=1, decoded_token=None)}, {3325: Logprob(logprob=-9.22218132019043, rank=39, decoded_token=None), 2694: Logprob(logprob=-0.2846815884113312, rank=1, decoded_token=None)}, {4279: Logprob(logprob=-0.061864301562309265, rank=1, decoded_token=None)}, {5361: Logprob(logprob=-0.45201748609542847, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.17637768387794495, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.023118602111935616, rank=1, decoded_token=None)}, {1399: Logprob(logprob=-3.963719367980957, rank=14, decoded_token=None), 717: Logprob(logprob=-2.338719367980957, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.09445195645093918, rank=1, decoded_token=None)}, {9062: Logprob(logprob=-5.071889877319336, rank=12, decoded_token=None), 578: Logprob(logprob=-1.196889877319336, rank=1, decoded_token=None)}, {1396: Logprob(logprob=-0.6336301565170288, rank=1, decoded_token=None)}, {374: Logprob(logprob=-0.3426891267299652, rank=1, decoded_token=None)}, {2753: Logprob(logprob=-2.6435422897338867, rank=3, decoded_token=None), 220: Logprob(logprob=-1.0185424089431763, rank=1, decoded_token=None)}, {1109: Logprob(logprob=-0.004161983262747526, rank=1, decoded_token=None)}, {477: Logprob(logprob=-2.879474401473999, rank=3, decoded_token=None), 220: Logprob(logprob=-0.37947434186935425, rank=1, decoded_token=None)}, {6273: Logprob(logprob=-0.013294622302055359, rank=1, decoded_token=None)}, {311: Logprob(logprob=-0.0058578010648489, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.09096752852201462, rank=1, decoded_token=None)}, {717: Logprob(logprob=-5.163353443145752, rank=29, decoded_token=None), 1041: Logprob(logprob=-1.9133533239364624, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.1529577076435089, rank=1, decoded_token=None)}, {578: Logprob(logprob=-1.5697429180145264, rank=2, decoded_token=None), 16299: Logprob(logprob=-0.9447429180145264, rank=1, decoded_token=None)}, {12474: Logprob(logprob=-2.645151138305664, rank=3, decoded_token=None), 3325: Logprob(logprob=-1.270151138305664, rank=1, decoded_token=None)}, {4279: Logprob(logprob=-0.6883967518806458, rank=1, decoded_token=None)}, {8331: Logprob(logprob=-0.40138059854507446, rank=1, decoded_token=None)}, {315: Logprob(logprob=-0.16735176742076874, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.33446672558784485, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-0.18579617142677307, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.2953820526599884, rank=1, decoded_token=None)}, {285: Logprob(logprob=-9.538186073303223, rank=41, decoded_token=None), 374: Logprob(logprob=-0.038186460733413696, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.9321149587631226, rank=1, decoded_token=None)}, {17: Logprob(logprob=-2.0747475624084473, rank=3, decoded_token=None), 21: Logprob(logprob=-1.6997476816177368, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.17374888062477112, rank=1, decoded_token=None)}, {3639: Logprob(logprob=-1.1434378623962402, rank=2, decoded_token=None), 16299: Logprob(logprob=-0.8934378623962402, rank=1, decoded_token=None)}, {527: Logprob(logprob=-2.005824565887451, rank=2, decoded_token=None), 374: Logprob(logprob=-0.2558245360851288, rank=1, decoded_token=None)}, {279: Logprob(logprob=-0.07729481160640717, rank=1, decoded_token=None)}, {1403: Logprob(logprob=-0.310687780380249, rank=1, decoded_token=None)}, {5219: Logprob(logprob=-0.7019672989845276, rank=1, decoded_token=None), 4459: Logprob(logprob=-0.7019672989845276, rank=1, decoded_token=None)}, {5380: Logprob(logprob=-0.0899902880191803, rank=1, decoded_token=None)}, {32: Logprob(logprob=-0.014821651391685009, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.0012823462020605803, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.03980715200304985, rank=1, decoded_token=None)}, {21: Logprob(logprob=-1.936407446861267, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.24611333012580872, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.005055620335042477, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.329893112182617, rank=3, decoded_token=None), 717: Logprob(logprob=-1.4548931121826172, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.023442961275577545, rank=1, decoded_token=None)}, {33: Logprob(logprob=-0.0009132028790190816, rank=1, decoded_token=None)}, {13: Logprob(logprob=-7.390703103737906e-05, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.004810308571904898, rank=1, decoded_token=None)}, {20: Logprob(logprob=-3.1714460849761963, rank=7, decoded_token=None), 21: Logprob(logprob=-1.5464460849761963, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.02755010686814785, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0016718233237043023, rank=1, decoded_token=None)}, {717: Logprob(logprob=-1.2207993268966675, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0012977044098079205, rank=1, decoded_token=None)}, {34: Logprob(logprob=-0.00026008085114881396, rank=1, decoded_token=None)}, {13: Logprob(logprob=-6.186770770000294e-05, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.005501368548721075, rank=1, decoded_token=None)}, {605: Logprob(logprob=-2.967453718185425, rank=8, decoded_token=None), 19: Logprob(logprob=-1.4674537181854248, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.003204688895493746, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.0013855629367753863, rank=1, decoded_token=None)}, {717: Logprob(logprob=-0.7422707080841064, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.0011626873165369034, rank=1, decoded_token=None)}, {35: Logprob(logprob=-0.00032074074260890484, rank=1, decoded_token=None)}, {13: Logprob(logprob=-0.00017677174764685333, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.015494913794100285, rank=1, decoded_token=None)}, {717: Logprob(logprob=-2.0872957706451416, rank=3, decoded_token=None), 21: Logprob(logprob=-1.2122957706451416, rank=1, decoded_token=None)}, {323: Logprob(logprob=-0.002190573140978813, rank=1, decoded_token=None)}, {220: Logprob(logprob=-0.001105650793761015, rank=1, decoded_token=None)}, {868: Logprob(logprob=-2.141770362854004, rank=2, decoded_token=None), 605: Logprob(logprob=-1.016770362854004, rank=1, decoded_token=None)}, {198: Logprob(logprob=-0.02330053597688675, rank=1, decoded_token=None)}, {16533: Logprob(logprob=-0.002792746527120471, rank=1, decoded_token=None)}, {25: Logprob(logprob=-0.0005763299996033311, rank=1, decoded_token=None)}, {426: Logprob(logprob=-1.16048264503479, rank=2, decoded_token=None), 362: Logprob(logprob=-1.03548264503479, rank=1, decoded_token=None)}], outputs=[CompletionOutput(index=0, text='', token_ids=(271,), cumulative_logprob=None, logprobs=None, finish_reason=length, stop_reason=None)], finished=True, metrics=RequestMetrics(arrival_time=1732331737.707782, last_token_time=1732331737.707782, first_scheduled_time=1732331737.7121127, first_token_time=1732331737.8119168, time_in_queue=0.004330635070800781, finished_time=1732331737.8124948, scheduler_time=0.001441366001017741, model_forward_time=None, model_execute_time=None), lora_request=None, num_cached_tokens=0)
Answer:  (-1.16048264503479, False)
vllm (pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42), gen_kwargs: (None), limit: 1.0, num_fewshot: None, batch_size: auto
|  Tasks  |Version|Filter|n-shot| Metric |   |Value|   |Stderr|
|---------|------:|------|-----:|--------|---|----:|---|------|
|meta_mmlu|      1|none  |     0|acc     |↑  |    0|±  |   N/A|
|         |       |none  |     0|acc_norm|↑  |    0|±  |   N/A|

[rank0]:[W1123 03:15:40.969699481 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
end: Sat Nov 23 03:15:43 UTC 2024
Sat Nov 23 03:19:31 UTC 2024 - running command: lm_eval --model vllm --model_args pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42 --tasks meta_mmlu --batch_size auto --output_path eval_results --seed 42 --log_samples --limit 1
nohup: ignoring input
2024-11-23:03:19:41,651 INFO     [__main__.py:279] Verbosity set to INFO
2024-11-23:03:19:57,291 WARNING  [__main__.py:312]  --limit SHOULD ONLY BE USED FOR TESTING.REAL METRICS SHOULD NOT BE COMPUTED USING LIMIT.
2024-11-23:03:19:57,292 INFO     [__main__.py:376] Selected Tasks: ['meta_mmlu']
2024-11-23:03:19:57,301 INFO     [evaluator.py:164] Setting random seed to 42 | Setting numpy seed to 42 | Setting torch manual seed to 42 | Setting fewshot manual seed to 42
2024-11-23:03:19:57,301 INFO     [evaluator.py:201] Initializing vllm model, with arguments: {'pretrained': 'meta-llama/Llama-3.2-1B', 'tensor_parallel_size': 1, 'dtype': 'auto', 'gpu_memory_utilization': 0.25, 'data_parallel_size': 1, 'max_model_len': 8192, 'add_bos_token': True, 'seed': 42}
INFO 11-23 03:20:06 config.py:350] This model supports multiple tasks: {'embedding', 'generate'}. Defaulting to 'generate'.
INFO 11-23 03:20:06 llm_engine.py:249] Initializing an LLM engine (v0.6.4.post1) with config: model='meta-llama/Llama-3.2-1B', speculative_config=None, tokenizer='meta-llama/Llama-3.2-1B', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=42, served_model_name=meta-llama/Llama-3.2-1B, num_scheduler_steps=1, chunked_prefill_enabled=False multi_step_stream_outputs=True, enable_prefix_caching=False, use_async_output_proc=True, use_cached_outputs=False, chat_template_text_format=string, mm_processor_kwargs=None, pooler_config=None)
INFO 11-23 03:20:06 selector.py:135] Using Flash Attention backend.
INFO 11-23 03:20:07 model_runner.py:1072] Starting to load model meta-llama/Llama-3.2-1B...
INFO 11-23 03:20:07 weight_utils.py:243] Using model weights format ['*.safetensors']
INFO 11-23 03:20:07 weight_utils.py:288] No model.safetensors.index.json found in remote.
Loading safetensors checkpoint shards:   0% Completed | 0/1 [00:00<?, ?it/s]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:01<00:00,  1.85s/it]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:01<00:00,  1.85s/it]

INFO 11-23 03:20:09 model_runner.py:1077] Loading model weights took 2.3185 GB
INFO 11-23 03:20:10 worker.py:232] Memory profiling results: total_gpu_memory=39.38GiB initial_memory_usage=2.82GiB peak_torch_memory=3.52GiB memory_usage_post_profile=2.84GiB non_torch_memory=0.51GiB kv_cache_size=5.81GiB gpu_memory_utilization=0.25
INFO 11-23 03:20:10 gpu_executor.py:113] # GPU blocks: 11900, # CPU blocks: 8192
INFO 11-23 03:20:10 gpu_executor.py:117] Maximum concurrency for 8192 tokens per request: 23.24x
INFO 11-23 03:20:13 model_runner.py:1400] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 11-23 03:20:13 model_runner.py:1404] If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 11-23 03:20:25 model_runner.py:1518] Graph capturing finished in 12 secs, took 0.14 GiB
2024-11-23:03:20:26,655 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
2024-11-23:03:20:26,668 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
2024-11-23:03:20:28,522 INFO     [task.py:415] Building contexts for meta_mmlu on rank 0...
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00, 14169.95it/s]
2024-11-23:03:20:28,536 INFO     [evaluator.py:496] Running loglikelihood requests
Running loglikelihood requests:   0%|          | 0/4 [00:00<?, ?it/s]
Processed prompts:   0%|          | 0/4 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s][A
Processed prompts:  25%|██▌       | 1/4 [00:00<00:00,  9.68it/s, est. speed input: 5117.51 toks/s, output: 9.68 toks/s][AProcessed prompts: 100%|██████████| 4/4 [00:00<00:00, 37.42it/s, est. speed input: 19795.99 toks/s, output: 37.46 toks/s]
Running loglikelihood requests:  25%|██▌       | 1/4 [00:00<00:00,  8.82it/s]Running loglikelihood requests: 100%|██████████| 4/4 [00:00<00:00, 34.53it/s]
2024-11-23:03:20:30,709 INFO     [evaluation_tracker.py:206] Saving results aggregated
2024-11-23:03:20:30,715 INFO     [evaluation_tracker.py:287] Saving per-sample results for: meta_mmlu
tokens length:  528
output logprobs length:  528
ctxlen:  527
Answer:  (-1.53548264503479, False)
tokens length:  528
output logprobs length:  528
ctxlen:  527
Answer:  (-1.03548264503479, True)
tokens length:  528
output logprobs length:  528
ctxlen:  527
Answer:  (-2.16048264503479, False)
tokens length:  528
output logprobs length:  528
ctxlen:  527
Answer:  (-1.16048264503479, False)
vllm (pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42), gen_kwargs: (None), limit: 1.0, num_fewshot: None, batch_size: auto
|  Tasks  |Version|Filter|n-shot| Metric |   |Value|   |Stderr|
|---------|------:|------|-----:|--------|---|----:|---|------|
|meta_mmlu|      1|none  |     0|acc     |↑  |    0|±  |   N/A|
|         |       |none  |     0|acc_norm|↑  |    0|±  |   N/A|

[rank0]:[W1123 03:20:31.763593535 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
end: Sat Nov 23 03:20:33 UTC 2024
Sat Nov 23 03:23:48 UTC 2024 - running command: lm_eval --model vllm --model_args pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42 --tasks meta_mmlu --batch_size auto --output_path eval_results --seed 42 --log_samples --limit 1
nohup: ignoring input
2024-11-23:03:23:58,532 INFO     [__main__.py:279] Verbosity set to INFO
2024-11-23:03:24:14,389 WARNING  [__main__.py:312]  --limit SHOULD ONLY BE USED FOR TESTING.REAL METRICS SHOULD NOT BE COMPUTED USING LIMIT.
2024-11-23:03:24:14,390 INFO     [__main__.py:376] Selected Tasks: ['meta_mmlu']
2024-11-23:03:24:14,398 INFO     [evaluator.py:164] Setting random seed to 42 | Setting numpy seed to 42 | Setting torch manual seed to 42 | Setting fewshot manual seed to 42
2024-11-23:03:24:14,398 INFO     [evaluator.py:201] Initializing vllm model, with arguments: {'pretrained': 'meta-llama/Llama-3.2-1B', 'tensor_parallel_size': 1, 'dtype': 'auto', 'gpu_memory_utilization': 0.25, 'data_parallel_size': 1, 'max_model_len': 8192, 'add_bos_token': True, 'seed': 42}
INFO 11-23 03:24:23 config.py:350] This model supports multiple tasks: {'embedding', 'generate'}. Defaulting to 'generate'.
INFO 11-23 03:24:23 llm_engine.py:249] Initializing an LLM engine (v0.6.4.post1) with config: model='meta-llama/Llama-3.2-1B', speculative_config=None, tokenizer='meta-llama/Llama-3.2-1B', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=42, served_model_name=meta-llama/Llama-3.2-1B, num_scheduler_steps=1, chunked_prefill_enabled=False multi_step_stream_outputs=True, enable_prefix_caching=False, use_async_output_proc=True, use_cached_outputs=False, chat_template_text_format=string, mm_processor_kwargs=None, pooler_config=None)
INFO 11-23 03:24:23 selector.py:135] Using Flash Attention backend.
INFO 11-23 03:24:24 model_runner.py:1072] Starting to load model meta-llama/Llama-3.2-1B...
INFO 11-23 03:24:24 weight_utils.py:243] Using model weights format ['*.safetensors']
INFO 11-23 03:24:24 weight_utils.py:288] No model.safetensors.index.json found in remote.
Loading safetensors checkpoint shards:   0% Completed | 0/1 [00:00<?, ?it/s]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:01<00:00,  1.87s/it]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:01<00:00,  1.87s/it]

INFO 11-23 03:24:26 model_runner.py:1077] Loading model weights took 2.3185 GB
INFO 11-23 03:24:27 worker.py:232] Memory profiling results: total_gpu_memory=39.38GiB initial_memory_usage=2.82GiB peak_torch_memory=3.52GiB memory_usage_post_profile=2.84GiB non_torch_memory=0.51GiB kv_cache_size=5.81GiB gpu_memory_utilization=0.25
INFO 11-23 03:24:27 gpu_executor.py:113] # GPU blocks: 11900, # CPU blocks: 8192
INFO 11-23 03:24:27 gpu_executor.py:117] Maximum concurrency for 8192 tokens per request: 23.24x
INFO 11-23 03:24:30 model_runner.py:1400] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 11-23 03:24:30 model_runner.py:1404] If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 11-23 03:24:42 model_runner.py:1518] Graph capturing finished in 12 secs, took 0.14 GiB
2024-11-23:03:24:43,911 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
2024-11-23:03:24:43,924 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
2024-11-23:03:24:45,800 INFO     [task.py:415] Building contexts for meta_mmlu on rank 0...
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00, 13617.87it/s]
2024-11-23:03:24:45,814 INFO     [evaluator.py:496] Running loglikelihood requests
Running loglikelihood requests:   0%|          | 0/4 [00:00<?, ?it/s]
Processed prompts:   0%|          | 0/4 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s][A
Processed prompts:  25%|██▌       | 1/4 [00:00<00:00,  9.62it/s, est. speed input: 5086.01 toks/s, output: 9.62 toks/s][AProcessed prompts: 100%|██████████| 4/4 [00:00<00:00, 37.52it/s, est. speed input: 19852.51 toks/s, output: 37.57 toks/s]
tokens length:  528
output logprobs length:  528
ctxlen:  527
[rank0]: Traceback (most recent call last):
[rank0]:   File "/home/ubuntu/us-east-1/lm-evaluation-harness/.venv/bin/lm_eval", line 8, in <module>
[rank0]:     sys.exit(cli_evaluate())
[rank0]:   File "/home/ubuntu/us-east-1/lm-evaluation-harness/lm_eval/__main__.py", line 382, in cli_evaluate
[rank0]:     results = evaluator.simple_evaluate(
[rank0]:   File "/home/ubuntu/us-east-1/lm-evaluation-harness/lm_eval/utils.py", line 397, in _wrapper
[rank0]:     return fn(*args, **kwargs)
[rank0]:   File "/home/ubuntu/us-east-1/lm-evaluation-harness/lm_eval/evaluator.py", line 303, in simple_evaluate
[rank0]:     results = evaluate(
[rank0]:   File "/home/ubuntu/us-east-1/lm-evaluation-harness/lm_eval/utils.py", line 397, in _wrapper
[rank0]:     return fn(*args, **kwargs)
[rank0]:   File "/home/ubuntu/us-east-1/lm-evaluation-harness/lm_eval/evaluator.py", line 510, in evaluate
[rank0]:     resps = getattr(lm, reqtype)(cloned_reqs)
[rank0]:   File "/home/ubuntu/us-east-1/lm-evaluation-harness/lm_eval/api/model.py", line 378, in loglikelihood
[rank0]:     return self._loglikelihood_tokens(new_reqs, disable_tqdm=disable_tqdm)
[rank0]:   File "/home/ubuntu/us-east-1/lm-evaluation-harness/lm_eval/models/vllm_causallms.py", line 452, in _loglikelihood_tokens
[rank0]:     answer = self._parse_logprobs(
[rank0]:   File "/home/ubuntu/us-east-1/lm-evaluation-harness/lm_eval/models/vllm_causallms.py", line 491, in _parse_logprobs
[rank0]:     print(f"For token {token}, log_prob: {logprob_dict[token]}")
[rank0]: TypeError: 'NoneType' object is not subscriptable
Running loglikelihood requests:   0%|          | 0/4 [00:00<?, ?it/s]
[rank0]:[W1123 03:24:46.840527752 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
end: Sat Nov 23 03:24:48 UTC 2024
Sat Nov 23 03:25:32 UTC 2024 - running command: lm_eval --model vllm --model_args pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42 --tasks meta_mmlu --batch_size auto --output_path eval_results --seed 42 --log_samples --limit 1
nohup: ignoring input
2024-11-23:03:25:41,909 INFO     [__main__.py:279] Verbosity set to INFO
2024-11-23:03:25:57,468 WARNING  [__main__.py:312]  --limit SHOULD ONLY BE USED FOR TESTING.REAL METRICS SHOULD NOT BE COMPUTED USING LIMIT.
2024-11-23:03:25:57,469 INFO     [__main__.py:376] Selected Tasks: ['meta_mmlu']
2024-11-23:03:25:57,477 INFO     [evaluator.py:164] Setting random seed to 42 | Setting numpy seed to 42 | Setting torch manual seed to 42 | Setting fewshot manual seed to 42
2024-11-23:03:25:57,477 INFO     [evaluator.py:201] Initializing vllm model, with arguments: {'pretrained': 'meta-llama/Llama-3.2-1B', 'tensor_parallel_size': 1, 'dtype': 'auto', 'gpu_memory_utilization': 0.25, 'data_parallel_size': 1, 'max_model_len': 8192, 'add_bos_token': True, 'seed': 42}
INFO 11-23 03:26:05 config.py:350] This model supports multiple tasks: {'embedding', 'generate'}. Defaulting to 'generate'.
INFO 11-23 03:26:05 llm_engine.py:249] Initializing an LLM engine (v0.6.4.post1) with config: model='meta-llama/Llama-3.2-1B', speculative_config=None, tokenizer='meta-llama/Llama-3.2-1B', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=42, served_model_name=meta-llama/Llama-3.2-1B, num_scheduler_steps=1, chunked_prefill_enabled=False multi_step_stream_outputs=True, enable_prefix_caching=False, use_async_output_proc=True, use_cached_outputs=False, chat_template_text_format=string, mm_processor_kwargs=None, pooler_config=None)
INFO 11-23 03:26:06 selector.py:135] Using Flash Attention backend.
INFO 11-23 03:26:07 model_runner.py:1072] Starting to load model meta-llama/Llama-3.2-1B...
INFO 11-23 03:26:07 weight_utils.py:243] Using model weights format ['*.safetensors']
INFO 11-23 03:26:07 weight_utils.py:288] No model.safetensors.index.json found in remote.
Loading safetensors checkpoint shards:   0% Completed | 0/1 [00:00<?, ?it/s]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:01<00:00,  1.83s/it]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:01<00:00,  1.83s/it]

INFO 11-23 03:26:09 model_runner.py:1077] Loading model weights took 2.3185 GB
INFO 11-23 03:26:10 worker.py:232] Memory profiling results: total_gpu_memory=39.38GiB initial_memory_usage=2.82GiB peak_torch_memory=3.52GiB memory_usage_post_profile=2.84GiB non_torch_memory=0.51GiB kv_cache_size=5.81GiB gpu_memory_utilization=0.25
INFO 11-23 03:26:10 gpu_executor.py:113] # GPU blocks: 11900, # CPU blocks: 8192
INFO 11-23 03:26:10 gpu_executor.py:117] Maximum concurrency for 8192 tokens per request: 23.24x
INFO 11-23 03:26:13 model_runner.py:1400] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 11-23 03:26:13 model_runner.py:1404] If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 11-23 03:26:25 model_runner.py:1518] Graph capturing finished in 12 secs, took 0.14 GiB
2024-11-23:03:26:26,669 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
2024-11-23:03:26:26,682 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
2024-11-23:03:26:28,519 INFO     [task.py:415] Building contexts for meta_mmlu on rank 0...
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00, 14364.05it/s]
2024-11-23:03:26:28,533 INFO     [evaluator.py:496] Running loglikelihood requests
Running loglikelihood requests:   0%|          | 0/4 [00:00<?, ?it/s]
Processed prompts:   0%|          | 0/4 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s][A
Processed prompts:  25%|██▌       | 1/4 [00:00<00:00,  9.69it/s, est. speed input: 5118.17 toks/s, output: 9.69 toks/s][AProcessed prompts: 100%|██████████| 4/4 [00:00<00:00, 37.74it/s, est. speed input: 19978.60 toks/s, output: 37.81 toks/s]
Running loglikelihood requests:  25%|██▌       | 1/4 [00:00<00:00,  8.85it/s]Running loglikelihood requests: 100%|██████████| 4/4 [00:00<00:00, 33.66it/s]
2024-11-23:03:26:30,877 INFO     [evaluation_tracker.py:206] Saving results aggregated
2024-11-23:03:26:30,884 INFO     [evaluation_tracker.py:287] Saving per-sample results for: meta_mmlu
tokens length:  528
output logprobs length:  528
ctxlen:  527
For token 791, log_prob: Logprob(logprob=-3.588294506072998, rank=4, decoded_token=None)
For token 2768, log_prob: Logprob(logprob=-4.304756164550781, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-2.969231605529785, rank=3, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-9.316919326782227, rank=700, decoded_token=None)
For token 5873, log_prob: Logprob(logprob=-1.1169946193695068, rank=1, decoded_token=None)
For token 4860, log_prob: Logprob(logprob=-0.15302471816539764, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.3894879817962646, rank=9, decoded_token=None)
For token 4291, log_prob: Logprob(logprob=-3.562437057495117, rank=2, decoded_token=None)
For token 11503, log_prob: Logprob(logprob=-0.9702798128128052, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.4542173743247986, rank=1, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.899801015853882, rank=4, decoded_token=None)
For token 36256, log_prob: Logprob(logprob=-8.734892845153809, rank=631, decoded_token=None)
For token 38696, log_prob: Logprob(logprob=-3.7674813270568848, rank=8, decoded_token=None)
For token 382, log_prob: Logprob(logprob=-5.597833156585693, rank=19, decoded_token=None)
For token 791, log_prob: Logprob(logprob=-3.544769287109375, rank=4, decoded_token=None)
For token 7187, log_prob: Logprob(logprob=-7.414687633514404, rank=167, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.11540365219116211, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.7252726554870605, rank=2, decoded_token=None)
For token 3363, log_prob: Logprob(logprob=-1.8480002880096436, rank=1, decoded_token=None)
For token 1405, log_prob: Logprob(logprob=-5.9969987869262695, rank=13, decoded_token=None)
For token 33126, log_prob: Logprob(logprob=-9.10548210144043, rank=325, decoded_token=None)
For token 574, log_prob: Logprob(logprob=-5.349006652832031, rank=8, decoded_token=None)
For token 9405, log_prob: Logprob(logprob=-0.40580296516418457, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.5615864396095276, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.7438945174217224, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-7.263688087463379, rank=140, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.7120769619941711, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-8.756370544433594, rank=570, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.46257808804512024, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-4.10749626159668, rank=8, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.29674193263053894, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.1783972829580307, rank=1, decoded_token=None)
For token 907, log_prob: Logprob(logprob=-5.722339153289795, rank=27, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.03685179725289345, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.9906996488571167, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.191212177276611, rank=12, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.4952895641326904, rank=3, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-6.860769271850586, rank=33, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.4738154709339142, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.81992244720459, rank=9, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.851509690284729, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-0.4733523726463318, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.3776562213897705, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-0.04871302843093872, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-3.7120940685272217, rank=5, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.0033669471740723, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.2580585777759552, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.20247121155261993, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.971443772315979, rank=1, decoded_token=None)
For token 9214, log_prob: Logprob(logprob=-7.329587459564209, rank=44, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.33627015352249146, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.003795088967308402, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0006998711614869535, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021235832944512367, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.1533547639846802, rank=1, decoded_token=None)
For token 11758, log_prob: Logprob(logprob=-1.9098384380340576, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.007843528874218464, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0015495923580601811, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0005785936955362558, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006402693688869476, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.09296748787164688, rank=1, decoded_token=None)
For token 22781, log_prob: Logprob(logprob=-0.6998193264007568, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0074472189880907536, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0022168601863086224, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0005930095794610679, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.019136684015393257, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.05925050005316734, rank=1, decoded_token=None)
For token 6305, log_prob: Logprob(logprob=-0.6276966333389282, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.2591150999069214, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.909871518611908, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.060657717287540436, rank=1, decoded_token=None)
For token 362, log_prob: Logprob(logprob=-1.2651628255844116, rank=2, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-1.236945629119873, rank=2, decoded_token=None)
For token 43819, log_prob: Logprob(logprob=-12.281052589416504, rank=2698, decoded_token=None)
For token 21475, log_prob: Logprob(logprob=-0.7285953164100647, rank=1, decoded_token=None)
For token 1511, log_prob: Logprob(logprob=-6.596356391906738, rank=50, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.3166232109069824, rank=3, decoded_token=None)
For token 6037, log_prob: Logprob(logprob=-6.134354591369629, rank=53, decoded_token=None)
For token 330, log_prob: Logprob(logprob=-3.653575897216797, rank=9, decoded_token=None)
For token 2261, log_prob: Logprob(logprob=-4.241303443908691, rank=15, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.6807642579078674, rank=1, decoded_token=None)
For token 806, log_prob: Logprob(logprob=-4.885201930999756, rank=18, decoded_token=None)
For token 1, log_prob: Logprob(logprob=-1.440927505493164, rank=2, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.5772078633308411, rank=1, decoded_token=None)
For token 1893, log_prob: Logprob(logprob=-6.191239356994629, rank=44, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-1.369935393333435, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.322933554649353, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-6.340333938598633, rank=23, decoded_token=None)
For token 6982, log_prob: Logprob(logprob=-3.008331298828125, rank=5, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-0.696544349193573, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.47080329060554504, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.408674716949463, rank=9, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-4.432986259460449, rank=13, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.9232057332992554, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.13041946291923523, rank=1, decoded_token=None)
For token 1691, log_prob: Logprob(logprob=-0.8227146863937378, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.007162133697420359, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.016214758157730103, rank=1, decoded_token=None)
For token 843, log_prob: Logprob(logprob=-0.13016277551651, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.03512261062860489, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.20052661001682281, rank=1, decoded_token=None)
For token 3391, log_prob: Logprob(logprob=-0.02468840219080448, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.08266056329011917, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3703943192958832, rank=1, decoded_token=None)
For token 4370, log_prob: Logprob(logprob=-0.017463840544223785, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-9.801653861999512, rank=120, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-4.195326805114746, rank=8, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.4466686248779297, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.517330527305603, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.113140106201172, rank=3, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.443703293800354, rank=2, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.23402449488639832, rank=1, decoded_token=None)
For token 837, log_prob: Logprob(logprob=-0.6284106373786926, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.37667617201805115, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.0740572139620781, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.009778810665011406, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.5895971655845642, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-2.43047833442688, rank=5, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.1376230716705322, rank=3, decoded_token=None)
For token 339, log_prob: Logprob(logprob=-0.6972476840019226, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.1368379592895508, rank=2, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.17106032371521, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.014991242438554764, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.19605356454849243, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.600100040435791, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.20332926511764526, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-4.175275802612305, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.4642753601074219, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.02154143527150154, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.20088475942611694, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.002081967191770673, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0003781795676331967, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.056677043437957764, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.308137893676758, rank=4, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.6069552898406982, rank=4, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.774920642375946, rank=1, decoded_token=None)
For token 2646, log_prob: Logprob(logprob=-3.097163200378418, rank=8, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-2.366727113723755, rank=3, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.652055263519287, rank=7, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-2.718801498413086, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.0695536658167839, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-3.1284074783325195, rank=4, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.013708023354411125, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-0.05030599236488342, rank=1, decoded_token=None)
For token 1023, log_prob: Logprob(logprob=-0.0032524564303457737, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.03535380959510803, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.010325347073376179, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00024101213784888387, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.140742689371109, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-5.092126846313477, rank=9, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.4843006134033203, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.11257536709308624, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.3171550929546356, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.00759677030146122, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.02107418328523636, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.09753574430942535, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.4928134083747864, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-3.0057926177978516, rank=5, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.8141931891441345, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.07718711346387863, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-7.487396240234375, rank=28, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.15662676095962524, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.012751000933349133, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.005057043395936489, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.03090181201696396, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.02183726243674755, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0004822045157197863, rank=1, decoded_token=None)
For token 1442, log_prob: Logprob(logprob=-4.839500427246094, rank=6, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.566116213798523, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3449784517288208, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.1413413286209106, rank=1, decoded_token=None)
For token 3940, log_prob: Logprob(logprob=-4.172558307647705, rank=14, decoded_token=None)
For token 449, log_prob: Logprob(logprob=-0.06449252367019653, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.9140709638595581, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.7719259262084961, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.007958251982927322, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-2.8203039169311523, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.6145880222320557, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.5863301753997803, rank=2, decoded_token=None)
For token 1053, log_prob: Logprob(logprob=-2.094866991043091, rank=2, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-3.046118974685669, rank=6, decoded_token=None)
For token 1193, log_prob: Logprob(logprob=-3.4279844760894775, rank=7, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.308468222618103, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.018749739974737167, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-2.9477155208587646, rank=3, decoded_token=None)
For token 433, log_prob: Logprob(logprob=-0.40446826815605164, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.21264755725860596, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.025269512087106705, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0027451948262751102, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.1849918365478516, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.1902220994234085, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.3071374893188477, rank=2, decoded_token=None)
For token 2860, log_prob: Logprob(logprob=-5.8816609382629395, rank=57, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.02797979861497879, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.23590943217277527, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-4.081195831298828, rank=3, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-6.011350631713867, rank=47, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.6415536403656006, rank=9, decoded_token=None)
For token 1514, log_prob: Logprob(logprob=-1.6141451597213745, rank=2, decoded_token=None)
For token 19794, log_prob: Logprob(logprob=-4.327911853790283, rank=6, decoded_token=None)
For token 520, log_prob: Logprob(logprob=-2.610771656036377, rank=4, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.8295858502388, rank=1, decoded_token=None)
For token 6246, log_prob: Logprob(logprob=-5.445433616638184, rank=25, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.8759067058563232, rank=1, decoded_token=None)
For token 2684, log_prob: Logprob(logprob=-3.019108295440674, rank=7, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.6913377642631531, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.022329222410917282, rank=1, decoded_token=None)
For token 7041, log_prob: Logprob(logprob=-3.9607925415039062, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.288790225982666, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.200063943862915, rank=1, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-0.6154614090919495, rank=1, decoded_token=None)
For token 389, log_prob: Logprob(logprob=-2.105520248413086, rank=3, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-1.2467472553253174, rank=2, decoded_token=None)
For token 2128, log_prob: Logprob(logprob=-0.08914763480424881, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.16352039575576782, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-2.8792216777801514, rank=4, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-1.2772589921951294, rank=2, decoded_token=None)
For token 12722, log_prob: Logprob(logprob=-4.80352258682251, rank=9, decoded_token=None)
For token 15100, log_prob: Logprob(logprob=-4.0572991371154785, rank=7, decoded_token=None)
For token 1268, log_prob: Logprob(logprob=-0.9948503971099854, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.8683412075042725, rank=3, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-1.9003151655197144, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.11957751214504242, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.29255211353302, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.01057143323123455, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.7831801772117615, rank=1, decoded_token=None)
For token 4460, log_prob: Logprob(logprob=-3.463230609893799, rank=3, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.9446107149124146, rank=2, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.04526291787624359, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002380991354584694, rank=1, decoded_token=None)
For token 2758, log_prob: Logprob(logprob=-3.3964881896972656, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.38579824566841125, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.9311184883117676, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.38374000787734985, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.3195199966430664, rank=2, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.10298678278923035, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.7452938556671143, rank=2, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.4569380283355713, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.816202163696289, rank=4, decoded_token=None)
For token 1758, log_prob: Logprob(logprob=-0.8483269810676575, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.920579731464386, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.4476555585861206, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0015714927576482296, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00015269544383045286, rank=1, decoded_token=None)
For token 64002, log_prob: Logprob(logprob=-2.5445642471313477, rank=3, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.040661152452230453, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.1308070570230484, rank=1, decoded_token=None)
For token 555, log_prob: Logprob(logprob=-0.035039275884628296, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.00441908510401845, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.013742946088314056, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.09101356565952301, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.06291541457176208, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.23998305201530457, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-0.0345701165497303, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.00949143711477518, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.0618923157453537, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0015372138004750013, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010275312524754554, rank=1, decoded_token=None)
For token 72159, log_prob: Logprob(logprob=-1.416687250137329, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.022464442998170853, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.1311088651418686, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-5.759943962097168, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005024425685405731, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.10427399724721909, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.16913986206054688, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.024288708344101906, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04584870859980583, rank=1, decoded_token=None)
For token 3965, log_prob: Logprob(logprob=-0.16225406527519226, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.09998979419469833, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.008857247419655323, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0020776845049113035, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0003250309091527015, rank=1, decoded_token=None)
For token 94310, log_prob: Logprob(logprob=-0.7316688895225525, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.024832606315612793, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.6226915121078491, rank=1, decoded_token=None)
For token 505, log_prob: Logprob(logprob=-0.10961204022169113, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.010747289285063744, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.05260615423321724, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.02702752687036991, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.012585973367094994, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0407465361058712, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.009129801765084267, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.017733123153448105, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.05732721835374832, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004556629806756973, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0005477358354255557, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.3356648683547974, rank=3, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.2082667499780655, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-1.9418500661849976, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-5.220272541046143, rank=29, decoded_token=None)
For token 31878, log_prob: Logprob(logprob=-1.610248327255249, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.7332974672317505, rank=1, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-8.542618751525879, rank=186, decoded_token=None)
For token 2204, log_prob: Logprob(logprob=-2.599426507949829, rank=2, decoded_token=None)
For token 8146, log_prob: Logprob(logprob=-5.755116939544678, rank=24, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.027865495532751083, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-3.957357883453369, rank=10, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.40048009157180786, rank=1, decoded_token=None)
For token 2435, log_prob: Logprob(logprob=-4.845759868621826, rank=13, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.3862104415893555, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.847692608833313, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-4.27924108505249, rank=17, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-4.734525680541992, rank=13, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.17049723863601685, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-2.0231032371520996, rank=2, decoded_token=None)
For token 1933, log_prob: Logprob(logprob=-0.12822699546813965, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-3.447733163833618, rank=5, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-7.156528472900391, rank=17, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.10994840413331985, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-2.5678606033325195, rank=5, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.8113741874694824, rank=3, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.09289318323135376, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.6233457922935486, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.7501171827316284, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-2.1427054405212402, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-3.4584686756134033, rank=6, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.026147279888391495, rank=1, decoded_token=None)
For token 706, log_prob: Logprob(logprob=-0.34631913900375366, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.6868782043457031, rank=2, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.2303718775510788, rank=1, decoded_token=None)
For token 649, log_prob: Logprob(logprob=-2.7231407165527344, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.054041046649217606, rank=1, decoded_token=None)
For token 1766, log_prob: Logprob(logprob=-2.5916926860809326, rank=4, decoded_token=None)
For token 1701, log_prob: Logprob(logprob=-2.2964775562286377, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.42406484484672546, rank=1, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-3.539501428604126, rank=7, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-4.590996742248535, rank=15, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.18096934258937836, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.9475879669189453, rank=2, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-0.4854806661605835, rank=1, decoded_token=None)
For token 25800, log_prob: Logprob(logprob=-3.8487393856048584, rank=9, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.1915293186903, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.07257572561502457, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-2.225902557373047, rank=3, decoded_token=None)
For token 2650, log_prob: Logprob(logprob=-2.9975926876068115, rank=3, decoded_token=None)
For token 1690, log_prob: Logprob(logprob=-0.08352108299732208, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.6937007308006287, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.15021462738513947, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-0.1846829354763031, rank=1, decoded_token=None)
For token 1587, log_prob: Logprob(logprob=-0.9513101577758789, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.025589339435100555, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.003244970692321658, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-0.10589171200990677, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.1511233001947403, rank=1, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.037622109055519104, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.09561489522457123, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.07025675475597382, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002441641641780734, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021361514925956726, rank=1, decoded_token=None)
For token 25541, log_prob: Logprob(logprob=-11.017716407775879, rank=927, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.7192279100418091, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0011468507582321763, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013636612857226282, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.001517931348644197, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-4.038790702819824, rank=7, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.023376699537038803, rank=1, decoded_token=None)
For token 21129, log_prob: Logprob(logprob=-5.540423393249512, rank=45, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.008513230830430984, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.00035577642847783864, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001481661747675389, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0015720878727734089, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.26859188079834, rank=2, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.006552401464432478, rank=1, decoded_token=None)
For token 24599, log_prob: Logprob(logprob=-6.160186767578125, rank=81, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.004695461131632328, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.000506511190906167, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002585315378382802, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0038100522942841053, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-2.5259666442871094, rank=3, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.001276512397453189, rank=1, decoded_token=None)
For token 5154, log_prob: Logprob(logprob=-5.772514343261719, rank=71, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.5313923954963684, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004962034057825804, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0004538459761533886, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0903221368789673, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.23396459221839905, rank=1, decoded_token=None)
For token 23956, log_prob: Logprob(logprob=-3.7109880447387695, rank=5, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-2.3338446617126465, rank=3, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-1.2901480197906494, rank=1, decoded_token=None)
For token 13890, log_prob: Logprob(logprob=-0.29379332065582275, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.004455045331269503, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5699459910392761, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.582611322402954, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-3.8140597343444824, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.22526046633720398, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-3.268810987472534, rank=8, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.9523714780807495, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.02629231847822666, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002087677363306284, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-4.041932106018066, rank=2, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3275642395019531, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7747173309326172, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01943170465528965, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.8843350410461426, rank=6, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.05427434667944908, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7900131344795227, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-1.6092212200164795, rank=2, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-4.122803688049316, rank=6, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.053970567882061005, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006345955654978752, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.5473098754882812, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.06624624133110046, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0031123552471399307, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00019047829846385866, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.5430195927619934, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3349359631538391, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.17014674842357635, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.11895304173231125, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2283027172088623, rank=4, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.21531498432159424, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-4.436285972595215, rank=3, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.43919575214385986, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.5670137405395508, rank=3, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.013229803182184696, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.020044738426804543, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-1.059314250946045, rank=1, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.14613543450832367, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0012510338565334678, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013481661153491586, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.36141881346702576, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.170744389295578, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.15453915297985077, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0653778612613678, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.4421030282974243, rank=3, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.09968782961368561, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-0.7550356984138489, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.3567902743816376, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5658089518547058, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.03483690321445465, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.05940350890159607, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-1.1212691068649292, rank=2, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.013908135704696178, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0008878341759555042, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001971527235582471, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.19026270508766174, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.07903989404439926, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.1152166947722435, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.040283940732479095, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-0.6784765124320984, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.02332417666912079, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-4.38916015625, rank=4, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.059930216521024704, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.9063451290130615, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.02287174016237259, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.002457695547491312, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-5.066433429718018, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.015977919101715088, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004998686723411083, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0003066784702241421, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.108638048171997, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.18586991727352142, rank=1, decoded_token=None)
For token 11874, log_prob: Logprob(logprob=-5.224460124969482, rank=13, decoded_token=None)
For token 4459, log_prob: Logprob(logprob=-7.009128570556641, rank=124, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.6522552967071533, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.379534363746643, rank=2, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.5606241226196289, rank=1, decoded_token=None)
For token 3325, log_prob: Logprob(logprob=-9.22218132019043, rank=39, decoded_token=None)
For token 4279, log_prob: Logprob(logprob=-0.061864301562309265, rank=1, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-0.45201748609542847, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.17637768387794495, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.023118602111935616, rank=1, decoded_token=None)
For token 1399, log_prob: Logprob(logprob=-3.963719367980957, rank=14, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.09445195645093918, rank=1, decoded_token=None)
For token 9062, log_prob: Logprob(logprob=-5.071889877319336, rank=12, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.6336301565170288, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.3426891267299652, rank=1, decoded_token=None)
For token 2753, log_prob: Logprob(logprob=-2.6435422897338867, rank=3, decoded_token=None)
For token 1109, log_prob: Logprob(logprob=-0.004161983262747526, rank=1, decoded_token=None)
For token 477, log_prob: Logprob(logprob=-2.879474401473999, rank=3, decoded_token=None)
For token 6273, log_prob: Logprob(logprob=-0.013294622302055359, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.0058578010648489, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.09096752852201462, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-5.163353443145752, rank=29, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.1529577076435089, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-1.5697429180145264, rank=2, decoded_token=None)
For token 12474, log_prob: Logprob(logprob=-2.645151138305664, rank=3, decoded_token=None)
For token 4279, log_prob: Logprob(logprob=-0.6883967518806458, rank=1, decoded_token=None)
For token 8331, log_prob: Logprob(logprob=-0.40138059854507446, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.16735176742076874, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.33446672558784485, rank=1, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-0.18579617142677307, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.2953820526599884, rank=1, decoded_token=None)
For token 285, log_prob: Logprob(logprob=-9.538186073303223, rank=41, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.9321149587631226, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.0747475624084473, rank=3, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.17374888062477112, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-1.1434378623962402, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-2.005824565887451, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.07729481160640717, rank=1, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-0.310687780380249, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.7019672989845276, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.0899902880191803, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.014821651391685009, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0012823462020605803, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.03980715200304985, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.936407446861267, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.24611333012580872, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005055620335042477, rank=1, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.329893112182617, rank=3, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.023442961275577545, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0009132028790190816, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-7.390703103737906e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.004810308571904898, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.1714460849761963, rank=7, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.02755010686814785, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0016718233237043023, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-1.2207993268966675, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0012977044098079205, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.00026008085114881396, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-6.186770770000294e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005501368548721075, rank=1, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.967453718185425, rank=8, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.003204688895493746, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0013855629367753863, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-0.7422707080841064, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0011626873165369034, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.00032074074260890484, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00017677174764685333, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.015494913794100285, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-2.0872957706451416, rank=3, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.002190573140978813, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.001105650793761015, rank=1, decoded_token=None)
For token 868, log_prob: Logprob(logprob=-2.141770362854004, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.02330053597688675, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.002792746527120471, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0005763299996033311, rank=1, decoded_token=None)
For token 356, log_prob: Logprob(logprob=-1.53548264503479, rank=3, decoded_token=None)
Answer:  (-1.53548264503479, False)
tokens length:  528
output logprobs length:  528
ctxlen:  527
For token 791, log_prob: Logprob(logprob=-3.588294506072998, rank=4, decoded_token=None)
For token 2768, log_prob: Logprob(logprob=-4.304756164550781, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-2.969231605529785, rank=3, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-9.316919326782227, rank=700, decoded_token=None)
For token 5873, log_prob: Logprob(logprob=-1.1169946193695068, rank=1, decoded_token=None)
For token 4860, log_prob: Logprob(logprob=-0.15302471816539764, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.3894879817962646, rank=9, decoded_token=None)
For token 4291, log_prob: Logprob(logprob=-3.562437057495117, rank=2, decoded_token=None)
For token 11503, log_prob: Logprob(logprob=-0.9702798128128052, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.4542173743247986, rank=1, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.899801015853882, rank=4, decoded_token=None)
For token 36256, log_prob: Logprob(logprob=-8.734892845153809, rank=631, decoded_token=None)
For token 38696, log_prob: Logprob(logprob=-3.7674813270568848, rank=8, decoded_token=None)
For token 382, log_prob: Logprob(logprob=-5.597833156585693, rank=19, decoded_token=None)
For token 791, log_prob: Logprob(logprob=-3.544769287109375, rank=4, decoded_token=None)
For token 7187, log_prob: Logprob(logprob=-7.414687633514404, rank=167, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.11540365219116211, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.7252726554870605, rank=2, decoded_token=None)
For token 3363, log_prob: Logprob(logprob=-1.8480002880096436, rank=1, decoded_token=None)
For token 1405, log_prob: Logprob(logprob=-5.9969987869262695, rank=13, decoded_token=None)
For token 33126, log_prob: Logprob(logprob=-9.10548210144043, rank=325, decoded_token=None)
For token 574, log_prob: Logprob(logprob=-5.349006652832031, rank=8, decoded_token=None)
For token 9405, log_prob: Logprob(logprob=-0.40580296516418457, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.5615864396095276, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.7438945174217224, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-7.263688087463379, rank=140, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.7120769619941711, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-8.756370544433594, rank=570, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.46257808804512024, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-4.10749626159668, rank=8, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.29674193263053894, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.1783972829580307, rank=1, decoded_token=None)
For token 907, log_prob: Logprob(logprob=-5.722339153289795, rank=27, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.03685179725289345, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.9906996488571167, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.191212177276611, rank=12, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.4952895641326904, rank=3, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-6.860769271850586, rank=33, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.4738154709339142, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.81992244720459, rank=9, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.851509690284729, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-0.4733523726463318, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.3776562213897705, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-0.04871302843093872, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-3.7120940685272217, rank=5, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.0033669471740723, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.2580585777759552, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.20247121155261993, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.971443772315979, rank=1, decoded_token=None)
For token 9214, log_prob: Logprob(logprob=-7.329587459564209, rank=44, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.33627015352249146, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.003795088967308402, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0006998711614869535, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021235832944512367, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.1533547639846802, rank=1, decoded_token=None)
For token 11758, log_prob: Logprob(logprob=-1.9098384380340576, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.007843528874218464, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0015495923580601811, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0005785936955362558, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006402693688869476, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.09296748787164688, rank=1, decoded_token=None)
For token 22781, log_prob: Logprob(logprob=-0.6998193264007568, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0074472189880907536, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0022168601863086224, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0005930095794610679, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.019136684015393257, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.05925050005316734, rank=1, decoded_token=None)
For token 6305, log_prob: Logprob(logprob=-0.6276966333389282, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.2591150999069214, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.909871518611908, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.060657717287540436, rank=1, decoded_token=None)
For token 362, log_prob: Logprob(logprob=-1.2651628255844116, rank=2, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-1.236945629119873, rank=2, decoded_token=None)
For token 43819, log_prob: Logprob(logprob=-12.281052589416504, rank=2698, decoded_token=None)
For token 21475, log_prob: Logprob(logprob=-0.7285953164100647, rank=1, decoded_token=None)
For token 1511, log_prob: Logprob(logprob=-6.596356391906738, rank=50, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.3166232109069824, rank=3, decoded_token=None)
For token 6037, log_prob: Logprob(logprob=-6.134354591369629, rank=53, decoded_token=None)
For token 330, log_prob: Logprob(logprob=-3.653575897216797, rank=9, decoded_token=None)
For token 2261, log_prob: Logprob(logprob=-4.241303443908691, rank=15, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.6807642579078674, rank=1, decoded_token=None)
For token 806, log_prob: Logprob(logprob=-4.885201930999756, rank=18, decoded_token=None)
For token 1, log_prob: Logprob(logprob=-1.440927505493164, rank=2, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.5772078633308411, rank=1, decoded_token=None)
For token 1893, log_prob: Logprob(logprob=-6.191239356994629, rank=44, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-1.369935393333435, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.322933554649353, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-6.340333938598633, rank=23, decoded_token=None)
For token 6982, log_prob: Logprob(logprob=-3.008331298828125, rank=5, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-0.696544349193573, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.47080329060554504, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.408674716949463, rank=9, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-4.432986259460449, rank=13, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.9232057332992554, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.13041946291923523, rank=1, decoded_token=None)
For token 1691, log_prob: Logprob(logprob=-0.8227146863937378, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.007162133697420359, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.016214758157730103, rank=1, decoded_token=None)
For token 843, log_prob: Logprob(logprob=-0.13016277551651, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.03512261062860489, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.20052661001682281, rank=1, decoded_token=None)
For token 3391, log_prob: Logprob(logprob=-0.02468840219080448, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.08266056329011917, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3703943192958832, rank=1, decoded_token=None)
For token 4370, log_prob: Logprob(logprob=-0.017463840544223785, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-9.801653861999512, rank=120, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-4.195326805114746, rank=8, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.4466686248779297, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.517330527305603, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.113140106201172, rank=3, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.443703293800354, rank=2, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.23402449488639832, rank=1, decoded_token=None)
For token 837, log_prob: Logprob(logprob=-0.6284106373786926, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.37667617201805115, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.0740572139620781, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.009778810665011406, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.5895971655845642, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-2.43047833442688, rank=5, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.1376230716705322, rank=3, decoded_token=None)
For token 339, log_prob: Logprob(logprob=-0.6972476840019226, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.1368379592895508, rank=2, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.17106032371521, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.014991242438554764, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.19605356454849243, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.600100040435791, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.20332926511764526, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-4.175275802612305, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.4642753601074219, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.02154143527150154, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.20088475942611694, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.002081967191770673, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0003781795676331967, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.056677043437957764, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.308137893676758, rank=4, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.6069552898406982, rank=4, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.774920642375946, rank=1, decoded_token=None)
For token 2646, log_prob: Logprob(logprob=-3.097163200378418, rank=8, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-2.366727113723755, rank=3, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.652055263519287, rank=7, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-2.718801498413086, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.0695536658167839, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-3.1284074783325195, rank=4, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.013708023354411125, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-0.05030599236488342, rank=1, decoded_token=None)
For token 1023, log_prob: Logprob(logprob=-0.0032524564303457737, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.03535380959510803, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.010325347073376179, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00024101213784888387, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.140742689371109, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-5.092126846313477, rank=9, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.4843006134033203, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.11257536709308624, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.3171550929546356, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.00759677030146122, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.02107418328523636, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.09753574430942535, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.4928134083747864, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-3.0057926177978516, rank=5, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.8141931891441345, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.07718711346387863, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-7.487396240234375, rank=28, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.15662676095962524, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.012751000933349133, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.005057043395936489, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.03090181201696396, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.02183726243674755, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0004822045157197863, rank=1, decoded_token=None)
For token 1442, log_prob: Logprob(logprob=-4.839500427246094, rank=6, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.566116213798523, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3449784517288208, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.1413413286209106, rank=1, decoded_token=None)
For token 3940, log_prob: Logprob(logprob=-4.172558307647705, rank=14, decoded_token=None)
For token 449, log_prob: Logprob(logprob=-0.06449252367019653, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.9140709638595581, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.7719259262084961, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.007958251982927322, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-2.8203039169311523, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.6145880222320557, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.5863301753997803, rank=2, decoded_token=None)
For token 1053, log_prob: Logprob(logprob=-2.094866991043091, rank=2, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-3.046118974685669, rank=6, decoded_token=None)
For token 1193, log_prob: Logprob(logprob=-3.4279844760894775, rank=7, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.308468222618103, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.018749739974737167, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-2.9477155208587646, rank=3, decoded_token=None)
For token 433, log_prob: Logprob(logprob=-0.40446826815605164, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.21264755725860596, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.025269512087106705, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0027451948262751102, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.1849918365478516, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.1902220994234085, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.3071374893188477, rank=2, decoded_token=None)
For token 2860, log_prob: Logprob(logprob=-5.8816609382629395, rank=57, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.02797979861497879, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.23590943217277527, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-4.081195831298828, rank=3, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-6.011350631713867, rank=47, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.6415536403656006, rank=9, decoded_token=None)
For token 1514, log_prob: Logprob(logprob=-1.6141451597213745, rank=2, decoded_token=None)
For token 19794, log_prob: Logprob(logprob=-4.327911853790283, rank=6, decoded_token=None)
For token 520, log_prob: Logprob(logprob=-2.610771656036377, rank=4, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.8295858502388, rank=1, decoded_token=None)
For token 6246, log_prob: Logprob(logprob=-5.445433616638184, rank=25, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.8759067058563232, rank=1, decoded_token=None)
For token 2684, log_prob: Logprob(logprob=-3.019108295440674, rank=7, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.6913377642631531, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.022329222410917282, rank=1, decoded_token=None)
For token 7041, log_prob: Logprob(logprob=-3.9607925415039062, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.288790225982666, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.200063943862915, rank=1, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-0.6154614090919495, rank=1, decoded_token=None)
For token 389, log_prob: Logprob(logprob=-2.105520248413086, rank=3, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-1.2467472553253174, rank=2, decoded_token=None)
For token 2128, log_prob: Logprob(logprob=-0.08914763480424881, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.16352039575576782, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-2.8792216777801514, rank=4, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-1.2772589921951294, rank=2, decoded_token=None)
For token 12722, log_prob: Logprob(logprob=-4.80352258682251, rank=9, decoded_token=None)
For token 15100, log_prob: Logprob(logprob=-4.0572991371154785, rank=7, decoded_token=None)
For token 1268, log_prob: Logprob(logprob=-0.9948503971099854, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.8683412075042725, rank=3, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-1.9003151655197144, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.11957751214504242, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.29255211353302, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.01057143323123455, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.7831801772117615, rank=1, decoded_token=None)
For token 4460, log_prob: Logprob(logprob=-3.463230609893799, rank=3, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.9446107149124146, rank=2, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.04526291787624359, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002380991354584694, rank=1, decoded_token=None)
For token 2758, log_prob: Logprob(logprob=-3.3964881896972656, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.38579824566841125, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.9311184883117676, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.38374000787734985, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.3195199966430664, rank=2, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.10298678278923035, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.7452938556671143, rank=2, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.4569380283355713, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.816202163696289, rank=4, decoded_token=None)
For token 1758, log_prob: Logprob(logprob=-0.8483269810676575, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.920579731464386, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.4476555585861206, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0015714927576482296, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00015269544383045286, rank=1, decoded_token=None)
For token 64002, log_prob: Logprob(logprob=-2.5445642471313477, rank=3, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.040661152452230453, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.1308070570230484, rank=1, decoded_token=None)
For token 555, log_prob: Logprob(logprob=-0.035039275884628296, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.00441908510401845, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.013742946088314056, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.09101356565952301, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.06291541457176208, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.23998305201530457, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-0.0345701165497303, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.00949143711477518, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.0618923157453537, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0015372138004750013, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010275312524754554, rank=1, decoded_token=None)
For token 72159, log_prob: Logprob(logprob=-1.416687250137329, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.022464442998170853, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.1311088651418686, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-5.759943962097168, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005024425685405731, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.10427399724721909, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.16913986206054688, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.024288708344101906, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04584870859980583, rank=1, decoded_token=None)
For token 3965, log_prob: Logprob(logprob=-0.16225406527519226, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.09998979419469833, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.008857247419655323, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0020776845049113035, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0003250309091527015, rank=1, decoded_token=None)
For token 94310, log_prob: Logprob(logprob=-0.7316688895225525, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.024832606315612793, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.6226915121078491, rank=1, decoded_token=None)
For token 505, log_prob: Logprob(logprob=-0.10961204022169113, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.010747289285063744, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.05260615423321724, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.02702752687036991, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.012585973367094994, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0407465361058712, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.009129801765084267, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.017733123153448105, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.05732721835374832, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004556629806756973, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0005477358354255557, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.3356648683547974, rank=3, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.2082667499780655, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-1.9418500661849976, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-5.220272541046143, rank=29, decoded_token=None)
For token 31878, log_prob: Logprob(logprob=-1.610248327255249, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.7332974672317505, rank=1, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-8.542618751525879, rank=186, decoded_token=None)
For token 2204, log_prob: Logprob(logprob=-2.599426507949829, rank=2, decoded_token=None)
For token 8146, log_prob: Logprob(logprob=-5.755116939544678, rank=24, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.027865495532751083, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-3.957357883453369, rank=10, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.40048009157180786, rank=1, decoded_token=None)
For token 2435, log_prob: Logprob(logprob=-4.845759868621826, rank=13, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.3862104415893555, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.847692608833313, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-4.27924108505249, rank=17, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-4.734525680541992, rank=13, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.17049723863601685, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-2.0231032371520996, rank=2, decoded_token=None)
For token 1933, log_prob: Logprob(logprob=-0.12822699546813965, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-3.447733163833618, rank=5, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-7.156528472900391, rank=17, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.10994840413331985, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-2.5678606033325195, rank=5, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.8113741874694824, rank=3, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.09289318323135376, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.6233457922935486, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.7501171827316284, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-2.1427054405212402, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-3.4584686756134033, rank=6, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.026147279888391495, rank=1, decoded_token=None)
For token 706, log_prob: Logprob(logprob=-0.34631913900375366, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.6868782043457031, rank=2, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.2303718775510788, rank=1, decoded_token=None)
For token 649, log_prob: Logprob(logprob=-2.7231407165527344, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.054041046649217606, rank=1, decoded_token=None)
For token 1766, log_prob: Logprob(logprob=-2.5916926860809326, rank=4, decoded_token=None)
For token 1701, log_prob: Logprob(logprob=-2.2964775562286377, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.42406484484672546, rank=1, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-3.539501428604126, rank=7, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-4.590996742248535, rank=15, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.18096934258937836, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.9475879669189453, rank=2, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-0.4854806661605835, rank=1, decoded_token=None)
For token 25800, log_prob: Logprob(logprob=-3.8487393856048584, rank=9, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.1915293186903, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.07257572561502457, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-2.225902557373047, rank=3, decoded_token=None)
For token 2650, log_prob: Logprob(logprob=-2.9975926876068115, rank=3, decoded_token=None)
For token 1690, log_prob: Logprob(logprob=-0.08352108299732208, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.6937007308006287, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.15021462738513947, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-0.1846829354763031, rank=1, decoded_token=None)
For token 1587, log_prob: Logprob(logprob=-0.9513101577758789, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.025589339435100555, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.003244970692321658, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-0.10589171200990677, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.1511233001947403, rank=1, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.037622109055519104, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.09561489522457123, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.07025675475597382, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002441641641780734, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021361514925956726, rank=1, decoded_token=None)
For token 25541, log_prob: Logprob(logprob=-11.017716407775879, rank=927, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.7192279100418091, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0011468507582321763, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013636612857226282, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.001517931348644197, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-4.038790702819824, rank=7, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.023376699537038803, rank=1, decoded_token=None)
For token 21129, log_prob: Logprob(logprob=-5.540423393249512, rank=45, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.008513230830430984, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.00035577642847783864, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001481661747675389, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0015720878727734089, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.26859188079834, rank=2, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.006552401464432478, rank=1, decoded_token=None)
For token 24599, log_prob: Logprob(logprob=-6.160186767578125, rank=81, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.004695461131632328, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.000506511190906167, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002585315378382802, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0038100522942841053, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-2.5259666442871094, rank=3, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.001276512397453189, rank=1, decoded_token=None)
For token 5154, log_prob: Logprob(logprob=-5.772514343261719, rank=71, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.5313923954963684, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004962034057825804, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0004538459761533886, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0903221368789673, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.23396459221839905, rank=1, decoded_token=None)
For token 23956, log_prob: Logprob(logprob=-3.7109880447387695, rank=5, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-2.3338446617126465, rank=3, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-1.2901480197906494, rank=1, decoded_token=None)
For token 13890, log_prob: Logprob(logprob=-0.29379332065582275, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.004455045331269503, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5699459910392761, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.582611322402954, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-3.8140597343444824, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.22526046633720398, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-3.268810987472534, rank=8, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.9523714780807495, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.02629231847822666, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002087677363306284, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-4.041932106018066, rank=2, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3275642395019531, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7747173309326172, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01943170465528965, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.8843350410461426, rank=6, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.05427434667944908, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7900131344795227, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-1.6092212200164795, rank=2, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-4.122803688049316, rank=6, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.053970567882061005, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006345955654978752, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.5473098754882812, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.06624624133110046, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0031123552471399307, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00019047829846385866, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.5430195927619934, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3349359631538391, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.17014674842357635, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.11895304173231125, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2283027172088623, rank=4, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.21531498432159424, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-4.436285972595215, rank=3, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.43919575214385986, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.5670137405395508, rank=3, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.013229803182184696, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.020044738426804543, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-1.059314250946045, rank=1, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.14613543450832367, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0012510338565334678, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013481661153491586, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.36141881346702576, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.170744389295578, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.15453915297985077, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0653778612613678, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.4421030282974243, rank=3, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.09968782961368561, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-0.7550356984138489, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.3567902743816376, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5658089518547058, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.03483690321445465, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.05940350890159607, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-1.1212691068649292, rank=2, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.013908135704696178, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0008878341759555042, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001971527235582471, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.19026270508766174, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.07903989404439926, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.1152166947722435, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.040283940732479095, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-0.6784765124320984, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.02332417666912079, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-4.38916015625, rank=4, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.059930216521024704, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.9063451290130615, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.02287174016237259, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.002457695547491312, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-5.066433429718018, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.015977919101715088, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004998686723411083, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0003066784702241421, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.108638048171997, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.18586991727352142, rank=1, decoded_token=None)
For token 11874, log_prob: Logprob(logprob=-5.224460124969482, rank=13, decoded_token=None)
For token 4459, log_prob: Logprob(logprob=-7.009128570556641, rank=124, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.6522552967071533, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.379534363746643, rank=2, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.5606241226196289, rank=1, decoded_token=None)
For token 3325, log_prob: Logprob(logprob=-9.22218132019043, rank=39, decoded_token=None)
For token 4279, log_prob: Logprob(logprob=-0.061864301562309265, rank=1, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-0.45201748609542847, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.17637768387794495, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.023118602111935616, rank=1, decoded_token=None)
For token 1399, log_prob: Logprob(logprob=-3.963719367980957, rank=14, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.09445195645093918, rank=1, decoded_token=None)
For token 9062, log_prob: Logprob(logprob=-5.071889877319336, rank=12, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.6336301565170288, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.3426891267299652, rank=1, decoded_token=None)
For token 2753, log_prob: Logprob(logprob=-2.6435422897338867, rank=3, decoded_token=None)
For token 1109, log_prob: Logprob(logprob=-0.004161983262747526, rank=1, decoded_token=None)
For token 477, log_prob: Logprob(logprob=-2.879474401473999, rank=3, decoded_token=None)
For token 6273, log_prob: Logprob(logprob=-0.013294622302055359, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.0058578010648489, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.09096752852201462, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-5.163353443145752, rank=29, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.1529577076435089, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-1.5697429180145264, rank=2, decoded_token=None)
For token 12474, log_prob: Logprob(logprob=-2.645151138305664, rank=3, decoded_token=None)
For token 4279, log_prob: Logprob(logprob=-0.6883967518806458, rank=1, decoded_token=None)
For token 8331, log_prob: Logprob(logprob=-0.40138059854507446, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.16735176742076874, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.33446672558784485, rank=1, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-0.18579617142677307, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.2953820526599884, rank=1, decoded_token=None)
For token 285, log_prob: Logprob(logprob=-9.538186073303223, rank=41, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.9321149587631226, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.0747475624084473, rank=3, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.17374888062477112, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-1.1434378623962402, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-2.005824565887451, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.07729481160640717, rank=1, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-0.310687780380249, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.7019672989845276, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.0899902880191803, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.014821651391685009, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0012823462020605803, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.03980715200304985, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.936407446861267, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.24611333012580872, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005055620335042477, rank=1, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.329893112182617, rank=3, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.023442961275577545, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0009132028790190816, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-7.390703103737906e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.004810308571904898, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.1714460849761963, rank=7, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.02755010686814785, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0016718233237043023, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-1.2207993268966675, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0012977044098079205, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.00026008085114881396, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-6.186770770000294e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005501368548721075, rank=1, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.967453718185425, rank=8, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.003204688895493746, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0013855629367753863, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-0.7422707080841064, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0011626873165369034, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.00032074074260890484, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00017677174764685333, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.015494913794100285, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-2.0872957706451416, rank=3, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.002190573140978813, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.001105650793761015, rank=1, decoded_token=None)
For token 868, log_prob: Logprob(logprob=-2.141770362854004, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.02330053597688675, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.002792746527120471, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0005763299996033311, rank=1, decoded_token=None)
For token 362, log_prob: Logprob(logprob=-1.03548264503479, rank=1, decoded_token=None)
Answer:  (-1.03548264503479, True)
tokens length:  528
output logprobs length:  528
ctxlen:  527
For token 791, log_prob: Logprob(logprob=-3.588294506072998, rank=4, decoded_token=None)
For token 2768, log_prob: Logprob(logprob=-4.304756164550781, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-2.969231605529785, rank=3, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-9.316919326782227, rank=700, decoded_token=None)
For token 5873, log_prob: Logprob(logprob=-1.1169946193695068, rank=1, decoded_token=None)
For token 4860, log_prob: Logprob(logprob=-0.15302471816539764, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.3894879817962646, rank=9, decoded_token=None)
For token 4291, log_prob: Logprob(logprob=-3.562437057495117, rank=2, decoded_token=None)
For token 11503, log_prob: Logprob(logprob=-0.9702798128128052, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.4542173743247986, rank=1, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.899801015853882, rank=4, decoded_token=None)
For token 36256, log_prob: Logprob(logprob=-8.734892845153809, rank=631, decoded_token=None)
For token 38696, log_prob: Logprob(logprob=-3.7674813270568848, rank=8, decoded_token=None)
For token 382, log_prob: Logprob(logprob=-5.597833156585693, rank=19, decoded_token=None)
For token 791, log_prob: Logprob(logprob=-3.544769287109375, rank=4, decoded_token=None)
For token 7187, log_prob: Logprob(logprob=-7.414687633514404, rank=167, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.11540365219116211, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.7252726554870605, rank=2, decoded_token=None)
For token 3363, log_prob: Logprob(logprob=-1.8480002880096436, rank=1, decoded_token=None)
For token 1405, log_prob: Logprob(logprob=-5.9969987869262695, rank=13, decoded_token=None)
For token 33126, log_prob: Logprob(logprob=-9.10548210144043, rank=325, decoded_token=None)
For token 574, log_prob: Logprob(logprob=-5.349006652832031, rank=8, decoded_token=None)
For token 9405, log_prob: Logprob(logprob=-0.40580296516418457, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.5615864396095276, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.7438945174217224, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-7.263688087463379, rank=140, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.7120769619941711, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-8.756370544433594, rank=570, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.46257808804512024, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-4.10749626159668, rank=8, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.29674193263053894, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.1783972829580307, rank=1, decoded_token=None)
For token 907, log_prob: Logprob(logprob=-5.722339153289795, rank=27, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.03685179725289345, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.9906996488571167, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.191212177276611, rank=12, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.4952895641326904, rank=3, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-6.860769271850586, rank=33, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.4738154709339142, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.81992244720459, rank=9, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.851509690284729, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-0.4733523726463318, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.3776562213897705, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-0.04871302843093872, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-3.7120940685272217, rank=5, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.0033669471740723, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.2580585777759552, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.20247121155261993, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.971443772315979, rank=1, decoded_token=None)
For token 9214, log_prob: Logprob(logprob=-7.329587459564209, rank=44, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.33627015352249146, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.003795088967308402, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0006998711614869535, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021235832944512367, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.1533547639846802, rank=1, decoded_token=None)
For token 11758, log_prob: Logprob(logprob=-1.9098384380340576, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.007843528874218464, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0015495923580601811, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0005785936955362558, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006402693688869476, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.09296748787164688, rank=1, decoded_token=None)
For token 22781, log_prob: Logprob(logprob=-0.6998193264007568, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0074472189880907536, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0022168601863086224, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0005930095794610679, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.019136684015393257, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.05925050005316734, rank=1, decoded_token=None)
For token 6305, log_prob: Logprob(logprob=-0.6276966333389282, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.2591150999069214, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.909871518611908, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.060657717287540436, rank=1, decoded_token=None)
For token 362, log_prob: Logprob(logprob=-1.2651628255844116, rank=2, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-1.236945629119873, rank=2, decoded_token=None)
For token 43819, log_prob: Logprob(logprob=-12.281052589416504, rank=2698, decoded_token=None)
For token 21475, log_prob: Logprob(logprob=-0.7285953164100647, rank=1, decoded_token=None)
For token 1511, log_prob: Logprob(logprob=-6.596356391906738, rank=50, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.3166232109069824, rank=3, decoded_token=None)
For token 6037, log_prob: Logprob(logprob=-6.134354591369629, rank=53, decoded_token=None)
For token 330, log_prob: Logprob(logprob=-3.653575897216797, rank=9, decoded_token=None)
For token 2261, log_prob: Logprob(logprob=-4.241303443908691, rank=15, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.6807642579078674, rank=1, decoded_token=None)
For token 806, log_prob: Logprob(logprob=-4.885201930999756, rank=18, decoded_token=None)
For token 1, log_prob: Logprob(logprob=-1.440927505493164, rank=2, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.5772078633308411, rank=1, decoded_token=None)
For token 1893, log_prob: Logprob(logprob=-6.191239356994629, rank=44, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-1.369935393333435, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.322933554649353, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-6.340333938598633, rank=23, decoded_token=None)
For token 6982, log_prob: Logprob(logprob=-3.008331298828125, rank=5, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-0.696544349193573, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.47080329060554504, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.408674716949463, rank=9, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-4.432986259460449, rank=13, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.9232057332992554, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.13041946291923523, rank=1, decoded_token=None)
For token 1691, log_prob: Logprob(logprob=-0.8227146863937378, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.007162133697420359, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.016214758157730103, rank=1, decoded_token=None)
For token 843, log_prob: Logprob(logprob=-0.13016277551651, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.03512261062860489, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.20052661001682281, rank=1, decoded_token=None)
For token 3391, log_prob: Logprob(logprob=-0.02468840219080448, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.08266056329011917, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3703943192958832, rank=1, decoded_token=None)
For token 4370, log_prob: Logprob(logprob=-0.017463840544223785, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-9.801653861999512, rank=120, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-4.195326805114746, rank=8, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.4466686248779297, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.517330527305603, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.113140106201172, rank=3, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.443703293800354, rank=2, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.23402449488639832, rank=1, decoded_token=None)
For token 837, log_prob: Logprob(logprob=-0.6284106373786926, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.37667617201805115, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.0740572139620781, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.009778810665011406, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.5895971655845642, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-2.43047833442688, rank=5, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.1376230716705322, rank=3, decoded_token=None)
For token 339, log_prob: Logprob(logprob=-0.6972476840019226, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.1368379592895508, rank=2, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.17106032371521, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.014991242438554764, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.19605356454849243, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.600100040435791, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.20332926511764526, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-4.175275802612305, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.4642753601074219, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.02154143527150154, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.20088475942611694, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.002081967191770673, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0003781795676331967, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.056677043437957764, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.308137893676758, rank=4, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.6069552898406982, rank=4, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.774920642375946, rank=1, decoded_token=None)
For token 2646, log_prob: Logprob(logprob=-3.097163200378418, rank=8, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-2.366727113723755, rank=3, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.652055263519287, rank=7, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-2.718801498413086, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.0695536658167839, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-3.1284074783325195, rank=4, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.013708023354411125, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-0.05030599236488342, rank=1, decoded_token=None)
For token 1023, log_prob: Logprob(logprob=-0.0032524564303457737, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.03535380959510803, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.010325347073376179, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00024101213784888387, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.140742689371109, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-5.092126846313477, rank=9, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.4843006134033203, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.11257536709308624, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.3171550929546356, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.00759677030146122, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.02107418328523636, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.09753574430942535, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.4928134083747864, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-3.0057926177978516, rank=5, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.8141931891441345, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.07718711346387863, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-7.487396240234375, rank=28, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.15662676095962524, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.012751000933349133, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.005057043395936489, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.03090181201696396, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.02183726243674755, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0004822045157197863, rank=1, decoded_token=None)
For token 1442, log_prob: Logprob(logprob=-4.839500427246094, rank=6, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.566116213798523, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3449784517288208, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.1413413286209106, rank=1, decoded_token=None)
For token 3940, log_prob: Logprob(logprob=-4.172558307647705, rank=14, decoded_token=None)
For token 449, log_prob: Logprob(logprob=-0.06449252367019653, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.9140709638595581, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.7719259262084961, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.007958251982927322, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-2.8203039169311523, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.6145880222320557, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.5863301753997803, rank=2, decoded_token=None)
For token 1053, log_prob: Logprob(logprob=-2.094866991043091, rank=2, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-3.046118974685669, rank=6, decoded_token=None)
For token 1193, log_prob: Logprob(logprob=-3.4279844760894775, rank=7, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.308468222618103, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.018749739974737167, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-2.9477155208587646, rank=3, decoded_token=None)
For token 433, log_prob: Logprob(logprob=-0.40446826815605164, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.21264755725860596, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.025269512087106705, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0027451948262751102, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.1849918365478516, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.1902220994234085, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.3071374893188477, rank=2, decoded_token=None)
For token 2860, log_prob: Logprob(logprob=-5.8816609382629395, rank=57, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.02797979861497879, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.23590943217277527, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-4.081195831298828, rank=3, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-6.011350631713867, rank=47, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.6415536403656006, rank=9, decoded_token=None)
For token 1514, log_prob: Logprob(logprob=-1.6141451597213745, rank=2, decoded_token=None)
For token 19794, log_prob: Logprob(logprob=-4.327911853790283, rank=6, decoded_token=None)
For token 520, log_prob: Logprob(logprob=-2.610771656036377, rank=4, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.8295858502388, rank=1, decoded_token=None)
For token 6246, log_prob: Logprob(logprob=-5.445433616638184, rank=25, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.8759067058563232, rank=1, decoded_token=None)
For token 2684, log_prob: Logprob(logprob=-3.019108295440674, rank=7, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.6913377642631531, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.022329222410917282, rank=1, decoded_token=None)
For token 7041, log_prob: Logprob(logprob=-3.9607925415039062, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.288790225982666, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.200063943862915, rank=1, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-0.6154614090919495, rank=1, decoded_token=None)
For token 389, log_prob: Logprob(logprob=-2.105520248413086, rank=3, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-1.2467472553253174, rank=2, decoded_token=None)
For token 2128, log_prob: Logprob(logprob=-0.08914763480424881, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.16352039575576782, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-2.8792216777801514, rank=4, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-1.2772589921951294, rank=2, decoded_token=None)
For token 12722, log_prob: Logprob(logprob=-4.80352258682251, rank=9, decoded_token=None)
For token 15100, log_prob: Logprob(logprob=-4.0572991371154785, rank=7, decoded_token=None)
For token 1268, log_prob: Logprob(logprob=-0.9948503971099854, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.8683412075042725, rank=3, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-1.9003151655197144, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.11957751214504242, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.29255211353302, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.01057143323123455, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.7831801772117615, rank=1, decoded_token=None)
For token 4460, log_prob: Logprob(logprob=-3.463230609893799, rank=3, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.9446107149124146, rank=2, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.04526291787624359, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002380991354584694, rank=1, decoded_token=None)
For token 2758, log_prob: Logprob(logprob=-3.3964881896972656, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.38579824566841125, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.9311184883117676, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.38374000787734985, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.3195199966430664, rank=2, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.10298678278923035, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.7452938556671143, rank=2, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.4569380283355713, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.816202163696289, rank=4, decoded_token=None)
For token 1758, log_prob: Logprob(logprob=-0.8483269810676575, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.920579731464386, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.4476555585861206, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0015714927576482296, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00015269544383045286, rank=1, decoded_token=None)
For token 64002, log_prob: Logprob(logprob=-2.5445642471313477, rank=3, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.040661152452230453, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.1308070570230484, rank=1, decoded_token=None)
For token 555, log_prob: Logprob(logprob=-0.035039275884628296, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.00441908510401845, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.013742946088314056, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.09101356565952301, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.06291541457176208, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.23998305201530457, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-0.0345701165497303, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.00949143711477518, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.0618923157453537, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0015372138004750013, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010275312524754554, rank=1, decoded_token=None)
For token 72159, log_prob: Logprob(logprob=-1.416687250137329, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.022464442998170853, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.1311088651418686, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-5.759943962097168, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005024425685405731, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.10427399724721909, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.16913986206054688, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.024288708344101906, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04584870859980583, rank=1, decoded_token=None)
For token 3965, log_prob: Logprob(logprob=-0.16225406527519226, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.09998979419469833, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.008857247419655323, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0020776845049113035, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0003250309091527015, rank=1, decoded_token=None)
For token 94310, log_prob: Logprob(logprob=-0.7316688895225525, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.024832606315612793, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.6226915121078491, rank=1, decoded_token=None)
For token 505, log_prob: Logprob(logprob=-0.10961204022169113, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.010747289285063744, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.05260615423321724, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.02702752687036991, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.012585973367094994, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0407465361058712, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.009129801765084267, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.017733123153448105, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.05732721835374832, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004556629806756973, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0005477358354255557, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.3356648683547974, rank=3, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.2082667499780655, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-1.9418500661849976, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-5.220272541046143, rank=29, decoded_token=None)
For token 31878, log_prob: Logprob(logprob=-1.610248327255249, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.7332974672317505, rank=1, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-8.542618751525879, rank=186, decoded_token=None)
For token 2204, log_prob: Logprob(logprob=-2.599426507949829, rank=2, decoded_token=None)
For token 8146, log_prob: Logprob(logprob=-5.755116939544678, rank=24, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.027865495532751083, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-3.957357883453369, rank=10, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.40048009157180786, rank=1, decoded_token=None)
For token 2435, log_prob: Logprob(logprob=-4.845759868621826, rank=13, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.3862104415893555, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.847692608833313, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-4.27924108505249, rank=17, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-4.734525680541992, rank=13, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.17049723863601685, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-2.0231032371520996, rank=2, decoded_token=None)
For token 1933, log_prob: Logprob(logprob=-0.12822699546813965, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-3.447733163833618, rank=5, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-7.156528472900391, rank=17, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.10994840413331985, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-2.5678606033325195, rank=5, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.8113741874694824, rank=3, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.09289318323135376, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.6233457922935486, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.7501171827316284, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-2.1427054405212402, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-3.4584686756134033, rank=6, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.026147279888391495, rank=1, decoded_token=None)
For token 706, log_prob: Logprob(logprob=-0.34631913900375366, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.6868782043457031, rank=2, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.2303718775510788, rank=1, decoded_token=None)
For token 649, log_prob: Logprob(logprob=-2.7231407165527344, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.054041046649217606, rank=1, decoded_token=None)
For token 1766, log_prob: Logprob(logprob=-2.5916926860809326, rank=4, decoded_token=None)
For token 1701, log_prob: Logprob(logprob=-2.2964775562286377, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.42406484484672546, rank=1, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-3.539501428604126, rank=7, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-4.590996742248535, rank=15, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.18096934258937836, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.9475879669189453, rank=2, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-0.4854806661605835, rank=1, decoded_token=None)
For token 25800, log_prob: Logprob(logprob=-3.8487393856048584, rank=9, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.1915293186903, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.07257572561502457, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-2.225902557373047, rank=3, decoded_token=None)
For token 2650, log_prob: Logprob(logprob=-2.9975926876068115, rank=3, decoded_token=None)
For token 1690, log_prob: Logprob(logprob=-0.08352108299732208, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.6937007308006287, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.15021462738513947, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-0.1846829354763031, rank=1, decoded_token=None)
For token 1587, log_prob: Logprob(logprob=-0.9513101577758789, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.025589339435100555, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.003244970692321658, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-0.10589171200990677, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.1511233001947403, rank=1, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.037622109055519104, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.09561489522457123, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.07025675475597382, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002441641641780734, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021361514925956726, rank=1, decoded_token=None)
For token 25541, log_prob: Logprob(logprob=-11.017716407775879, rank=927, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.7192279100418091, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0011468507582321763, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013636612857226282, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.001517931348644197, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-4.038790702819824, rank=7, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.023376699537038803, rank=1, decoded_token=None)
For token 21129, log_prob: Logprob(logprob=-5.540423393249512, rank=45, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.008513230830430984, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.00035577642847783864, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001481661747675389, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0015720878727734089, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.26859188079834, rank=2, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.006552401464432478, rank=1, decoded_token=None)
For token 24599, log_prob: Logprob(logprob=-6.160186767578125, rank=81, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.004695461131632328, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.000506511190906167, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002585315378382802, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0038100522942841053, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-2.5259666442871094, rank=3, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.001276512397453189, rank=1, decoded_token=None)
For token 5154, log_prob: Logprob(logprob=-5.772514343261719, rank=71, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.5313923954963684, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004962034057825804, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0004538459761533886, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0903221368789673, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.23396459221839905, rank=1, decoded_token=None)
For token 23956, log_prob: Logprob(logprob=-3.7109880447387695, rank=5, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-2.3338446617126465, rank=3, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-1.2901480197906494, rank=1, decoded_token=None)
For token 13890, log_prob: Logprob(logprob=-0.29379332065582275, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.004455045331269503, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5699459910392761, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.582611322402954, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-3.8140597343444824, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.22526046633720398, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-3.268810987472534, rank=8, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.9523714780807495, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.02629231847822666, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002087677363306284, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-4.041932106018066, rank=2, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3275642395019531, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7747173309326172, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01943170465528965, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.8843350410461426, rank=6, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.05427434667944908, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7900131344795227, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-1.6092212200164795, rank=2, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-4.122803688049316, rank=6, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.053970567882061005, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006345955654978752, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.5473098754882812, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.06624624133110046, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0031123552471399307, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00019047829846385866, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.5430195927619934, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3349359631538391, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.17014674842357635, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.11895304173231125, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2283027172088623, rank=4, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.21531498432159424, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-4.436285972595215, rank=3, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.43919575214385986, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.5670137405395508, rank=3, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.013229803182184696, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.020044738426804543, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-1.059314250946045, rank=1, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.14613543450832367, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0012510338565334678, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013481661153491586, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.36141881346702576, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.170744389295578, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.15453915297985077, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0653778612613678, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.4421030282974243, rank=3, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.09968782961368561, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-0.7550356984138489, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.3567902743816376, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5658089518547058, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.03483690321445465, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.05940350890159607, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-1.1212691068649292, rank=2, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.013908135704696178, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0008878341759555042, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001971527235582471, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.19026270508766174, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.07903989404439926, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.1152166947722435, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.040283940732479095, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-0.6784765124320984, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.02332417666912079, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-4.38916015625, rank=4, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.059930216521024704, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.9063451290130615, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.02287174016237259, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.002457695547491312, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-5.066433429718018, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.015977919101715088, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004998686723411083, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0003066784702241421, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.108638048171997, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.18586991727352142, rank=1, decoded_token=None)
For token 11874, log_prob: Logprob(logprob=-5.224460124969482, rank=13, decoded_token=None)
For token 4459, log_prob: Logprob(logprob=-7.009128570556641, rank=124, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.6522552967071533, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.379534363746643, rank=2, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.5606241226196289, rank=1, decoded_token=None)
For token 3325, log_prob: Logprob(logprob=-9.22218132019043, rank=39, decoded_token=None)
For token 4279, log_prob: Logprob(logprob=-0.061864301562309265, rank=1, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-0.45201748609542847, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.17637768387794495, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.023118602111935616, rank=1, decoded_token=None)
For token 1399, log_prob: Logprob(logprob=-3.963719367980957, rank=14, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.09445195645093918, rank=1, decoded_token=None)
For token 9062, log_prob: Logprob(logprob=-5.071889877319336, rank=12, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.6336301565170288, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.3426891267299652, rank=1, decoded_token=None)
For token 2753, log_prob: Logprob(logprob=-2.6435422897338867, rank=3, decoded_token=None)
For token 1109, log_prob: Logprob(logprob=-0.004161983262747526, rank=1, decoded_token=None)
For token 477, log_prob: Logprob(logprob=-2.879474401473999, rank=3, decoded_token=None)
For token 6273, log_prob: Logprob(logprob=-0.013294622302055359, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.0058578010648489, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.09096752852201462, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-5.163353443145752, rank=29, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.1529577076435089, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-1.5697429180145264, rank=2, decoded_token=None)
For token 12474, log_prob: Logprob(logprob=-2.645151138305664, rank=3, decoded_token=None)
For token 4279, log_prob: Logprob(logprob=-0.6883967518806458, rank=1, decoded_token=None)
For token 8331, log_prob: Logprob(logprob=-0.40138059854507446, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.16735176742076874, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.33446672558784485, rank=1, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-0.18579617142677307, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.2953820526599884, rank=1, decoded_token=None)
For token 285, log_prob: Logprob(logprob=-9.538186073303223, rank=41, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.9321149587631226, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.0747475624084473, rank=3, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.17374888062477112, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-1.1434378623962402, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-2.005824565887451, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.07729481160640717, rank=1, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-0.310687780380249, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.7019672989845276, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.0899902880191803, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.014821651391685009, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0012823462020605803, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.03980715200304985, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.936407446861267, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.24611333012580872, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005055620335042477, rank=1, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.329893112182617, rank=3, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.023442961275577545, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0009132028790190816, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-7.390703103737906e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.004810308571904898, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.1714460849761963, rank=7, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.02755010686814785, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0016718233237043023, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-1.2207993268966675, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0012977044098079205, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.00026008085114881396, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-6.186770770000294e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005501368548721075, rank=1, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.967453718185425, rank=8, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.003204688895493746, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0013855629367753863, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-0.7422707080841064, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0011626873165369034, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.00032074074260890484, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00017677174764685333, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.015494913794100285, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-2.0872957706451416, rank=3, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.002190573140978813, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.001105650793761015, rank=1, decoded_token=None)
For token 868, log_prob: Logprob(logprob=-2.141770362854004, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.02330053597688675, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.002792746527120471, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0005763299996033311, rank=1, decoded_token=None)
For token 423, log_prob: Logprob(logprob=-2.16048264503479, rank=4, decoded_token=None)
Answer:  (-2.16048264503479, False)
tokens length:  528
output logprobs length:  528
ctxlen:  527
For token 791, log_prob: Logprob(logprob=-3.588294506072998, rank=4, decoded_token=None)
For token 2768, log_prob: Logprob(logprob=-4.304756164550781, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-2.969231605529785, rank=3, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-9.316919326782227, rank=700, decoded_token=None)
For token 5873, log_prob: Logprob(logprob=-1.1169946193695068, rank=1, decoded_token=None)
For token 4860, log_prob: Logprob(logprob=-0.15302471816539764, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.3894879817962646, rank=9, decoded_token=None)
For token 4291, log_prob: Logprob(logprob=-3.562437057495117, rank=2, decoded_token=None)
For token 11503, log_prob: Logprob(logprob=-0.9702798128128052, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.4542173743247986, rank=1, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.899801015853882, rank=4, decoded_token=None)
For token 36256, log_prob: Logprob(logprob=-8.734892845153809, rank=631, decoded_token=None)
For token 38696, log_prob: Logprob(logprob=-3.7674813270568848, rank=8, decoded_token=None)
For token 382, log_prob: Logprob(logprob=-5.597833156585693, rank=19, decoded_token=None)
For token 791, log_prob: Logprob(logprob=-3.544769287109375, rank=4, decoded_token=None)
For token 7187, log_prob: Logprob(logprob=-7.414687633514404, rank=167, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.11540365219116211, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.7252726554870605, rank=2, decoded_token=None)
For token 3363, log_prob: Logprob(logprob=-1.8480002880096436, rank=1, decoded_token=None)
For token 1405, log_prob: Logprob(logprob=-5.9969987869262695, rank=13, decoded_token=None)
For token 33126, log_prob: Logprob(logprob=-9.10548210144043, rank=325, decoded_token=None)
For token 574, log_prob: Logprob(logprob=-5.349006652832031, rank=8, decoded_token=None)
For token 9405, log_prob: Logprob(logprob=-0.40580296516418457, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.5615864396095276, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.7438945174217224, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-7.263688087463379, rank=140, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.7120769619941711, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-8.756370544433594, rank=570, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.46257808804512024, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-4.10749626159668, rank=8, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.29674193263053894, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.1783972829580307, rank=1, decoded_token=None)
For token 907, log_prob: Logprob(logprob=-5.722339153289795, rank=27, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.03685179725289345, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.9906996488571167, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.191212177276611, rank=12, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.4952895641326904, rank=3, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-6.860769271850586, rank=33, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.4738154709339142, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.81992244720459, rank=9, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.851509690284729, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-0.4733523726463318, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.3776562213897705, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-0.04871302843093872, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-3.7120940685272217, rank=5, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.0033669471740723, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.2580585777759552, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.20247121155261993, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.971443772315979, rank=1, decoded_token=None)
For token 9214, log_prob: Logprob(logprob=-7.329587459564209, rank=44, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.33627015352249146, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.003795088967308402, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0006998711614869535, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021235832944512367, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.1533547639846802, rank=1, decoded_token=None)
For token 11758, log_prob: Logprob(logprob=-1.9098384380340576, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.007843528874218464, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0015495923580601811, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0005785936955362558, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006402693688869476, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.09296748787164688, rank=1, decoded_token=None)
For token 22781, log_prob: Logprob(logprob=-0.6998193264007568, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0074472189880907536, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0022168601863086224, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0005930095794610679, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.019136684015393257, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.05925050005316734, rank=1, decoded_token=None)
For token 6305, log_prob: Logprob(logprob=-0.6276966333389282, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.2591150999069214, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.909871518611908, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.060657717287540436, rank=1, decoded_token=None)
For token 362, log_prob: Logprob(logprob=-1.2651628255844116, rank=2, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-1.236945629119873, rank=2, decoded_token=None)
For token 43819, log_prob: Logprob(logprob=-12.281052589416504, rank=2698, decoded_token=None)
For token 21475, log_prob: Logprob(logprob=-0.7285953164100647, rank=1, decoded_token=None)
For token 1511, log_prob: Logprob(logprob=-6.596356391906738, rank=50, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.3166232109069824, rank=3, decoded_token=None)
For token 6037, log_prob: Logprob(logprob=-6.134354591369629, rank=53, decoded_token=None)
For token 330, log_prob: Logprob(logprob=-3.653575897216797, rank=9, decoded_token=None)
For token 2261, log_prob: Logprob(logprob=-4.241303443908691, rank=15, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.6807642579078674, rank=1, decoded_token=None)
For token 806, log_prob: Logprob(logprob=-4.885201930999756, rank=18, decoded_token=None)
For token 1, log_prob: Logprob(logprob=-1.440927505493164, rank=2, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.5772078633308411, rank=1, decoded_token=None)
For token 1893, log_prob: Logprob(logprob=-6.191239356994629, rank=44, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-1.369935393333435, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.322933554649353, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-6.340333938598633, rank=23, decoded_token=None)
For token 6982, log_prob: Logprob(logprob=-3.008331298828125, rank=5, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-0.696544349193573, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.47080329060554504, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.408674716949463, rank=9, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-4.432986259460449, rank=13, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.9232057332992554, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.13041946291923523, rank=1, decoded_token=None)
For token 1691, log_prob: Logprob(logprob=-0.8227146863937378, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.007162133697420359, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.016214758157730103, rank=1, decoded_token=None)
For token 843, log_prob: Logprob(logprob=-0.13016277551651, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.03512261062860489, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.20052661001682281, rank=1, decoded_token=None)
For token 3391, log_prob: Logprob(logprob=-0.02468840219080448, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.08266056329011917, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3703943192958832, rank=1, decoded_token=None)
For token 4370, log_prob: Logprob(logprob=-0.017463840544223785, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-9.801653861999512, rank=120, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-4.195326805114746, rank=8, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.4466686248779297, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.517330527305603, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.113140106201172, rank=3, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.443703293800354, rank=2, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.23402449488639832, rank=1, decoded_token=None)
For token 837, log_prob: Logprob(logprob=-0.6284106373786926, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.37667617201805115, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.0740572139620781, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.009778810665011406, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.5895971655845642, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-2.43047833442688, rank=5, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.1376230716705322, rank=3, decoded_token=None)
For token 339, log_prob: Logprob(logprob=-0.6972476840019226, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.1368379592895508, rank=2, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.17106032371521, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.014991242438554764, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.19605356454849243, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.600100040435791, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.20332926511764526, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-4.175275802612305, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.4642753601074219, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.02154143527150154, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.20088475942611694, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.002081967191770673, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0003781795676331967, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.056677043437957764, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.308137893676758, rank=4, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.6069552898406982, rank=4, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.774920642375946, rank=1, decoded_token=None)
For token 2646, log_prob: Logprob(logprob=-3.097163200378418, rank=8, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-2.366727113723755, rank=3, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.652055263519287, rank=7, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-2.718801498413086, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.0695536658167839, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-3.1284074783325195, rank=4, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.013708023354411125, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-0.05030599236488342, rank=1, decoded_token=None)
For token 1023, log_prob: Logprob(logprob=-0.0032524564303457737, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.03535380959510803, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.010325347073376179, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00024101213784888387, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.140742689371109, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-5.092126846313477, rank=9, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.4843006134033203, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.11257536709308624, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.3171550929546356, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.00759677030146122, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.02107418328523636, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.09753574430942535, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.4928134083747864, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-3.0057926177978516, rank=5, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.8141931891441345, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.07718711346387863, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-7.487396240234375, rank=28, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.15662676095962524, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.012751000933349133, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.005057043395936489, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.03090181201696396, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.02183726243674755, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0004822045157197863, rank=1, decoded_token=None)
For token 1442, log_prob: Logprob(logprob=-4.839500427246094, rank=6, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.566116213798523, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3449784517288208, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.1413413286209106, rank=1, decoded_token=None)
For token 3940, log_prob: Logprob(logprob=-4.172558307647705, rank=14, decoded_token=None)
For token 449, log_prob: Logprob(logprob=-0.06449252367019653, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.9140709638595581, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.7719259262084961, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.007958251982927322, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-2.8203039169311523, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.6145880222320557, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.5863301753997803, rank=2, decoded_token=None)
For token 1053, log_prob: Logprob(logprob=-2.094866991043091, rank=2, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-3.046118974685669, rank=6, decoded_token=None)
For token 1193, log_prob: Logprob(logprob=-3.4279844760894775, rank=7, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.308468222618103, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.018749739974737167, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-2.9477155208587646, rank=3, decoded_token=None)
For token 433, log_prob: Logprob(logprob=-0.40446826815605164, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.21264755725860596, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.025269512087106705, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0027451948262751102, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.1849918365478516, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.1902220994234085, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.3071374893188477, rank=2, decoded_token=None)
For token 2860, log_prob: Logprob(logprob=-5.8816609382629395, rank=57, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.02797979861497879, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.23590943217277527, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-4.081195831298828, rank=3, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-6.011350631713867, rank=47, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.6415536403656006, rank=9, decoded_token=None)
For token 1514, log_prob: Logprob(logprob=-1.6141451597213745, rank=2, decoded_token=None)
For token 19794, log_prob: Logprob(logprob=-4.327911853790283, rank=6, decoded_token=None)
For token 520, log_prob: Logprob(logprob=-2.610771656036377, rank=4, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.8295858502388, rank=1, decoded_token=None)
For token 6246, log_prob: Logprob(logprob=-5.445433616638184, rank=25, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.8759067058563232, rank=1, decoded_token=None)
For token 2684, log_prob: Logprob(logprob=-3.019108295440674, rank=7, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.6913377642631531, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.022329222410917282, rank=1, decoded_token=None)
For token 7041, log_prob: Logprob(logprob=-3.9607925415039062, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.288790225982666, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.200063943862915, rank=1, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-0.6154614090919495, rank=1, decoded_token=None)
For token 389, log_prob: Logprob(logprob=-2.105520248413086, rank=3, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-1.2467472553253174, rank=2, decoded_token=None)
For token 2128, log_prob: Logprob(logprob=-0.08914763480424881, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.16352039575576782, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-2.8792216777801514, rank=4, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-1.2772589921951294, rank=2, decoded_token=None)
For token 12722, log_prob: Logprob(logprob=-4.80352258682251, rank=9, decoded_token=None)
For token 15100, log_prob: Logprob(logprob=-4.0572991371154785, rank=7, decoded_token=None)
For token 1268, log_prob: Logprob(logprob=-0.9948503971099854, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.8683412075042725, rank=3, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-1.9003151655197144, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.11957751214504242, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.29255211353302, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.01057143323123455, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.7831801772117615, rank=1, decoded_token=None)
For token 4460, log_prob: Logprob(logprob=-3.463230609893799, rank=3, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.9446107149124146, rank=2, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.04526291787624359, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002380991354584694, rank=1, decoded_token=None)
For token 2758, log_prob: Logprob(logprob=-3.3964881896972656, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.38579824566841125, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.9311184883117676, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.38374000787734985, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.3195199966430664, rank=2, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.10298678278923035, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.7452938556671143, rank=2, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.4569380283355713, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.816202163696289, rank=4, decoded_token=None)
For token 1758, log_prob: Logprob(logprob=-0.8483269810676575, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.920579731464386, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.4476555585861206, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0015714927576482296, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00015269544383045286, rank=1, decoded_token=None)
For token 64002, log_prob: Logprob(logprob=-2.5445642471313477, rank=3, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.040661152452230453, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.1308070570230484, rank=1, decoded_token=None)
For token 555, log_prob: Logprob(logprob=-0.035039275884628296, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.00441908510401845, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.013742946088314056, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.09101356565952301, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.06291541457176208, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.23998305201530457, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-0.0345701165497303, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.00949143711477518, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.0618923157453537, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0015372138004750013, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010275312524754554, rank=1, decoded_token=None)
For token 72159, log_prob: Logprob(logprob=-1.416687250137329, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.022464442998170853, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.1311088651418686, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-5.759943962097168, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005024425685405731, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.10427399724721909, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.16913986206054688, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.024288708344101906, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04584870859980583, rank=1, decoded_token=None)
For token 3965, log_prob: Logprob(logprob=-0.16225406527519226, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.09998979419469833, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.008857247419655323, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0020776845049113035, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0003250309091527015, rank=1, decoded_token=None)
For token 94310, log_prob: Logprob(logprob=-0.7316688895225525, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.024832606315612793, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.6226915121078491, rank=1, decoded_token=None)
For token 505, log_prob: Logprob(logprob=-0.10961204022169113, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.010747289285063744, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.05260615423321724, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.02702752687036991, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.012585973367094994, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0407465361058712, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.009129801765084267, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.017733123153448105, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.05732721835374832, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004556629806756973, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0005477358354255557, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.3356648683547974, rank=3, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.2082667499780655, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-1.9418500661849976, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-5.220272541046143, rank=29, decoded_token=None)
For token 31878, log_prob: Logprob(logprob=-1.610248327255249, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.7332974672317505, rank=1, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-8.542618751525879, rank=186, decoded_token=None)
For token 2204, log_prob: Logprob(logprob=-2.599426507949829, rank=2, decoded_token=None)
For token 8146, log_prob: Logprob(logprob=-5.755116939544678, rank=24, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.027865495532751083, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-3.957357883453369, rank=10, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.40048009157180786, rank=1, decoded_token=None)
For token 2435, log_prob: Logprob(logprob=-4.845759868621826, rank=13, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.3862104415893555, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.847692608833313, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-4.27924108505249, rank=17, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-4.734525680541992, rank=13, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.17049723863601685, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-2.0231032371520996, rank=2, decoded_token=None)
For token 1933, log_prob: Logprob(logprob=-0.12822699546813965, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-3.447733163833618, rank=5, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-7.156528472900391, rank=17, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.10994840413331985, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-2.5678606033325195, rank=5, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.8113741874694824, rank=3, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.09289318323135376, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.6233457922935486, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.7501171827316284, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-2.1427054405212402, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-3.4584686756134033, rank=6, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.026147279888391495, rank=1, decoded_token=None)
For token 706, log_prob: Logprob(logprob=-0.34631913900375366, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.6868782043457031, rank=2, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.2303718775510788, rank=1, decoded_token=None)
For token 649, log_prob: Logprob(logprob=-2.7231407165527344, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.054041046649217606, rank=1, decoded_token=None)
For token 1766, log_prob: Logprob(logprob=-2.5916926860809326, rank=4, decoded_token=None)
For token 1701, log_prob: Logprob(logprob=-2.2964775562286377, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.42406484484672546, rank=1, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-3.539501428604126, rank=7, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-4.590996742248535, rank=15, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.18096934258937836, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.9475879669189453, rank=2, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-0.4854806661605835, rank=1, decoded_token=None)
For token 25800, log_prob: Logprob(logprob=-3.8487393856048584, rank=9, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.1915293186903, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.07257572561502457, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-2.225902557373047, rank=3, decoded_token=None)
For token 2650, log_prob: Logprob(logprob=-2.9975926876068115, rank=3, decoded_token=None)
For token 1690, log_prob: Logprob(logprob=-0.08352108299732208, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.6937007308006287, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.15021462738513947, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-0.1846829354763031, rank=1, decoded_token=None)
For token 1587, log_prob: Logprob(logprob=-0.9513101577758789, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.025589339435100555, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.003244970692321658, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-0.10589171200990677, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.1511233001947403, rank=1, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.037622109055519104, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.09561489522457123, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.07025675475597382, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002441641641780734, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021361514925956726, rank=1, decoded_token=None)
For token 25541, log_prob: Logprob(logprob=-11.017716407775879, rank=927, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.7192279100418091, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0011468507582321763, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013636612857226282, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.001517931348644197, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-4.038790702819824, rank=7, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.023376699537038803, rank=1, decoded_token=None)
For token 21129, log_prob: Logprob(logprob=-5.540423393249512, rank=45, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.008513230830430984, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.00035577642847783864, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001481661747675389, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0015720878727734089, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.26859188079834, rank=2, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.006552401464432478, rank=1, decoded_token=None)
For token 24599, log_prob: Logprob(logprob=-6.160186767578125, rank=81, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.004695461131632328, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.000506511190906167, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002585315378382802, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0038100522942841053, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-2.5259666442871094, rank=3, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.001276512397453189, rank=1, decoded_token=None)
For token 5154, log_prob: Logprob(logprob=-5.772514343261719, rank=71, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.5313923954963684, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004962034057825804, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0004538459761533886, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0903221368789673, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.23396459221839905, rank=1, decoded_token=None)
For token 23956, log_prob: Logprob(logprob=-3.7109880447387695, rank=5, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-2.3338446617126465, rank=3, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-1.2901480197906494, rank=1, decoded_token=None)
For token 13890, log_prob: Logprob(logprob=-0.29379332065582275, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.004455045331269503, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5699459910392761, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.582611322402954, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-3.8140597343444824, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.22526046633720398, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-3.268810987472534, rank=8, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.9523714780807495, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.02629231847822666, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002087677363306284, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-4.041932106018066, rank=2, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3275642395019531, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7747173309326172, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01943170465528965, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.8843350410461426, rank=6, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.05427434667944908, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7900131344795227, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-1.6092212200164795, rank=2, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-4.122803688049316, rank=6, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.053970567882061005, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006345955654978752, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.5473098754882812, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.06624624133110046, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0031123552471399307, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00019047829846385866, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.5430195927619934, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3349359631538391, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.17014674842357635, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.11895304173231125, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2283027172088623, rank=4, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.21531498432159424, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-4.436285972595215, rank=3, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.43919575214385986, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.5670137405395508, rank=3, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.013229803182184696, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.020044738426804543, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-1.059314250946045, rank=1, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.14613543450832367, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0012510338565334678, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013481661153491586, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.36141881346702576, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.170744389295578, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.15453915297985077, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0653778612613678, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.4421030282974243, rank=3, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.09968782961368561, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-0.7550356984138489, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.3567902743816376, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5658089518547058, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.03483690321445465, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.05940350890159607, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-1.1212691068649292, rank=2, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.013908135704696178, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0008878341759555042, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001971527235582471, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.19026270508766174, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.07903989404439926, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.1152166947722435, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.040283940732479095, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-0.6784765124320984, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.02332417666912079, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-4.38916015625, rank=4, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.059930216521024704, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.9063451290130615, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.02287174016237259, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.002457695547491312, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-5.066433429718018, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.015977919101715088, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004998686723411083, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0003066784702241421, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.108638048171997, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.18586991727352142, rank=1, decoded_token=None)
For token 11874, log_prob: Logprob(logprob=-5.224460124969482, rank=13, decoded_token=None)
For token 4459, log_prob: Logprob(logprob=-7.009128570556641, rank=124, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.6522552967071533, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.379534363746643, rank=2, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.5606241226196289, rank=1, decoded_token=None)
For token 3325, log_prob: Logprob(logprob=-9.22218132019043, rank=39, decoded_token=None)
For token 4279, log_prob: Logprob(logprob=-0.061864301562309265, rank=1, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-0.45201748609542847, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.17637768387794495, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.023118602111935616, rank=1, decoded_token=None)
For token 1399, log_prob: Logprob(logprob=-3.963719367980957, rank=14, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.09445195645093918, rank=1, decoded_token=None)
For token 9062, log_prob: Logprob(logprob=-5.071889877319336, rank=12, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.6336301565170288, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.3426891267299652, rank=1, decoded_token=None)
For token 2753, log_prob: Logprob(logprob=-2.6435422897338867, rank=3, decoded_token=None)
For token 1109, log_prob: Logprob(logprob=-0.004161983262747526, rank=1, decoded_token=None)
For token 477, log_prob: Logprob(logprob=-2.879474401473999, rank=3, decoded_token=None)
For token 6273, log_prob: Logprob(logprob=-0.013294622302055359, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.0058578010648489, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.09096752852201462, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-5.163353443145752, rank=29, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.1529577076435089, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-1.5697429180145264, rank=2, decoded_token=None)
For token 12474, log_prob: Logprob(logprob=-2.645151138305664, rank=3, decoded_token=None)
For token 4279, log_prob: Logprob(logprob=-0.6883967518806458, rank=1, decoded_token=None)
For token 8331, log_prob: Logprob(logprob=-0.40138059854507446, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.16735176742076874, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.33446672558784485, rank=1, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-0.18579617142677307, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.2953820526599884, rank=1, decoded_token=None)
For token 285, log_prob: Logprob(logprob=-9.538186073303223, rank=41, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.9321149587631226, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.0747475624084473, rank=3, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.17374888062477112, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-1.1434378623962402, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-2.005824565887451, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.07729481160640717, rank=1, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-0.310687780380249, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.7019672989845276, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.0899902880191803, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.014821651391685009, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0012823462020605803, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.03980715200304985, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.936407446861267, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.24611333012580872, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005055620335042477, rank=1, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.329893112182617, rank=3, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.023442961275577545, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0009132028790190816, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-7.390703103737906e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.004810308571904898, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.1714460849761963, rank=7, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.02755010686814785, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0016718233237043023, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-1.2207993268966675, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0012977044098079205, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.00026008085114881396, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-6.186770770000294e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005501368548721075, rank=1, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.967453718185425, rank=8, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.003204688895493746, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0013855629367753863, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-0.7422707080841064, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0011626873165369034, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.00032074074260890484, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00017677174764685333, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.015494913794100285, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-2.0872957706451416, rank=3, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.002190573140978813, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.001105650793761015, rank=1, decoded_token=None)
For token 868, log_prob: Logprob(logprob=-2.141770362854004, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.02330053597688675, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.002792746527120471, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0005763299996033311, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.16048264503479, rank=2, decoded_token=None)
Answer:  (-1.16048264503479, False)
vllm (pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42), gen_kwargs: (None), limit: 1.0, num_fewshot: None, batch_size: auto
|  Tasks  |Version|Filter|n-shot| Metric |   |Value|   |Stderr|
|---------|------:|------|-----:|--------|---|----:|---|------|
|meta_mmlu|      1|none  |     0|acc     |↑  |    0|±  |   N/A|
|         |       |none  |     0|acc_norm|↑  |    0|±  |   N/A|

[rank0]:[W1123 03:26:31.964618460 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
end: Sat Nov 23 03:26:34 UTC 2024
Sat Nov 23 03:36:40 UTC 2024 - running command: lm_eval --model vllm --model_args pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42 --tasks meta_mmlu --batch_size auto --output_path eval_results --seed 42 --log_samples --limit 3
nohup: ignoring input
2024-11-23:03:36:50,608 INFO     [__main__.py:279] Verbosity set to INFO
2024-11-23:03:37:06,478 WARNING  [__main__.py:312]  --limit SHOULD ONLY BE USED FOR TESTING.REAL METRICS SHOULD NOT BE COMPUTED USING LIMIT.
2024-11-23:03:37:06,479 INFO     [__main__.py:376] Selected Tasks: ['meta_mmlu']
2024-11-23:03:37:06,490 INFO     [evaluator.py:164] Setting random seed to 42 | Setting numpy seed to 42 | Setting torch manual seed to 42 | Setting fewshot manual seed to 42
2024-11-23:03:37:06,491 INFO     [evaluator.py:201] Initializing vllm model, with arguments: {'pretrained': 'meta-llama/Llama-3.2-1B', 'tensor_parallel_size': 1, 'dtype': 'auto', 'gpu_memory_utilization': 0.25, 'data_parallel_size': 1, 'max_model_len': 8192, 'add_bos_token': True, 'seed': 42}
INFO 11-23 03:37:15 config.py:350] This model supports multiple tasks: {'embedding', 'generate'}. Defaulting to 'generate'.
INFO 11-23 03:37:15 llm_engine.py:249] Initializing an LLM engine (v0.6.4.post1) with config: model='meta-llama/Llama-3.2-1B', speculative_config=None, tokenizer='meta-llama/Llama-3.2-1B', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=42, served_model_name=meta-llama/Llama-3.2-1B, num_scheduler_steps=1, chunked_prefill_enabled=False multi_step_stream_outputs=True, enable_prefix_caching=False, use_async_output_proc=True, use_cached_outputs=False, chat_template_text_format=string, mm_processor_kwargs=None, pooler_config=None)
INFO 11-23 03:37:16 selector.py:135] Using Flash Attention backend.
INFO 11-23 03:37:16 model_runner.py:1072] Starting to load model meta-llama/Llama-3.2-1B...
INFO 11-23 03:37:16 weight_utils.py:243] Using model weights format ['*.safetensors']
INFO 11-23 03:37:16 weight_utils.py:288] No model.safetensors.index.json found in remote.
Loading safetensors checkpoint shards:   0% Completed | 0/1 [00:00<?, ?it/s]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:01<00:00,  1.83s/it]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:01<00:00,  1.83s/it]

INFO 11-23 03:37:18 model_runner.py:1077] Loading model weights took 2.3185 GB
INFO 11-23 03:37:19 worker.py:232] Memory profiling results: total_gpu_memory=39.38GiB initial_memory_usage=2.82GiB peak_torch_memory=3.52GiB memory_usage_post_profile=2.84GiB non_torch_memory=0.51GiB kv_cache_size=5.81GiB gpu_memory_utilization=0.25
INFO 11-23 03:37:19 gpu_executor.py:113] # GPU blocks: 11900, # CPU blocks: 8192
INFO 11-23 03:37:19 gpu_executor.py:117] Maximum concurrency for 8192 tokens per request: 23.24x
INFO 11-23 03:37:22 model_runner.py:1400] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 11-23 03:37:22 model_runner.py:1404] If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 11-23 03:37:34 model_runner.py:1518] Graph capturing finished in 12 secs, took 0.14 GiB
2024-11-23:03:37:35,903 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
2024-11-23:03:37:35,915 WARNING  [task.py:325] [Task: meta_mmlu] has_training_docs and has_validation_docs are False, using test_docs as fewshot_docs but this is not recommended.
2024-11-23:03:37:37,797 INFO     [task.py:415] Building contexts for meta_mmlu on rank 0...
  0%|          | 0/3 [00:00<?, ?it/s]100%|██████████| 3/3 [00:00<00:00, 25679.41it/s]
2024-11-23:03:37:37,812 INFO     [evaluator.py:496] Running loglikelihood requests
Running loglikelihood requests:   0%|          | 0/12 [00:00<?, ?it/s]
Processed prompts:   0%|          | 0/12 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s][A
Processed prompts:   8%|▊         | 1/12 [00:00<00:02,  4.31it/s, est. speed input: 2278.31 toks/s, output: 4.31 toks/s][AProcessed prompts: 100%|██████████| 12/12 [00:00<00:00, 50.93it/s, est. speed input: 25838.81 toks/s, output: 50.95 toks/s]
Running loglikelihood requests:   8%|▊         | 1/12 [00:00<00:02,  4.12it/s]Running loglikelihood requests: 100%|██████████| 12/12 [00:00<00:00, 45.73it/s]
2024-11-23:03:37:40,125 INFO     [evaluation_tracker.py:206] Saving results aggregated
2024-11-23:03:37:40,130 INFO     [evaluation_tracker.py:287] Saving per-sample results for: meta_mmlu
tokens length:  528
output logprobs length:  528
ctxlen:  527
For token 791, log_prob: Logprob(logprob=-3.6213459968566895, rank=4, decoded_token=None)
For token 2768, log_prob: Logprob(logprob=-4.259817600250244, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-2.991230010986328, rank=3, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-9.332494735717773, rank=699, decoded_token=None)
For token 5873, log_prob: Logprob(logprob=-1.0538994073867798, rank=1, decoded_token=None)
For token 4860, log_prob: Logprob(logprob=-0.15532542765140533, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.4161324501037598, rank=9, decoded_token=None)
For token 4291, log_prob: Logprob(logprob=-3.5592703819274902, rank=2, decoded_token=None)
For token 11503, log_prob: Logprob(logprob=-0.9168203473091125, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.4131229519844055, rank=1, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.8898773193359375, rank=4, decoded_token=None)
For token 36256, log_prob: Logprob(logprob=-8.741050720214844, rank=635, decoded_token=None)
For token 38696, log_prob: Logprob(logprob=-3.7625539302825928, rank=8, decoded_token=None)
For token 382, log_prob: Logprob(logprob=-5.573415279388428, rank=19, decoded_token=None)
For token 791, log_prob: Logprob(logprob=-3.544070243835449, rank=4, decoded_token=None)
For token 7187, log_prob: Logprob(logprob=-7.385589122772217, rank=164, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.11412940919399261, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.8478307723999023, rank=2, decoded_token=None)
For token 3363, log_prob: Logprob(logprob=-1.8618664741516113, rank=1, decoded_token=None)
For token 1405, log_prob: Logprob(logprob=-5.9992265701293945, rank=13, decoded_token=None)
For token 33126, log_prob: Logprob(logprob=-9.025006294250488, rank=320, decoded_token=None)
For token 574, log_prob: Logprob(logprob=-5.349676132202148, rank=8, decoded_token=None)
For token 9405, log_prob: Logprob(logprob=-0.4107400178909302, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.5750153660774231, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.7413759231567383, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-7.208454132080078, rank=134, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.7163258790969849, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-8.746551513671875, rank=551, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.46054989099502563, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-4.115103721618652, rank=8, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.2959842085838318, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.1604301482439041, rank=1, decoded_token=None)
For token 907, log_prob: Logprob(logprob=-5.730544567108154, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.036400843411684036, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.9913142323493958, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.306947708129883, rank=14, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.463329553604126, rank=3, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-6.80005407333374, rank=33, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.502928614616394, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.8077549934387207, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.794535756111145, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-0.4624699354171753, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.35287705063819885, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-0.04949808493256569, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-3.705009937286377, rank=5, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.00704288482666, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.2554558217525482, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.19919312000274658, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.9839682579040527, rank=1, decoded_token=None)
For token 9214, log_prob: Logprob(logprob=-7.269443511962891, rank=42, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.3192760646343231, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0035969815216958523, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0006814065272919834, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021883098408579826, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.1909081935882568, rank=1, decoded_token=None)
For token 11758, log_prob: Logprob(logprob=-1.8936516046524048, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00804623682051897, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.001649211160838604, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000596107158344239, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006301296874880791, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.09370359778404236, rank=1, decoded_token=None)
For token 22781, log_prob: Logprob(logprob=-0.7115755081176758, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.007358944974839687, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002253137994557619, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000610999355558306, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.019312677904963493, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.06189332529902458, rank=1, decoded_token=None)
For token 6305, log_prob: Logprob(logprob=-0.6310369372367859, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.25910231471061707, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.9596242904663086, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.060119159519672394, rank=1, decoded_token=None)
For token 362, log_prob: Logprob(logprob=-1.2652478218078613, rank=2, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-1.2315428256988525, rank=2, decoded_token=None)
For token 43819, log_prob: Logprob(logprob=-12.279776573181152, rank=2720, decoded_token=None)
For token 21475, log_prob: Logprob(logprob=-0.6679940819740295, rank=1, decoded_token=None)
For token 1511, log_prob: Logprob(logprob=-6.589616775512695, rank=49, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.3157753944396973, rank=3, decoded_token=None)
For token 6037, log_prob: Logprob(logprob=-6.093387603759766, rank=53, decoded_token=None)
For token 330, log_prob: Logprob(logprob=-3.6796159744262695, rank=9, decoded_token=None)
For token 2261, log_prob: Logprob(logprob=-4.342022895812988, rank=15, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.6981703042984009, rank=1, decoded_token=None)
For token 806, log_prob: Logprob(logprob=-4.951969146728516, rank=18, decoded_token=None)
For token 1, log_prob: Logprob(logprob=-1.3567357063293457, rank=2, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.559495747089386, rank=1, decoded_token=None)
For token 1893, log_prob: Logprob(logprob=-6.321759223937988, rank=44, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-1.3698585033416748, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3447837829589844, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-6.439241409301758, rank=23, decoded_token=None)
For token 6982, log_prob: Logprob(logprob=-3.0471701622009277, rank=5, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-0.703130304813385, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.47134995460510254, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.5008544921875, rank=9, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-4.440498352050781, rank=13, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.9463624954223633, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.14101086556911469, rank=1, decoded_token=None)
For token 1691, log_prob: Logprob(logprob=-0.807411789894104, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0075277951546013355, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01632852479815483, rank=1, decoded_token=None)
For token 843, log_prob: Logprob(logprob=-0.12699167430400848, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.03602903336286545, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2054326832294464, rank=1, decoded_token=None)
For token 3391, log_prob: Logprob(logprob=-0.025190236046910286, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.08179139345884323, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3728283941745758, rank=1, decoded_token=None)
For token 4370, log_prob: Logprob(logprob=-0.015932045876979828, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-9.9160795211792, rank=121, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-4.163404941558838, rank=8, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.451625347137451, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.517742395401001, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.110421895980835, rank=3, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.476434588432312, rank=2, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.23249292373657227, rank=1, decoded_token=None)
For token 837, log_prob: Logprob(logprob=-0.6536205410957336, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.36460936069488525, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.07394429296255112, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.009883278980851173, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.6059339046478271, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-2.450810432434082, rank=5, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.049487829208374, rank=2, decoded_token=None)
For token 339, log_prob: Logprob(logprob=-0.6980368494987488, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.139958381652832, rank=2, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.1722527742385864, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.015046435408294201, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.19619299471378326, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.604534864425659, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.20953349769115448, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-4.28965425491333, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.45435839891433716, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.02163873240351677, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.2181992381811142, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.001948483637534082, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0003895000845659524, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.05843179672956467, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.4078903198242188, rank=4, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.5167269706726074, rank=4, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.789426326751709, rank=1, decoded_token=None)
For token 2646, log_prob: Logprob(logprob=-3.07065749168396, rank=8, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-2.406424045562744, rank=3, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.64980149269104, rank=7, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-2.804396629333496, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.07326694577932358, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-3.0780837535858154, rank=4, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.01376998983323574, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-0.044610776007175446, rank=1, decoded_token=None)
For token 1023, log_prob: Logprob(logprob=-0.0030948857311159372, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.03554227203130722, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.011711414903402328, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00024434918304905295, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.1415383219718933, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-5.144501686096191, rank=9, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.4923019409179688, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.1131657212972641, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.29162850975990295, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.007929631508886814, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.020741933956742287, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.09790364652872086, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.5009815692901611, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-3.012348175048828, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.7491417527198792, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.07769384235143661, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-7.595197677612305, rank=29, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.1537325382232666, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.010177383199334145, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.005346049088984728, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.0328480489552021, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.024808069691061974, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00047052756417542696, rank=1, decoded_token=None)
For token 1442, log_prob: Logprob(logprob=-4.929317474365234, rank=7, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.5717543363571167, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3725956678390503, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.2139285802841187, rank=1, decoded_token=None)
For token 3940, log_prob: Logprob(logprob=-4.185582160949707, rank=14, decoded_token=None)
For token 449, log_prob: Logprob(logprob=-0.05743381381034851, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.9012429714202881, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.6468750238418579, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.008982133120298386, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-2.8201804161071777, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.6609485149383545, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.6036994457244873, rank=3, decoded_token=None)
For token 1053, log_prob: Logprob(logprob=-2.095855951309204, rank=2, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-3.041916847229004, rank=6, decoded_token=None)
For token 1193, log_prob: Logprob(logprob=-3.4329066276550293, rank=7, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.34858348965644836, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.016673851758241653, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-2.831927537918091, rank=2, decoded_token=None)
For token 433, log_prob: Logprob(logprob=-0.3648470342159271, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.21367542445659637, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.02570355497300625, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0026745761279016733, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.1849979162216187, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.18910124897956848, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.310189723968506, rank=2, decoded_token=None)
For token 2860, log_prob: Logprob(logprob=-5.869146347045898, rank=56, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.027346676215529442, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2362522929906845, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-4.086330413818359, rank=4, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-6.07204008102417, rank=49, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.5300240516662598, rank=7, decoded_token=None)
For token 1514, log_prob: Logprob(logprob=-1.5933805704116821, rank=2, decoded_token=None)
For token 19794, log_prob: Logprob(logprob=-4.322381496429443, rank=6, decoded_token=None)
For token 520, log_prob: Logprob(logprob=-2.5797297954559326, rank=4, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.8274871110916138, rank=1, decoded_token=None)
For token 6246, log_prob: Logprob(logprob=-5.394405841827393, rank=25, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.8071932196617126, rank=1, decoded_token=None)
For token 2684, log_prob: Logprob(logprob=-3.05216908454895, rank=7, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.6914281249046326, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.022183140739798546, rank=1, decoded_token=None)
For token 7041, log_prob: Logprob(logprob=-3.9680607318878174, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3262915313243866, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2028698921203613, rank=1, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-0.6208716034889221, rank=1, decoded_token=None)
For token 389, log_prob: Logprob(logprob=-2.077561855316162, rank=3, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-1.246550440788269, rank=2, decoded_token=None)
For token 2128, log_prob: Logprob(logprob=-0.10005613416433334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.14739106595516205, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-2.883037567138672, rank=4, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-1.1887978315353394, rank=2, decoded_token=None)
For token 12722, log_prob: Logprob(logprob=-4.796601295471191, rank=9, decoded_token=None)
For token 15100, log_prob: Logprob(logprob=-4.097357749938965, rank=7, decoded_token=None)
For token 1268, log_prob: Logprob(logprob=-0.9826016426086426, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.8719936609268188, rank=3, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-1.8892854452133179, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.10686607658863068, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.29455244541168213, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.010281220078468323, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.8527332544326782, rank=1, decoded_token=None)
For token 4460, log_prob: Logprob(logprob=-3.4623050689697266, rank=3, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-1.0008432865142822, rank=2, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.03988252580165863, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002444852376356721, rank=1, decoded_token=None)
For token 2758, log_prob: Logprob(logprob=-3.4538803100585938, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.37787938117980957, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.939903974533081, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.39280885457992554, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.3244531154632568, rank=2, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.10098931938409805, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.7775647640228271, rank=2, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.4539406895637512, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.811513423919678, rank=4, decoded_token=None)
For token 1758, log_prob: Logprob(logprob=-0.7816817164421082, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.9299181699752808, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.44691434502601624, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0014972201315686107, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001538873475510627, rank=1, decoded_token=None)
For token 64002, log_prob: Logprob(logprob=-2.5435791015625, rank=3, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04151042550802231, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.13028867542743683, rank=1, decoded_token=None)
For token 555, log_prob: Logprob(logprob=-0.033352263271808624, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.004435819108039141, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.01422715000808239, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.0882897675037384, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.06284724175930023, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.23540009558200836, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-0.04173900932073593, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.009144803509116173, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.061586808413267136, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013944911770522594, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010585224663373083, rank=1, decoded_token=None)
For token 72159, log_prob: Logprob(logprob=-1.4160566329956055, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021862106397747993, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.14335329830646515, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-5.759881019592285, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005048384889960289, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.10374521464109421, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.17173078656196594, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.02425275556743145, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.045896414667367935, rank=1, decoded_token=None)
For token 3965, log_prob: Logprob(logprob=-0.1629486083984375, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.11125016212463379, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.008519258350133896, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002081372309476137, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00037245964631438255, rank=1, decoded_token=None)
For token 94310, log_prob: Logprob(logprob=-0.7335497140884399, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.02491365373134613, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5532340407371521, rank=1, decoded_token=None)
For token 505, log_prob: Logprob(logprob=-0.10938028991222382, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.010903777554631233, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.055021319538354874, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.02717730961740017, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.014209168031811714, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04492345079779625, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.008596202358603477, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.019180072471499443, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.05701299384236336, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.0044067418202757835, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0004991239402443171, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.3356616497039795, rank=3, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.2321207970380783, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-1.9457459449768066, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-5.169647216796875, rank=25, decoded_token=None)
For token 31878, log_prob: Logprob(logprob=-1.6065828800201416, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.7340887784957886, rank=1, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-8.43447208404541, rank=182, decoded_token=None)
For token 2204, log_prob: Logprob(logprob=-2.5959243774414062, rank=2, decoded_token=None)
For token 8146, log_prob: Logprob(logprob=-5.7852783203125, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.028130831196904182, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-4.079294681549072, rank=13, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.363671213388443, rank=1, decoded_token=None)
For token 2435, log_prob: Logprob(logprob=-4.852097988128662, rank=13, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.3592950105667114, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.8471036553382874, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-4.368374824523926, rank=20, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-4.802444934844971, rank=13, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.16641685366630554, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-2.103876829147339, rank=2, decoded_token=None)
For token 1933, log_prob: Logprob(logprob=-0.12087968736886978, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-3.4264016151428223, rank=5, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-7.156714916229248, rank=17, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.11071085929870605, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-2.5686776638031006, rank=5, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.808468818664551, rank=3, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.08335965126752853, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.6839105486869812, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.7509100437164307, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-2.0333144664764404, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-3.4627275466918945, rank=6, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.025303103029727936, rank=1, decoded_token=None)
For token 706, log_prob: Logprob(logprob=-0.38641905784606934, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.6944231986999512, rank=2, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.2304867058992386, rank=1, decoded_token=None)
For token 649, log_prob: Logprob(logprob=-2.619453191757202, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.055597249418497086, rank=1, decoded_token=None)
For token 1766, log_prob: Logprob(logprob=-2.600069999694824, rank=4, decoded_token=None)
For token 1701, log_prob: Logprob(logprob=-2.2944202423095703, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.4182531535625458, rank=1, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-3.653362512588501, rank=7, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-4.6120195388793945, rank=15, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.18519794940948486, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.9661778211593628, rank=2, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-0.45861148834228516, rank=1, decoded_token=None)
For token 25800, log_prob: Logprob(logprob=-3.94254732131958, rank=9, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.1716657280921936, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.07201958447694778, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-2.19677996635437, rank=3, decoded_token=None)
For token 2650, log_prob: Logprob(logprob=-2.998732566833496, rank=3, decoded_token=None)
For token 1690, log_prob: Logprob(logprob=-0.08345484733581543, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.7078306674957275, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.1414029747247696, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-0.18299917876720428, rank=1, decoded_token=None)
For token 1587, log_prob: Logprob(logprob=-0.9597219228744507, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.0231848806142807, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.0032851321157068014, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-0.10467099398374557, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.15210722386837006, rank=1, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.03904413804411888, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.10596451908349991, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.08106350153684616, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002707508159801364, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.022244233638048172, rank=1, decoded_token=None)
For token 25541, log_prob: Logprob(logprob=-10.945005416870117, rank=916, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.6583459973335266, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0010521834483370185, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001486429391661659, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0014629386132583022, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-4.006361961364746, rank=7, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.023395448923110962, rank=1, decoded_token=None)
For token 21129, log_prob: Logprob(logprob=-5.530216217041016, rank=44, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00830328743904829, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0003693613689392805, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013433984713628888, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0016192194307222962, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.299423933029175, rank=2, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.006571113597601652, rank=1, decoded_token=None)
For token 24599, log_prob: Logprob(logprob=-6.174839973449707, rank=81, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.004514620639383793, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0005022218101657927, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002609150833450258, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.003974872175604105, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-2.5288949012756348, rank=3, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0012215065071359277, rank=1, decoded_token=None)
For token 5154, log_prob: Logprob(logprob=-5.727021217346191, rank=71, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.49432677030563354, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.005106738768517971, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.000403084559366107, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0903244018554688, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.23497126996517181, rank=1, decoded_token=None)
For token 23956, log_prob: Logprob(logprob=-3.718066692352295, rank=5, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-2.335458755493164, rank=3, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-1.303149938583374, rank=1, decoded_token=None)
For token 13890, log_prob: Logprob(logprob=-0.3004732131958008, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.004260392393916845, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5732686519622803, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.590839147567749, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-3.827090263366699, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.22617821395397186, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-3.2456188201904297, rank=8, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.9588005542755127, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.026078294962644577, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0019421778852120042, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.9211294651031494, rank=2, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3348463177680969, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7776240110397339, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01911025308072567, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.888803005218506, rank=6, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.054509516805410385, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7908403277397156, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-1.7093759775161743, rank=2, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-4.15236234664917, rank=6, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.05701907351613045, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006355076562613249, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.6023101806640625, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.06791981309652328, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0033156678546220064, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002029928145930171, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.5973119735717773, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3241466283798218, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.18300116062164307, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.11992660909891129, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2516236305236816, rank=4, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.24058884382247925, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-4.195656776428223, rank=3, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.4392582178115845, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.5084874629974365, rank=3, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.012086370028555393, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.020088670775294304, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-1.0653190612792969, rank=1, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.1461433619260788, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013424679636955261, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013040646445006132, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.36163878440856934, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.1781444400548935, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.15448440611362457, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.06548036634922028, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.4418625831604004, rank=3, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.10001654922962189, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-0.7548537254333496, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.39578503370285034, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5675726532936096, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.03172972798347473, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.059371717274188995, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-1.1219673156738281, rank=2, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.014431270770728588, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0009012927766889334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00019727191829588264, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.1902770847082138, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.08072244375944138, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.11521956324577332, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.035654667764902115, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-0.6550530791282654, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.02330426312983036, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-4.384681224822998, rank=4, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.05364048480987549, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.8038601875305176, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.02270464599132538, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.002600504318252206, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-4.947210788726807, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.018018605187535286, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004600179847329855, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0003252692404203117, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0266454219818115, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.1865871399641037, rank=1, decoded_token=None)
For token 11874, log_prob: Logprob(logprob=-5.230022430419922, rank=13, decoded_token=None)
For token 4459, log_prob: Logprob(logprob=-7.015143394470215, rank=127, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.7234127521514893, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.3753688335418701, rank=2, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.5622481107711792, rank=1, decoded_token=None)
For token 3325, log_prob: Logprob(logprob=-9.274701118469238, rank=39, decoded_token=None)
For token 4279, log_prob: Logprob(logprob=-0.061525940895080566, rank=1, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-0.4941194951534271, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.19108332693576813, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.023351196199655533, rank=1, decoded_token=None)
For token 1399, log_prob: Logprob(logprob=-3.965664863586426, rank=14, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.08888546377420425, rank=1, decoded_token=None)
For token 9062, log_prob: Logprob(logprob=-5.069382190704346, rank=12, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.7112465500831604, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.34662938117980957, rank=1, decoded_token=None)
For token 2753, log_prob: Logprob(logprob=-2.481574535369873, rank=3, decoded_token=None)
For token 1109, log_prob: Logprob(logprob=-0.003997075371444225, rank=1, decoded_token=None)
For token 477, log_prob: Logprob(logprob=-2.8801045417785645, rank=3, decoded_token=None)
For token 6273, log_prob: Logprob(logprob=-0.014255120418965816, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.005616360809653997, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.09136494249105453, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-5.171558380126953, rank=29, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.15463751554489136, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-1.5059852600097656, rank=2, decoded_token=None)
For token 12474, log_prob: Logprob(logprob=-2.703284740447998, rank=4, decoded_token=None)
For token 4279, log_prob: Logprob(logprob=-0.6892966032028198, rank=1, decoded_token=None)
For token 8331, log_prob: Logprob(logprob=-0.40075385570526123, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.16614307463169098, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.3330661356449127, rank=1, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-0.18814654648303986, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.29503315687179565, rank=1, decoded_token=None)
For token 285, log_prob: Logprob(logprob=-9.537616729736328, rank=40, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.0424995422363281, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.0103116035461426, rank=3, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.1927359402179718, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-1.1282888650894165, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-1.897783637046814, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.0834796354174614, rank=1, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-0.31044304370880127, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.7018356919288635, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.08656797558069229, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.015342078171670437, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.001342110801488161, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.03845331445336342, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.8961074352264404, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.24604052305221558, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.00525154173374176, rank=1, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.31360125541687, rank=3, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.022651156410574913, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0009365463047288358, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-7.247662142617628e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.004892876371741295, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.138803005218506, rank=7, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.030544022098183632, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.001689555705524981, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-1.276960015296936, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.001290561049245298, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.00033408781746402383, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-6.282132380874828e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005520693026483059, rank=1, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.951915740966797, rank=7, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.003568592481315136, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.001328301033936441, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-0.7559362053871155, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0010598048102110624, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.00035744477645494044, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001752223033690825, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.015477659180760384, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-2.1781153678894043, rank=3, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.0018874465022236109, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0009585791267454624, rank=1, decoded_token=None)
For token 868, log_prob: Logprob(logprob=-2.1975910663604736, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.022958656772971153, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.00263795698992908, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0005277194431982934, rank=1, decoded_token=None)
For token 356, log_prob: Logprob(logprob=-1.5764647722244263, rank=3, decoded_token=None)
tokens length:  528
output logprobs length:  528
ctxlen:  527
For token 791, log_prob: Logprob(logprob=-3.6213459968566895, rank=4, decoded_token=None)
For token 2768, log_prob: Logprob(logprob=-4.259817600250244, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-2.991230010986328, rank=3, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-9.332494735717773, rank=699, decoded_token=None)
For token 5873, log_prob: Logprob(logprob=-1.0538994073867798, rank=1, decoded_token=None)
For token 4860, log_prob: Logprob(logprob=-0.15532542765140533, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.4161324501037598, rank=9, decoded_token=None)
For token 4291, log_prob: Logprob(logprob=-3.5592703819274902, rank=2, decoded_token=None)
For token 11503, log_prob: Logprob(logprob=-0.9168203473091125, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.4131229519844055, rank=1, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.8898773193359375, rank=4, decoded_token=None)
For token 36256, log_prob: Logprob(logprob=-8.741050720214844, rank=635, decoded_token=None)
For token 38696, log_prob: Logprob(logprob=-3.7625539302825928, rank=8, decoded_token=None)
For token 382, log_prob: Logprob(logprob=-5.573415279388428, rank=19, decoded_token=None)
For token 791, log_prob: Logprob(logprob=-3.544070243835449, rank=4, decoded_token=None)
For token 7187, log_prob: Logprob(logprob=-7.385589122772217, rank=164, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.11412940919399261, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.8478307723999023, rank=2, decoded_token=None)
For token 3363, log_prob: Logprob(logprob=-1.8618664741516113, rank=1, decoded_token=None)
For token 1405, log_prob: Logprob(logprob=-5.9992265701293945, rank=13, decoded_token=None)
For token 33126, log_prob: Logprob(logprob=-9.025006294250488, rank=320, decoded_token=None)
For token 574, log_prob: Logprob(logprob=-5.349676132202148, rank=8, decoded_token=None)
For token 9405, log_prob: Logprob(logprob=-0.4107400178909302, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.5750153660774231, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.7413759231567383, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-7.208454132080078, rank=134, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.7163258790969849, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-8.746551513671875, rank=551, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.46054989099502563, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-4.115103721618652, rank=8, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.2959842085838318, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.1604301482439041, rank=1, decoded_token=None)
For token 907, log_prob: Logprob(logprob=-5.730544567108154, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.036400843411684036, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.9913142323493958, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.306947708129883, rank=14, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.463329553604126, rank=3, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-6.80005407333374, rank=33, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.502928614616394, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.8077549934387207, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.794535756111145, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-0.4624699354171753, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.35287705063819885, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-0.04949808493256569, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-3.705009937286377, rank=5, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.00704288482666, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.2554558217525482, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.19919312000274658, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.9839682579040527, rank=1, decoded_token=None)
For token 9214, log_prob: Logprob(logprob=-7.269443511962891, rank=42, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.3192760646343231, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0035969815216958523, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0006814065272919834, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021883098408579826, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.1909081935882568, rank=1, decoded_token=None)
For token 11758, log_prob: Logprob(logprob=-1.8936516046524048, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00804623682051897, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.001649211160838604, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000596107158344239, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006301296874880791, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.09370359778404236, rank=1, decoded_token=None)
For token 22781, log_prob: Logprob(logprob=-0.7115755081176758, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.007358944974839687, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002253137994557619, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000610999355558306, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.019312677904963493, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.06189332529902458, rank=1, decoded_token=None)
For token 6305, log_prob: Logprob(logprob=-0.6310369372367859, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.25910231471061707, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.9596242904663086, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.060119159519672394, rank=1, decoded_token=None)
For token 362, log_prob: Logprob(logprob=-1.2652478218078613, rank=2, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-1.2315428256988525, rank=2, decoded_token=None)
For token 43819, log_prob: Logprob(logprob=-12.279776573181152, rank=2720, decoded_token=None)
For token 21475, log_prob: Logprob(logprob=-0.6679940819740295, rank=1, decoded_token=None)
For token 1511, log_prob: Logprob(logprob=-6.589616775512695, rank=49, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.3157753944396973, rank=3, decoded_token=None)
For token 6037, log_prob: Logprob(logprob=-6.093387603759766, rank=53, decoded_token=None)
For token 330, log_prob: Logprob(logprob=-3.6796159744262695, rank=9, decoded_token=None)
For token 2261, log_prob: Logprob(logprob=-4.342022895812988, rank=15, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.6981703042984009, rank=1, decoded_token=None)
For token 806, log_prob: Logprob(logprob=-4.951969146728516, rank=18, decoded_token=None)
For token 1, log_prob: Logprob(logprob=-1.3567357063293457, rank=2, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.559495747089386, rank=1, decoded_token=None)
For token 1893, log_prob: Logprob(logprob=-6.321759223937988, rank=44, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-1.3698585033416748, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3447837829589844, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-6.439241409301758, rank=23, decoded_token=None)
For token 6982, log_prob: Logprob(logprob=-3.0471701622009277, rank=5, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-0.703130304813385, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.47134995460510254, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.5008544921875, rank=9, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-4.440498352050781, rank=13, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.9463624954223633, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.14101086556911469, rank=1, decoded_token=None)
For token 1691, log_prob: Logprob(logprob=-0.807411789894104, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0075277951546013355, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01632852479815483, rank=1, decoded_token=None)
For token 843, log_prob: Logprob(logprob=-0.12699167430400848, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.03602903336286545, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2054326832294464, rank=1, decoded_token=None)
For token 3391, log_prob: Logprob(logprob=-0.025190236046910286, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.08179139345884323, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3728283941745758, rank=1, decoded_token=None)
For token 4370, log_prob: Logprob(logprob=-0.015932045876979828, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-9.9160795211792, rank=121, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-4.163404941558838, rank=8, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.451625347137451, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.517742395401001, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.110421895980835, rank=3, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.476434588432312, rank=2, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.23249292373657227, rank=1, decoded_token=None)
For token 837, log_prob: Logprob(logprob=-0.6536205410957336, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.36460936069488525, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.07394429296255112, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.009883278980851173, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.6059339046478271, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-2.450810432434082, rank=5, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.049487829208374, rank=2, decoded_token=None)
For token 339, log_prob: Logprob(logprob=-0.6980368494987488, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.139958381652832, rank=2, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.1722527742385864, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.015046435408294201, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.19619299471378326, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.604534864425659, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.20953349769115448, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-4.28965425491333, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.45435839891433716, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.02163873240351677, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.2181992381811142, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.001948483637534082, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0003895000845659524, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.05843179672956467, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.4078903198242188, rank=4, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.5167269706726074, rank=4, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.789426326751709, rank=1, decoded_token=None)
For token 2646, log_prob: Logprob(logprob=-3.07065749168396, rank=8, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-2.406424045562744, rank=3, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.64980149269104, rank=7, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-2.804396629333496, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.07326694577932358, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-3.0780837535858154, rank=4, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.01376998983323574, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-0.044610776007175446, rank=1, decoded_token=None)
For token 1023, log_prob: Logprob(logprob=-0.0030948857311159372, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.03554227203130722, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.011711414903402328, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00024434918304905295, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.1415383219718933, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-5.144501686096191, rank=9, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.4923019409179688, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.1131657212972641, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.29162850975990295, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.007929631508886814, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.020741933956742287, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.09790364652872086, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.5009815692901611, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-3.012348175048828, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.7491417527198792, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.07769384235143661, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-7.595197677612305, rank=29, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.1537325382232666, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.010177383199334145, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.005346049088984728, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.0328480489552021, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.024808069691061974, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00047052756417542696, rank=1, decoded_token=None)
For token 1442, log_prob: Logprob(logprob=-4.929317474365234, rank=7, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.5717543363571167, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3725956678390503, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.2139285802841187, rank=1, decoded_token=None)
For token 3940, log_prob: Logprob(logprob=-4.185582160949707, rank=14, decoded_token=None)
For token 449, log_prob: Logprob(logprob=-0.05743381381034851, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.9012429714202881, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.6468750238418579, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.008982133120298386, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-2.8201804161071777, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.6609485149383545, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.6036994457244873, rank=3, decoded_token=None)
For token 1053, log_prob: Logprob(logprob=-2.095855951309204, rank=2, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-3.041916847229004, rank=6, decoded_token=None)
For token 1193, log_prob: Logprob(logprob=-3.4329066276550293, rank=7, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.34858348965644836, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.016673851758241653, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-2.831927537918091, rank=2, decoded_token=None)
For token 433, log_prob: Logprob(logprob=-0.3648470342159271, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.21367542445659637, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.02570355497300625, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0026745761279016733, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.1849979162216187, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.18910124897956848, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.310189723968506, rank=2, decoded_token=None)
For token 2860, log_prob: Logprob(logprob=-5.869146347045898, rank=56, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.027346676215529442, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2362522929906845, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-4.086330413818359, rank=4, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-6.07204008102417, rank=49, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.5300240516662598, rank=7, decoded_token=None)
For token 1514, log_prob: Logprob(logprob=-1.5933805704116821, rank=2, decoded_token=None)
For token 19794, log_prob: Logprob(logprob=-4.322381496429443, rank=6, decoded_token=None)
For token 520, log_prob: Logprob(logprob=-2.5797297954559326, rank=4, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.8274871110916138, rank=1, decoded_token=None)
For token 6246, log_prob: Logprob(logprob=-5.394405841827393, rank=25, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.8071932196617126, rank=1, decoded_token=None)
For token 2684, log_prob: Logprob(logprob=-3.05216908454895, rank=7, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.6914281249046326, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.022183140739798546, rank=1, decoded_token=None)
For token 7041, log_prob: Logprob(logprob=-3.9680607318878174, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3262915313243866, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2028698921203613, rank=1, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-0.6208716034889221, rank=1, decoded_token=None)
For token 389, log_prob: Logprob(logprob=-2.077561855316162, rank=3, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-1.246550440788269, rank=2, decoded_token=None)
For token 2128, log_prob: Logprob(logprob=-0.10005613416433334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.14739106595516205, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-2.883037567138672, rank=4, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-1.1887978315353394, rank=2, decoded_token=None)
For token 12722, log_prob: Logprob(logprob=-4.796601295471191, rank=9, decoded_token=None)
For token 15100, log_prob: Logprob(logprob=-4.097357749938965, rank=7, decoded_token=None)
For token 1268, log_prob: Logprob(logprob=-0.9826016426086426, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.8719936609268188, rank=3, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-1.8892854452133179, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.10686607658863068, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.29455244541168213, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.010281220078468323, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.8527332544326782, rank=1, decoded_token=None)
For token 4460, log_prob: Logprob(logprob=-3.4623050689697266, rank=3, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-1.0008432865142822, rank=2, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.03988252580165863, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002444852376356721, rank=1, decoded_token=None)
For token 2758, log_prob: Logprob(logprob=-3.4538803100585938, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.37787938117980957, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.939903974533081, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.39280885457992554, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.3244531154632568, rank=2, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.10098931938409805, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.7775647640228271, rank=2, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.4539406895637512, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.811513423919678, rank=4, decoded_token=None)
For token 1758, log_prob: Logprob(logprob=-0.7816817164421082, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.9299181699752808, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.44691434502601624, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0014972201315686107, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001538873475510627, rank=1, decoded_token=None)
For token 64002, log_prob: Logprob(logprob=-2.5435791015625, rank=3, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04151042550802231, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.13028867542743683, rank=1, decoded_token=None)
For token 555, log_prob: Logprob(logprob=-0.033352263271808624, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.004435819108039141, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.01422715000808239, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.0882897675037384, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.06284724175930023, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.23540009558200836, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-0.04173900932073593, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.009144803509116173, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.061586808413267136, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013944911770522594, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010585224663373083, rank=1, decoded_token=None)
For token 72159, log_prob: Logprob(logprob=-1.4160566329956055, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021862106397747993, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.14335329830646515, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-5.759881019592285, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005048384889960289, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.10374521464109421, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.17173078656196594, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.02425275556743145, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.045896414667367935, rank=1, decoded_token=None)
For token 3965, log_prob: Logprob(logprob=-0.1629486083984375, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.11125016212463379, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.008519258350133896, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002081372309476137, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00037245964631438255, rank=1, decoded_token=None)
For token 94310, log_prob: Logprob(logprob=-0.7335497140884399, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.02491365373134613, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5532340407371521, rank=1, decoded_token=None)
For token 505, log_prob: Logprob(logprob=-0.10938028991222382, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.010903777554631233, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.055021319538354874, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.02717730961740017, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.014209168031811714, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04492345079779625, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.008596202358603477, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.019180072471499443, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.05701299384236336, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.0044067418202757835, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0004991239402443171, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.3356616497039795, rank=3, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.2321207970380783, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-1.9457459449768066, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-5.169647216796875, rank=25, decoded_token=None)
For token 31878, log_prob: Logprob(logprob=-1.6065828800201416, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.7340887784957886, rank=1, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-8.43447208404541, rank=182, decoded_token=None)
For token 2204, log_prob: Logprob(logprob=-2.5959243774414062, rank=2, decoded_token=None)
For token 8146, log_prob: Logprob(logprob=-5.7852783203125, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.028130831196904182, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-4.079294681549072, rank=13, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.363671213388443, rank=1, decoded_token=None)
For token 2435, log_prob: Logprob(logprob=-4.852097988128662, rank=13, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.3592950105667114, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.8471036553382874, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-4.368374824523926, rank=20, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-4.802444934844971, rank=13, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.16641685366630554, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-2.103876829147339, rank=2, decoded_token=None)
For token 1933, log_prob: Logprob(logprob=-0.12087968736886978, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-3.4264016151428223, rank=5, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-7.156714916229248, rank=17, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.11071085929870605, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-2.5686776638031006, rank=5, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.808468818664551, rank=3, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.08335965126752853, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.6839105486869812, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.7509100437164307, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-2.0333144664764404, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-3.4627275466918945, rank=6, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.025303103029727936, rank=1, decoded_token=None)
For token 706, log_prob: Logprob(logprob=-0.38641905784606934, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.6944231986999512, rank=2, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.2304867058992386, rank=1, decoded_token=None)
For token 649, log_prob: Logprob(logprob=-2.619453191757202, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.055597249418497086, rank=1, decoded_token=None)
For token 1766, log_prob: Logprob(logprob=-2.600069999694824, rank=4, decoded_token=None)
For token 1701, log_prob: Logprob(logprob=-2.2944202423095703, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.4182531535625458, rank=1, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-3.653362512588501, rank=7, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-4.6120195388793945, rank=15, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.18519794940948486, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.9661778211593628, rank=2, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-0.45861148834228516, rank=1, decoded_token=None)
For token 25800, log_prob: Logprob(logprob=-3.94254732131958, rank=9, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.1716657280921936, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.07201958447694778, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-2.19677996635437, rank=3, decoded_token=None)
For token 2650, log_prob: Logprob(logprob=-2.998732566833496, rank=3, decoded_token=None)
For token 1690, log_prob: Logprob(logprob=-0.08345484733581543, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.7078306674957275, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.1414029747247696, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-0.18299917876720428, rank=1, decoded_token=None)
For token 1587, log_prob: Logprob(logprob=-0.9597219228744507, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.0231848806142807, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.0032851321157068014, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-0.10467099398374557, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.15210722386837006, rank=1, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.03904413804411888, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.10596451908349991, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.08106350153684616, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002707508159801364, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.022244233638048172, rank=1, decoded_token=None)
For token 25541, log_prob: Logprob(logprob=-10.945005416870117, rank=916, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.6583459973335266, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0010521834483370185, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001486429391661659, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0014629386132583022, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-4.006361961364746, rank=7, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.023395448923110962, rank=1, decoded_token=None)
For token 21129, log_prob: Logprob(logprob=-5.530216217041016, rank=44, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00830328743904829, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0003693613689392805, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013433984713628888, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0016192194307222962, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.299423933029175, rank=2, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.006571113597601652, rank=1, decoded_token=None)
For token 24599, log_prob: Logprob(logprob=-6.174839973449707, rank=81, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.004514620639383793, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0005022218101657927, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002609150833450258, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.003974872175604105, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-2.5288949012756348, rank=3, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0012215065071359277, rank=1, decoded_token=None)
For token 5154, log_prob: Logprob(logprob=-5.727021217346191, rank=71, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.49432677030563354, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.005106738768517971, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.000403084559366107, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0903244018554688, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.23497126996517181, rank=1, decoded_token=None)
For token 23956, log_prob: Logprob(logprob=-3.718066692352295, rank=5, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-2.335458755493164, rank=3, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-1.303149938583374, rank=1, decoded_token=None)
For token 13890, log_prob: Logprob(logprob=-0.3004732131958008, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.004260392393916845, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5732686519622803, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.590839147567749, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-3.827090263366699, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.22617821395397186, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-3.2456188201904297, rank=8, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.9588005542755127, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.026078294962644577, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0019421778852120042, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.9211294651031494, rank=2, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3348463177680969, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7776240110397339, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01911025308072567, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.888803005218506, rank=6, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.054509516805410385, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7908403277397156, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-1.7093759775161743, rank=2, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-4.15236234664917, rank=6, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.05701907351613045, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006355076562613249, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.6023101806640625, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.06791981309652328, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0033156678546220064, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002029928145930171, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.5973119735717773, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3241466283798218, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.18300116062164307, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.11992660909891129, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2516236305236816, rank=4, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.24058884382247925, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-4.195656776428223, rank=3, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.4392582178115845, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.5084874629974365, rank=3, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.012086370028555393, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.020088670775294304, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-1.0653190612792969, rank=1, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.1461433619260788, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013424679636955261, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013040646445006132, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.36163878440856934, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.1781444400548935, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.15448440611362457, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.06548036634922028, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.4418625831604004, rank=3, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.10001654922962189, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-0.7548537254333496, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.39578503370285034, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5675726532936096, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.03172972798347473, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.059371717274188995, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-1.1219673156738281, rank=2, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.014431270770728588, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0009012927766889334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00019727191829588264, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.1902770847082138, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.08072244375944138, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.11521956324577332, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.035654667764902115, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-0.6550530791282654, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.02330426312983036, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-4.384681224822998, rank=4, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.05364048480987549, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.8038601875305176, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.02270464599132538, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.002600504318252206, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-4.947210788726807, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.018018605187535286, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004600179847329855, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0003252692404203117, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0266454219818115, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.1865871399641037, rank=1, decoded_token=None)
For token 11874, log_prob: Logprob(logprob=-5.230022430419922, rank=13, decoded_token=None)
For token 4459, log_prob: Logprob(logprob=-7.015143394470215, rank=127, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.7234127521514893, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.3753688335418701, rank=2, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.5622481107711792, rank=1, decoded_token=None)
For token 3325, log_prob: Logprob(logprob=-9.274701118469238, rank=39, decoded_token=None)
For token 4279, log_prob: Logprob(logprob=-0.061525940895080566, rank=1, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-0.4941194951534271, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.19108332693576813, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.023351196199655533, rank=1, decoded_token=None)
For token 1399, log_prob: Logprob(logprob=-3.965664863586426, rank=14, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.08888546377420425, rank=1, decoded_token=None)
For token 9062, log_prob: Logprob(logprob=-5.069382190704346, rank=12, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.7112465500831604, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.34662938117980957, rank=1, decoded_token=None)
For token 2753, log_prob: Logprob(logprob=-2.481574535369873, rank=3, decoded_token=None)
For token 1109, log_prob: Logprob(logprob=-0.003997075371444225, rank=1, decoded_token=None)
For token 477, log_prob: Logprob(logprob=-2.8801045417785645, rank=3, decoded_token=None)
For token 6273, log_prob: Logprob(logprob=-0.014255120418965816, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.005616360809653997, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.09136494249105453, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-5.171558380126953, rank=29, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.15463751554489136, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-1.5059852600097656, rank=2, decoded_token=None)
For token 12474, log_prob: Logprob(logprob=-2.703284740447998, rank=4, decoded_token=None)
For token 4279, log_prob: Logprob(logprob=-0.6892966032028198, rank=1, decoded_token=None)
For token 8331, log_prob: Logprob(logprob=-0.40075385570526123, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.16614307463169098, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.3330661356449127, rank=1, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-0.18814654648303986, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.29503315687179565, rank=1, decoded_token=None)
For token 285, log_prob: Logprob(logprob=-9.537616729736328, rank=40, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.0424995422363281, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.0103116035461426, rank=3, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.1927359402179718, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-1.1282888650894165, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-1.897783637046814, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.0834796354174614, rank=1, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-0.31044304370880127, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.7018356919288635, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.08656797558069229, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.015342078171670437, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.001342110801488161, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.03845331445336342, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.8961074352264404, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.24604052305221558, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.00525154173374176, rank=1, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.31360125541687, rank=3, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.022651156410574913, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0009365463047288358, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-7.247662142617628e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.004892876371741295, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.138803005218506, rank=7, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.030544022098183632, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.001689555705524981, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-1.276960015296936, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.001290561049245298, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.00033408781746402383, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-6.282132380874828e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005520693026483059, rank=1, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.951915740966797, rank=7, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.003568592481315136, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.001328301033936441, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-0.7559362053871155, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0010598048102110624, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.00035744477645494044, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001752223033690825, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.015477659180760384, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-2.1781153678894043, rank=3, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.0018874465022236109, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0009585791267454624, rank=1, decoded_token=None)
For token 868, log_prob: Logprob(logprob=-2.1975910663604736, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.022958656772971153, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.00263795698992908, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0005277194431982934, rank=1, decoded_token=None)
For token 362, log_prob: Logprob(logprob=-1.0764647722244263, rank=1, decoded_token=None)
tokens length:  528
output logprobs length:  528
ctxlen:  527
For token 791, log_prob: Logprob(logprob=-3.6213459968566895, rank=4, decoded_token=None)
For token 2768, log_prob: Logprob(logprob=-4.259817600250244, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-2.991230010986328, rank=3, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-9.332494735717773, rank=699, decoded_token=None)
For token 5873, log_prob: Logprob(logprob=-1.0538994073867798, rank=1, decoded_token=None)
For token 4860, log_prob: Logprob(logprob=-0.15532542765140533, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.4161324501037598, rank=9, decoded_token=None)
For token 4291, log_prob: Logprob(logprob=-3.5592703819274902, rank=2, decoded_token=None)
For token 11503, log_prob: Logprob(logprob=-0.9168203473091125, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.4131229519844055, rank=1, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.8898773193359375, rank=4, decoded_token=None)
For token 36256, log_prob: Logprob(logprob=-8.741050720214844, rank=635, decoded_token=None)
For token 38696, log_prob: Logprob(logprob=-3.7625539302825928, rank=8, decoded_token=None)
For token 382, log_prob: Logprob(logprob=-5.573415279388428, rank=19, decoded_token=None)
For token 791, log_prob: Logprob(logprob=-3.544070243835449, rank=4, decoded_token=None)
For token 7187, log_prob: Logprob(logprob=-7.385589122772217, rank=164, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.11412940919399261, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.8478307723999023, rank=2, decoded_token=None)
For token 3363, log_prob: Logprob(logprob=-1.8618664741516113, rank=1, decoded_token=None)
For token 1405, log_prob: Logprob(logprob=-5.9992265701293945, rank=13, decoded_token=None)
For token 33126, log_prob: Logprob(logprob=-9.025006294250488, rank=320, decoded_token=None)
For token 574, log_prob: Logprob(logprob=-5.349676132202148, rank=8, decoded_token=None)
For token 9405, log_prob: Logprob(logprob=-0.4107400178909302, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.5750153660774231, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.7413759231567383, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-7.208454132080078, rank=134, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.7163258790969849, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-8.746551513671875, rank=551, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.46054989099502563, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-4.115103721618652, rank=8, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.2959842085838318, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.1604301482439041, rank=1, decoded_token=None)
For token 907, log_prob: Logprob(logprob=-5.730544567108154, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.036400843411684036, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.9913142323493958, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.306947708129883, rank=14, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.463329553604126, rank=3, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-6.80005407333374, rank=33, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.502928614616394, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.8077549934387207, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.794535756111145, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-0.4624699354171753, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.35287705063819885, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-0.04949808493256569, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-3.705009937286377, rank=5, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.00704288482666, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.2554558217525482, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.19919312000274658, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.9839682579040527, rank=1, decoded_token=None)
For token 9214, log_prob: Logprob(logprob=-7.269443511962891, rank=42, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.3192760646343231, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0035969815216958523, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0006814065272919834, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021883098408579826, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.1909081935882568, rank=1, decoded_token=None)
For token 11758, log_prob: Logprob(logprob=-1.8936516046524048, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00804623682051897, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.001649211160838604, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000596107158344239, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006301296874880791, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.09370359778404236, rank=1, decoded_token=None)
For token 22781, log_prob: Logprob(logprob=-0.7115755081176758, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.007358944974839687, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002253137994557619, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000610999355558306, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.019312677904963493, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.06189332529902458, rank=1, decoded_token=None)
For token 6305, log_prob: Logprob(logprob=-0.6310369372367859, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.25910231471061707, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.9596242904663086, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.060119159519672394, rank=1, decoded_token=None)
For token 362, log_prob: Logprob(logprob=-1.2652478218078613, rank=2, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-1.2315428256988525, rank=2, decoded_token=None)
For token 43819, log_prob: Logprob(logprob=-12.279776573181152, rank=2720, decoded_token=None)
For token 21475, log_prob: Logprob(logprob=-0.6679940819740295, rank=1, decoded_token=None)
For token 1511, log_prob: Logprob(logprob=-6.589616775512695, rank=49, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.3157753944396973, rank=3, decoded_token=None)
For token 6037, log_prob: Logprob(logprob=-6.093387603759766, rank=53, decoded_token=None)
For token 330, log_prob: Logprob(logprob=-3.6796159744262695, rank=9, decoded_token=None)
For token 2261, log_prob: Logprob(logprob=-4.342022895812988, rank=15, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.6981703042984009, rank=1, decoded_token=None)
For token 806, log_prob: Logprob(logprob=-4.951969146728516, rank=18, decoded_token=None)
For token 1, log_prob: Logprob(logprob=-1.3567357063293457, rank=2, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.559495747089386, rank=1, decoded_token=None)
For token 1893, log_prob: Logprob(logprob=-6.321759223937988, rank=44, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-1.3698585033416748, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3447837829589844, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-6.439241409301758, rank=23, decoded_token=None)
For token 6982, log_prob: Logprob(logprob=-3.0471701622009277, rank=5, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-0.703130304813385, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.47134995460510254, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.5008544921875, rank=9, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-4.440498352050781, rank=13, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.9463624954223633, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.14101086556911469, rank=1, decoded_token=None)
For token 1691, log_prob: Logprob(logprob=-0.807411789894104, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0075277951546013355, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01632852479815483, rank=1, decoded_token=None)
For token 843, log_prob: Logprob(logprob=-0.12699167430400848, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.03602903336286545, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2054326832294464, rank=1, decoded_token=None)
For token 3391, log_prob: Logprob(logprob=-0.025190236046910286, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.08179139345884323, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3728283941745758, rank=1, decoded_token=None)
For token 4370, log_prob: Logprob(logprob=-0.015932045876979828, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-9.9160795211792, rank=121, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-4.163404941558838, rank=8, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.451625347137451, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.517742395401001, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.110421895980835, rank=3, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.476434588432312, rank=2, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.23249292373657227, rank=1, decoded_token=None)
For token 837, log_prob: Logprob(logprob=-0.6536205410957336, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.36460936069488525, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.07394429296255112, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.009883278980851173, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.6059339046478271, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-2.450810432434082, rank=5, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.049487829208374, rank=2, decoded_token=None)
For token 339, log_prob: Logprob(logprob=-0.6980368494987488, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.139958381652832, rank=2, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.1722527742385864, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.015046435408294201, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.19619299471378326, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.604534864425659, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.20953349769115448, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-4.28965425491333, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.45435839891433716, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.02163873240351677, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.2181992381811142, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.001948483637534082, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0003895000845659524, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.05843179672956467, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.4078903198242188, rank=4, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.5167269706726074, rank=4, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.789426326751709, rank=1, decoded_token=None)
For token 2646, log_prob: Logprob(logprob=-3.07065749168396, rank=8, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-2.406424045562744, rank=3, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.64980149269104, rank=7, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-2.804396629333496, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.07326694577932358, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-3.0780837535858154, rank=4, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.01376998983323574, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-0.044610776007175446, rank=1, decoded_token=None)
For token 1023, log_prob: Logprob(logprob=-0.0030948857311159372, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.03554227203130722, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.011711414903402328, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00024434918304905295, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.1415383219718933, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-5.144501686096191, rank=9, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.4923019409179688, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.1131657212972641, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.29162850975990295, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.007929631508886814, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.020741933956742287, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.09790364652872086, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.5009815692901611, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-3.012348175048828, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.7491417527198792, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.07769384235143661, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-7.595197677612305, rank=29, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.1537325382232666, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.010177383199334145, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.005346049088984728, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.0328480489552021, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.024808069691061974, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00047052756417542696, rank=1, decoded_token=None)
For token 1442, log_prob: Logprob(logprob=-4.929317474365234, rank=7, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.5717543363571167, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3725956678390503, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.2139285802841187, rank=1, decoded_token=None)
For token 3940, log_prob: Logprob(logprob=-4.185582160949707, rank=14, decoded_token=None)
For token 449, log_prob: Logprob(logprob=-0.05743381381034851, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.9012429714202881, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.6468750238418579, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.008982133120298386, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-2.8201804161071777, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.6609485149383545, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.6036994457244873, rank=3, decoded_token=None)
For token 1053, log_prob: Logprob(logprob=-2.095855951309204, rank=2, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-3.041916847229004, rank=6, decoded_token=None)
For token 1193, log_prob: Logprob(logprob=-3.4329066276550293, rank=7, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.34858348965644836, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.016673851758241653, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-2.831927537918091, rank=2, decoded_token=None)
For token 433, log_prob: Logprob(logprob=-0.3648470342159271, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.21367542445659637, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.02570355497300625, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0026745761279016733, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.1849979162216187, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.18910124897956848, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.310189723968506, rank=2, decoded_token=None)
For token 2860, log_prob: Logprob(logprob=-5.869146347045898, rank=56, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.027346676215529442, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2362522929906845, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-4.086330413818359, rank=4, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-6.07204008102417, rank=49, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.5300240516662598, rank=7, decoded_token=None)
For token 1514, log_prob: Logprob(logprob=-1.5933805704116821, rank=2, decoded_token=None)
For token 19794, log_prob: Logprob(logprob=-4.322381496429443, rank=6, decoded_token=None)
For token 520, log_prob: Logprob(logprob=-2.5797297954559326, rank=4, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.8274871110916138, rank=1, decoded_token=None)
For token 6246, log_prob: Logprob(logprob=-5.394405841827393, rank=25, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.8071932196617126, rank=1, decoded_token=None)
For token 2684, log_prob: Logprob(logprob=-3.05216908454895, rank=7, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.6914281249046326, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.022183140739798546, rank=1, decoded_token=None)
For token 7041, log_prob: Logprob(logprob=-3.9680607318878174, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3262915313243866, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2028698921203613, rank=1, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-0.6208716034889221, rank=1, decoded_token=None)
For token 389, log_prob: Logprob(logprob=-2.077561855316162, rank=3, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-1.246550440788269, rank=2, decoded_token=None)
For token 2128, log_prob: Logprob(logprob=-0.10005613416433334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.14739106595516205, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-2.883037567138672, rank=4, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-1.1887978315353394, rank=2, decoded_token=None)
For token 12722, log_prob: Logprob(logprob=-4.796601295471191, rank=9, decoded_token=None)
For token 15100, log_prob: Logprob(logprob=-4.097357749938965, rank=7, decoded_token=None)
For token 1268, log_prob: Logprob(logprob=-0.9826016426086426, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.8719936609268188, rank=3, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-1.8892854452133179, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.10686607658863068, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.29455244541168213, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.010281220078468323, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.8527332544326782, rank=1, decoded_token=None)
For token 4460, log_prob: Logprob(logprob=-3.4623050689697266, rank=3, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-1.0008432865142822, rank=2, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.03988252580165863, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002444852376356721, rank=1, decoded_token=None)
For token 2758, log_prob: Logprob(logprob=-3.4538803100585938, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.37787938117980957, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.939903974533081, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.39280885457992554, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.3244531154632568, rank=2, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.10098931938409805, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.7775647640228271, rank=2, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.4539406895637512, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.811513423919678, rank=4, decoded_token=None)
For token 1758, log_prob: Logprob(logprob=-0.7816817164421082, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.9299181699752808, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.44691434502601624, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0014972201315686107, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001538873475510627, rank=1, decoded_token=None)
For token 64002, log_prob: Logprob(logprob=-2.5435791015625, rank=3, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04151042550802231, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.13028867542743683, rank=1, decoded_token=None)
For token 555, log_prob: Logprob(logprob=-0.033352263271808624, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.004435819108039141, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.01422715000808239, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.0882897675037384, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.06284724175930023, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.23540009558200836, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-0.04173900932073593, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.009144803509116173, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.061586808413267136, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013944911770522594, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010585224663373083, rank=1, decoded_token=None)
For token 72159, log_prob: Logprob(logprob=-1.4160566329956055, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021862106397747993, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.14335329830646515, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-5.759881019592285, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005048384889960289, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.10374521464109421, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.17173078656196594, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.02425275556743145, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.045896414667367935, rank=1, decoded_token=None)
For token 3965, log_prob: Logprob(logprob=-0.1629486083984375, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.11125016212463379, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.008519258350133896, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002081372309476137, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00037245964631438255, rank=1, decoded_token=None)
For token 94310, log_prob: Logprob(logprob=-0.7335497140884399, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.02491365373134613, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5532340407371521, rank=1, decoded_token=None)
For token 505, log_prob: Logprob(logprob=-0.10938028991222382, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.010903777554631233, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.055021319538354874, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.02717730961740017, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.014209168031811714, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04492345079779625, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.008596202358603477, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.019180072471499443, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.05701299384236336, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.0044067418202757835, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0004991239402443171, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.3356616497039795, rank=3, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.2321207970380783, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-1.9457459449768066, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-5.169647216796875, rank=25, decoded_token=None)
For token 31878, log_prob: Logprob(logprob=-1.6065828800201416, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.7340887784957886, rank=1, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-8.43447208404541, rank=182, decoded_token=None)
For token 2204, log_prob: Logprob(logprob=-2.5959243774414062, rank=2, decoded_token=None)
For token 8146, log_prob: Logprob(logprob=-5.7852783203125, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.028130831196904182, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-4.079294681549072, rank=13, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.363671213388443, rank=1, decoded_token=None)
For token 2435, log_prob: Logprob(logprob=-4.852097988128662, rank=13, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.3592950105667114, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.8471036553382874, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-4.368374824523926, rank=20, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-4.802444934844971, rank=13, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.16641685366630554, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-2.103876829147339, rank=2, decoded_token=None)
For token 1933, log_prob: Logprob(logprob=-0.12087968736886978, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-3.4264016151428223, rank=5, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-7.156714916229248, rank=17, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.11071085929870605, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-2.5686776638031006, rank=5, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.808468818664551, rank=3, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.08335965126752853, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.6839105486869812, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.7509100437164307, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-2.0333144664764404, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-3.4627275466918945, rank=6, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.025303103029727936, rank=1, decoded_token=None)
For token 706, log_prob: Logprob(logprob=-0.38641905784606934, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.6944231986999512, rank=2, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.2304867058992386, rank=1, decoded_token=None)
For token 649, log_prob: Logprob(logprob=-2.619453191757202, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.055597249418497086, rank=1, decoded_token=None)
For token 1766, log_prob: Logprob(logprob=-2.600069999694824, rank=4, decoded_token=None)
For token 1701, log_prob: Logprob(logprob=-2.2944202423095703, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.4182531535625458, rank=1, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-3.653362512588501, rank=7, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-4.6120195388793945, rank=15, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.18519794940948486, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.9661778211593628, rank=2, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-0.45861148834228516, rank=1, decoded_token=None)
For token 25800, log_prob: Logprob(logprob=-3.94254732131958, rank=9, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.1716657280921936, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.07201958447694778, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-2.19677996635437, rank=3, decoded_token=None)
For token 2650, log_prob: Logprob(logprob=-2.998732566833496, rank=3, decoded_token=None)
For token 1690, log_prob: Logprob(logprob=-0.08345484733581543, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.7078306674957275, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.1414029747247696, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-0.18299917876720428, rank=1, decoded_token=None)
For token 1587, log_prob: Logprob(logprob=-0.9597219228744507, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.0231848806142807, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.0032851321157068014, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-0.10467099398374557, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.15210722386837006, rank=1, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.03904413804411888, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.10596451908349991, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.08106350153684616, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002707508159801364, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.022244233638048172, rank=1, decoded_token=None)
For token 25541, log_prob: Logprob(logprob=-10.945005416870117, rank=916, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.6583459973335266, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0010521834483370185, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001486429391661659, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0014629386132583022, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-4.006361961364746, rank=7, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.023395448923110962, rank=1, decoded_token=None)
For token 21129, log_prob: Logprob(logprob=-5.530216217041016, rank=44, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00830328743904829, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0003693613689392805, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013433984713628888, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0016192194307222962, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.299423933029175, rank=2, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.006571113597601652, rank=1, decoded_token=None)
For token 24599, log_prob: Logprob(logprob=-6.174839973449707, rank=81, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.004514620639383793, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0005022218101657927, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002609150833450258, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.003974872175604105, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-2.5288949012756348, rank=3, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0012215065071359277, rank=1, decoded_token=None)
For token 5154, log_prob: Logprob(logprob=-5.727021217346191, rank=71, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.49432677030563354, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.005106738768517971, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.000403084559366107, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0903244018554688, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.23497126996517181, rank=1, decoded_token=None)
For token 23956, log_prob: Logprob(logprob=-3.718066692352295, rank=5, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-2.335458755493164, rank=3, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-1.303149938583374, rank=1, decoded_token=None)
For token 13890, log_prob: Logprob(logprob=-0.3004732131958008, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.004260392393916845, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5732686519622803, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.590839147567749, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-3.827090263366699, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.22617821395397186, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-3.2456188201904297, rank=8, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.9588005542755127, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.026078294962644577, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0019421778852120042, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.9211294651031494, rank=2, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3348463177680969, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7776240110397339, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01911025308072567, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.888803005218506, rank=6, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.054509516805410385, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7908403277397156, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-1.7093759775161743, rank=2, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-4.15236234664917, rank=6, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.05701907351613045, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006355076562613249, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.6023101806640625, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.06791981309652328, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0033156678546220064, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002029928145930171, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.5973119735717773, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3241466283798218, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.18300116062164307, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.11992660909891129, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2516236305236816, rank=4, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.24058884382247925, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-4.195656776428223, rank=3, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.4392582178115845, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.5084874629974365, rank=3, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.012086370028555393, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.020088670775294304, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-1.0653190612792969, rank=1, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.1461433619260788, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013424679636955261, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013040646445006132, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.36163878440856934, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.1781444400548935, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.15448440611362457, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.06548036634922028, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.4418625831604004, rank=3, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.10001654922962189, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-0.7548537254333496, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.39578503370285034, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5675726532936096, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.03172972798347473, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.059371717274188995, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-1.1219673156738281, rank=2, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.014431270770728588, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0009012927766889334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00019727191829588264, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.1902770847082138, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.08072244375944138, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.11521956324577332, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.035654667764902115, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-0.6550530791282654, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.02330426312983036, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-4.384681224822998, rank=4, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.05364048480987549, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.8038601875305176, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.02270464599132538, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.002600504318252206, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-4.947210788726807, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.018018605187535286, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004600179847329855, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0003252692404203117, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0266454219818115, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.1865871399641037, rank=1, decoded_token=None)
For token 11874, log_prob: Logprob(logprob=-5.230022430419922, rank=13, decoded_token=None)
For token 4459, log_prob: Logprob(logprob=-7.015143394470215, rank=127, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.7234127521514893, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.3753688335418701, rank=2, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.5622481107711792, rank=1, decoded_token=None)
For token 3325, log_prob: Logprob(logprob=-9.274701118469238, rank=39, decoded_token=None)
For token 4279, log_prob: Logprob(logprob=-0.061525940895080566, rank=1, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-0.4941194951534271, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.19108332693576813, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.023351196199655533, rank=1, decoded_token=None)
For token 1399, log_prob: Logprob(logprob=-3.965664863586426, rank=14, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.08888546377420425, rank=1, decoded_token=None)
For token 9062, log_prob: Logprob(logprob=-5.069382190704346, rank=12, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.7112465500831604, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.34662938117980957, rank=1, decoded_token=None)
For token 2753, log_prob: Logprob(logprob=-2.481574535369873, rank=3, decoded_token=None)
For token 1109, log_prob: Logprob(logprob=-0.003997075371444225, rank=1, decoded_token=None)
For token 477, log_prob: Logprob(logprob=-2.8801045417785645, rank=3, decoded_token=None)
For token 6273, log_prob: Logprob(logprob=-0.014255120418965816, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.005616360809653997, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.09136494249105453, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-5.171558380126953, rank=29, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.15463751554489136, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-1.5059852600097656, rank=2, decoded_token=None)
For token 12474, log_prob: Logprob(logprob=-2.703284740447998, rank=4, decoded_token=None)
For token 4279, log_prob: Logprob(logprob=-0.6892966032028198, rank=1, decoded_token=None)
For token 8331, log_prob: Logprob(logprob=-0.40075385570526123, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.16614307463169098, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.3330661356449127, rank=1, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-0.18814654648303986, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.29503315687179565, rank=1, decoded_token=None)
For token 285, log_prob: Logprob(logprob=-9.537616729736328, rank=40, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.0424995422363281, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.0103116035461426, rank=3, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.1927359402179718, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-1.1282888650894165, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-1.897783637046814, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.0834796354174614, rank=1, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-0.31044304370880127, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.7018356919288635, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.08656797558069229, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.015342078171670437, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.001342110801488161, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.03845331445336342, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.8961074352264404, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.24604052305221558, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.00525154173374176, rank=1, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.31360125541687, rank=3, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.022651156410574913, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0009365463047288358, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-7.247662142617628e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.004892876371741295, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.138803005218506, rank=7, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.030544022098183632, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.001689555705524981, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-1.276960015296936, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.001290561049245298, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.00033408781746402383, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-6.282132380874828e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005520693026483059, rank=1, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.951915740966797, rank=7, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.003568592481315136, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.001328301033936441, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-0.7559362053871155, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0010598048102110624, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.00035744477645494044, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001752223033690825, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.015477659180760384, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-2.1781153678894043, rank=3, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.0018874465022236109, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0009585791267454624, rank=1, decoded_token=None)
For token 868, log_prob: Logprob(logprob=-2.1975910663604736, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.022958656772971153, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.00263795698992908, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0005277194431982934, rank=1, decoded_token=None)
For token 423, log_prob: Logprob(logprob=-2.2014646530151367, rank=4, decoded_token=None)
tokens length:  528
output logprobs length:  528
ctxlen:  527
For token 791, log_prob: Logprob(logprob=-3.6213459968566895, rank=4, decoded_token=None)
For token 2768, log_prob: Logprob(logprob=-4.259817600250244, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-2.991230010986328, rank=3, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-9.332494735717773, rank=699, decoded_token=None)
For token 5873, log_prob: Logprob(logprob=-1.0538994073867798, rank=1, decoded_token=None)
For token 4860, log_prob: Logprob(logprob=-0.15532542765140533, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.4161324501037598, rank=9, decoded_token=None)
For token 4291, log_prob: Logprob(logprob=-3.5592703819274902, rank=2, decoded_token=None)
For token 11503, log_prob: Logprob(logprob=-0.9168203473091125, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.4131229519844055, rank=1, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.8898773193359375, rank=4, decoded_token=None)
For token 36256, log_prob: Logprob(logprob=-8.741050720214844, rank=635, decoded_token=None)
For token 38696, log_prob: Logprob(logprob=-3.7625539302825928, rank=8, decoded_token=None)
For token 382, log_prob: Logprob(logprob=-5.573415279388428, rank=19, decoded_token=None)
For token 791, log_prob: Logprob(logprob=-3.544070243835449, rank=4, decoded_token=None)
For token 7187, log_prob: Logprob(logprob=-7.385589122772217, rank=164, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.11412940919399261, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.8478307723999023, rank=2, decoded_token=None)
For token 3363, log_prob: Logprob(logprob=-1.8618664741516113, rank=1, decoded_token=None)
For token 1405, log_prob: Logprob(logprob=-5.9992265701293945, rank=13, decoded_token=None)
For token 33126, log_prob: Logprob(logprob=-9.025006294250488, rank=320, decoded_token=None)
For token 574, log_prob: Logprob(logprob=-5.349676132202148, rank=8, decoded_token=None)
For token 9405, log_prob: Logprob(logprob=-0.4107400178909302, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.5750153660774231, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.7413759231567383, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-7.208454132080078, rank=134, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.7163258790969849, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-8.746551513671875, rank=551, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.46054989099502563, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-4.115103721618652, rank=8, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.2959842085838318, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.1604301482439041, rank=1, decoded_token=None)
For token 907, log_prob: Logprob(logprob=-5.730544567108154, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.036400843411684036, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.9913142323493958, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.306947708129883, rank=14, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.463329553604126, rank=3, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-6.80005407333374, rank=33, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.502928614616394, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.8077549934387207, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.794535756111145, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-0.4624699354171753, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.35287705063819885, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-0.04949808493256569, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-3.705009937286377, rank=5, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.00704288482666, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.2554558217525482, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.19919312000274658, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.9839682579040527, rank=1, decoded_token=None)
For token 9214, log_prob: Logprob(logprob=-7.269443511962891, rank=42, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.3192760646343231, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0035969815216958523, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0006814065272919834, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021883098408579826, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.1909081935882568, rank=1, decoded_token=None)
For token 11758, log_prob: Logprob(logprob=-1.8936516046524048, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00804623682051897, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.001649211160838604, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000596107158344239, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006301296874880791, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.09370359778404236, rank=1, decoded_token=None)
For token 22781, log_prob: Logprob(logprob=-0.7115755081176758, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.007358944974839687, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002253137994557619, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000610999355558306, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.019312677904963493, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.06189332529902458, rank=1, decoded_token=None)
For token 6305, log_prob: Logprob(logprob=-0.6310369372367859, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.25910231471061707, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.9596242904663086, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.060119159519672394, rank=1, decoded_token=None)
For token 362, log_prob: Logprob(logprob=-1.2652478218078613, rank=2, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-1.2315428256988525, rank=2, decoded_token=None)
For token 43819, log_prob: Logprob(logprob=-12.279776573181152, rank=2720, decoded_token=None)
For token 21475, log_prob: Logprob(logprob=-0.6679940819740295, rank=1, decoded_token=None)
For token 1511, log_prob: Logprob(logprob=-6.589616775512695, rank=49, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.3157753944396973, rank=3, decoded_token=None)
For token 6037, log_prob: Logprob(logprob=-6.093387603759766, rank=53, decoded_token=None)
For token 330, log_prob: Logprob(logprob=-3.6796159744262695, rank=9, decoded_token=None)
For token 2261, log_prob: Logprob(logprob=-4.342022895812988, rank=15, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.6981703042984009, rank=1, decoded_token=None)
For token 806, log_prob: Logprob(logprob=-4.951969146728516, rank=18, decoded_token=None)
For token 1, log_prob: Logprob(logprob=-1.3567357063293457, rank=2, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.559495747089386, rank=1, decoded_token=None)
For token 1893, log_prob: Logprob(logprob=-6.321759223937988, rank=44, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-1.3698585033416748, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3447837829589844, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-6.439241409301758, rank=23, decoded_token=None)
For token 6982, log_prob: Logprob(logprob=-3.0471701622009277, rank=5, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-0.703130304813385, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.47134995460510254, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.5008544921875, rank=9, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-4.440498352050781, rank=13, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.9463624954223633, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.14101086556911469, rank=1, decoded_token=None)
For token 1691, log_prob: Logprob(logprob=-0.807411789894104, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0075277951546013355, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01632852479815483, rank=1, decoded_token=None)
For token 843, log_prob: Logprob(logprob=-0.12699167430400848, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.03602903336286545, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2054326832294464, rank=1, decoded_token=None)
For token 3391, log_prob: Logprob(logprob=-0.025190236046910286, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.08179139345884323, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3728283941745758, rank=1, decoded_token=None)
For token 4370, log_prob: Logprob(logprob=-0.015932045876979828, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-9.9160795211792, rank=121, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-4.163404941558838, rank=8, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.451625347137451, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.517742395401001, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.110421895980835, rank=3, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.476434588432312, rank=2, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.23249292373657227, rank=1, decoded_token=None)
For token 837, log_prob: Logprob(logprob=-0.6536205410957336, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.36460936069488525, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.07394429296255112, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.009883278980851173, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.6059339046478271, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-2.450810432434082, rank=5, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.049487829208374, rank=2, decoded_token=None)
For token 339, log_prob: Logprob(logprob=-0.6980368494987488, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.139958381652832, rank=2, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.1722527742385864, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.015046435408294201, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.19619299471378326, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.604534864425659, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.20953349769115448, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-4.28965425491333, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.45435839891433716, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.02163873240351677, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.2181992381811142, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.001948483637534082, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0003895000845659524, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.05843179672956467, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.4078903198242188, rank=4, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.5167269706726074, rank=4, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.789426326751709, rank=1, decoded_token=None)
For token 2646, log_prob: Logprob(logprob=-3.07065749168396, rank=8, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-2.406424045562744, rank=3, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.64980149269104, rank=7, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-2.804396629333496, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.07326694577932358, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-3.0780837535858154, rank=4, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.01376998983323574, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-0.044610776007175446, rank=1, decoded_token=None)
For token 1023, log_prob: Logprob(logprob=-0.0030948857311159372, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.03554227203130722, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.011711414903402328, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00024434918304905295, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.1415383219718933, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-5.144501686096191, rank=9, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.4923019409179688, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.1131657212972641, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.29162850975990295, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.007929631508886814, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.020741933956742287, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.09790364652872086, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.5009815692901611, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-3.012348175048828, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.7491417527198792, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.07769384235143661, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-7.595197677612305, rank=29, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.1537325382232666, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.010177383199334145, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.005346049088984728, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.0328480489552021, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.024808069691061974, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00047052756417542696, rank=1, decoded_token=None)
For token 1442, log_prob: Logprob(logprob=-4.929317474365234, rank=7, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.5717543363571167, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3725956678390503, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.2139285802841187, rank=1, decoded_token=None)
For token 3940, log_prob: Logprob(logprob=-4.185582160949707, rank=14, decoded_token=None)
For token 449, log_prob: Logprob(logprob=-0.05743381381034851, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.9012429714202881, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.6468750238418579, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.008982133120298386, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-2.8201804161071777, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.6609485149383545, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.6036994457244873, rank=3, decoded_token=None)
For token 1053, log_prob: Logprob(logprob=-2.095855951309204, rank=2, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-3.041916847229004, rank=6, decoded_token=None)
For token 1193, log_prob: Logprob(logprob=-3.4329066276550293, rank=7, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.34858348965644836, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.016673851758241653, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-2.831927537918091, rank=2, decoded_token=None)
For token 433, log_prob: Logprob(logprob=-0.3648470342159271, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.21367542445659637, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.02570355497300625, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0026745761279016733, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.1849979162216187, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.18910124897956848, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.310189723968506, rank=2, decoded_token=None)
For token 2860, log_prob: Logprob(logprob=-5.869146347045898, rank=56, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.027346676215529442, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2362522929906845, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-4.086330413818359, rank=4, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-6.07204008102417, rank=49, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.5300240516662598, rank=7, decoded_token=None)
For token 1514, log_prob: Logprob(logprob=-1.5933805704116821, rank=2, decoded_token=None)
For token 19794, log_prob: Logprob(logprob=-4.322381496429443, rank=6, decoded_token=None)
For token 520, log_prob: Logprob(logprob=-2.5797297954559326, rank=4, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.8274871110916138, rank=1, decoded_token=None)
For token 6246, log_prob: Logprob(logprob=-5.394405841827393, rank=25, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.8071932196617126, rank=1, decoded_token=None)
For token 2684, log_prob: Logprob(logprob=-3.05216908454895, rank=7, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.6914281249046326, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.022183140739798546, rank=1, decoded_token=None)
For token 7041, log_prob: Logprob(logprob=-3.9680607318878174, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3262915313243866, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2028698921203613, rank=1, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-0.6208716034889221, rank=1, decoded_token=None)
For token 389, log_prob: Logprob(logprob=-2.077561855316162, rank=3, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-1.246550440788269, rank=2, decoded_token=None)
For token 2128, log_prob: Logprob(logprob=-0.10005613416433334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.14739106595516205, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-2.883037567138672, rank=4, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-1.1887978315353394, rank=2, decoded_token=None)
For token 12722, log_prob: Logprob(logprob=-4.796601295471191, rank=9, decoded_token=None)
For token 15100, log_prob: Logprob(logprob=-4.097357749938965, rank=7, decoded_token=None)
For token 1268, log_prob: Logprob(logprob=-0.9826016426086426, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.8719936609268188, rank=3, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-1.8892854452133179, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.10686607658863068, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.29455244541168213, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.010281220078468323, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.8527332544326782, rank=1, decoded_token=None)
For token 4460, log_prob: Logprob(logprob=-3.4623050689697266, rank=3, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-1.0008432865142822, rank=2, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.03988252580165863, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002444852376356721, rank=1, decoded_token=None)
For token 2758, log_prob: Logprob(logprob=-3.4538803100585938, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.37787938117980957, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.939903974533081, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.39280885457992554, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.3244531154632568, rank=2, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.10098931938409805, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.7775647640228271, rank=2, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.4539406895637512, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.811513423919678, rank=4, decoded_token=None)
For token 1758, log_prob: Logprob(logprob=-0.7816817164421082, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.9299181699752808, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.44691434502601624, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0014972201315686107, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001538873475510627, rank=1, decoded_token=None)
For token 64002, log_prob: Logprob(logprob=-2.5435791015625, rank=3, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04151042550802231, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.13028867542743683, rank=1, decoded_token=None)
For token 555, log_prob: Logprob(logprob=-0.033352263271808624, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.004435819108039141, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.01422715000808239, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.0882897675037384, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.06284724175930023, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.23540009558200836, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-0.04173900932073593, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.009144803509116173, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.061586808413267136, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013944911770522594, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010585224663373083, rank=1, decoded_token=None)
For token 72159, log_prob: Logprob(logprob=-1.4160566329956055, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021862106397747993, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.14335329830646515, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-5.759881019592285, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005048384889960289, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.10374521464109421, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.17173078656196594, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.02425275556743145, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.045896414667367935, rank=1, decoded_token=None)
For token 3965, log_prob: Logprob(logprob=-0.1629486083984375, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.11125016212463379, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.008519258350133896, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002081372309476137, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00037245964631438255, rank=1, decoded_token=None)
For token 94310, log_prob: Logprob(logprob=-0.7335497140884399, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.02491365373134613, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5532340407371521, rank=1, decoded_token=None)
For token 505, log_prob: Logprob(logprob=-0.10938028991222382, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.010903777554631233, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.055021319538354874, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.02717730961740017, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.014209168031811714, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04492345079779625, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.008596202358603477, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.019180072471499443, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.05701299384236336, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.0044067418202757835, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0004991239402443171, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.3356616497039795, rank=3, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.2321207970380783, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-1.9457459449768066, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-5.169647216796875, rank=25, decoded_token=None)
For token 31878, log_prob: Logprob(logprob=-1.6065828800201416, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.7340887784957886, rank=1, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-8.43447208404541, rank=182, decoded_token=None)
For token 2204, log_prob: Logprob(logprob=-2.5959243774414062, rank=2, decoded_token=None)
For token 8146, log_prob: Logprob(logprob=-5.7852783203125, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.028130831196904182, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-4.079294681549072, rank=13, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.363671213388443, rank=1, decoded_token=None)
For token 2435, log_prob: Logprob(logprob=-4.852097988128662, rank=13, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.3592950105667114, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.8471036553382874, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-4.368374824523926, rank=20, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-4.802444934844971, rank=13, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.16641685366630554, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-2.103876829147339, rank=2, decoded_token=None)
For token 1933, log_prob: Logprob(logprob=-0.12087968736886978, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-3.4264016151428223, rank=5, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-7.156714916229248, rank=17, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.11071085929870605, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-2.5686776638031006, rank=5, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.808468818664551, rank=3, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.08335965126752853, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.6839105486869812, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.7509100437164307, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-2.0333144664764404, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-3.4627275466918945, rank=6, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.025303103029727936, rank=1, decoded_token=None)
For token 706, log_prob: Logprob(logprob=-0.38641905784606934, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.6944231986999512, rank=2, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.2304867058992386, rank=1, decoded_token=None)
For token 649, log_prob: Logprob(logprob=-2.619453191757202, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.055597249418497086, rank=1, decoded_token=None)
For token 1766, log_prob: Logprob(logprob=-2.600069999694824, rank=4, decoded_token=None)
For token 1701, log_prob: Logprob(logprob=-2.2944202423095703, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.4182531535625458, rank=1, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-3.653362512588501, rank=7, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-4.6120195388793945, rank=15, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.18519794940948486, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.9661778211593628, rank=2, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-0.45861148834228516, rank=1, decoded_token=None)
For token 25800, log_prob: Logprob(logprob=-3.94254732131958, rank=9, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.1716657280921936, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.07201958447694778, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-2.19677996635437, rank=3, decoded_token=None)
For token 2650, log_prob: Logprob(logprob=-2.998732566833496, rank=3, decoded_token=None)
For token 1690, log_prob: Logprob(logprob=-0.08345484733581543, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.7078306674957275, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.1414029747247696, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-0.18299917876720428, rank=1, decoded_token=None)
For token 1587, log_prob: Logprob(logprob=-0.9597219228744507, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.0231848806142807, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.0032851321157068014, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-0.10467099398374557, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.15210722386837006, rank=1, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.03904413804411888, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.10596451908349991, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.08106350153684616, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002707508159801364, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.022244233638048172, rank=1, decoded_token=None)
For token 25541, log_prob: Logprob(logprob=-10.945005416870117, rank=916, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.6583459973335266, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0010521834483370185, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001486429391661659, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0014629386132583022, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-4.006361961364746, rank=7, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.023395448923110962, rank=1, decoded_token=None)
For token 21129, log_prob: Logprob(logprob=-5.530216217041016, rank=44, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00830328743904829, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0003693613689392805, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013433984713628888, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0016192194307222962, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.299423933029175, rank=2, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.006571113597601652, rank=1, decoded_token=None)
For token 24599, log_prob: Logprob(logprob=-6.174839973449707, rank=81, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.004514620639383793, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0005022218101657927, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002609150833450258, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.003974872175604105, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-2.5288949012756348, rank=3, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0012215065071359277, rank=1, decoded_token=None)
For token 5154, log_prob: Logprob(logprob=-5.727021217346191, rank=71, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.49432677030563354, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.005106738768517971, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.000403084559366107, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0903244018554688, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.23497126996517181, rank=1, decoded_token=None)
For token 23956, log_prob: Logprob(logprob=-3.718066692352295, rank=5, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-2.335458755493164, rank=3, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-1.303149938583374, rank=1, decoded_token=None)
For token 13890, log_prob: Logprob(logprob=-0.3004732131958008, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.004260392393916845, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5732686519622803, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.590839147567749, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-3.827090263366699, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.22617821395397186, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-3.2456188201904297, rank=8, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.9588005542755127, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.026078294962644577, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0019421778852120042, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.9211294651031494, rank=2, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3348463177680969, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7776240110397339, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01911025308072567, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.888803005218506, rank=6, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.054509516805410385, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7908403277397156, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-1.7093759775161743, rank=2, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-4.15236234664917, rank=6, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.05701907351613045, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006355076562613249, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.6023101806640625, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.06791981309652328, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0033156678546220064, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002029928145930171, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.5973119735717773, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3241466283798218, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.18300116062164307, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.11992660909891129, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2516236305236816, rank=4, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.24058884382247925, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-4.195656776428223, rank=3, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.4392582178115845, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.5084874629974365, rank=3, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.012086370028555393, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.020088670775294304, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-1.0653190612792969, rank=1, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.1461433619260788, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013424679636955261, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013040646445006132, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.36163878440856934, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.1781444400548935, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.15448440611362457, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.06548036634922028, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.4418625831604004, rank=3, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.10001654922962189, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-0.7548537254333496, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.39578503370285034, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5675726532936096, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.03172972798347473, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.059371717274188995, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-1.1219673156738281, rank=2, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.014431270770728588, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0009012927766889334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00019727191829588264, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.1902770847082138, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.08072244375944138, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.11521956324577332, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.035654667764902115, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-0.6550530791282654, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.02330426312983036, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-4.384681224822998, rank=4, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.05364048480987549, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.8038601875305176, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.02270464599132538, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.002600504318252206, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-4.947210788726807, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.018018605187535286, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004600179847329855, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0003252692404203117, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0266454219818115, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.1865871399641037, rank=1, decoded_token=None)
For token 11874, log_prob: Logprob(logprob=-5.230022430419922, rank=13, decoded_token=None)
For token 4459, log_prob: Logprob(logprob=-7.015143394470215, rank=127, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.7234127521514893, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.3753688335418701, rank=2, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.5622481107711792, rank=1, decoded_token=None)
For token 3325, log_prob: Logprob(logprob=-9.274701118469238, rank=39, decoded_token=None)
For token 4279, log_prob: Logprob(logprob=-0.061525940895080566, rank=1, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-0.4941194951534271, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.19108332693576813, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.023351196199655533, rank=1, decoded_token=None)
For token 1399, log_prob: Logprob(logprob=-3.965664863586426, rank=14, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.08888546377420425, rank=1, decoded_token=None)
For token 9062, log_prob: Logprob(logprob=-5.069382190704346, rank=12, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.7112465500831604, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.34662938117980957, rank=1, decoded_token=None)
For token 2753, log_prob: Logprob(logprob=-2.481574535369873, rank=3, decoded_token=None)
For token 1109, log_prob: Logprob(logprob=-0.003997075371444225, rank=1, decoded_token=None)
For token 477, log_prob: Logprob(logprob=-2.8801045417785645, rank=3, decoded_token=None)
For token 6273, log_prob: Logprob(logprob=-0.014255120418965816, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.005616360809653997, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.09136494249105453, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-5.171558380126953, rank=29, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.15463751554489136, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-1.5059852600097656, rank=2, decoded_token=None)
For token 12474, log_prob: Logprob(logprob=-2.703284740447998, rank=4, decoded_token=None)
For token 4279, log_prob: Logprob(logprob=-0.6892966032028198, rank=1, decoded_token=None)
For token 8331, log_prob: Logprob(logprob=-0.40075385570526123, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.16614307463169098, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.3330661356449127, rank=1, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-0.18814654648303986, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.29503315687179565, rank=1, decoded_token=None)
For token 285, log_prob: Logprob(logprob=-9.537616729736328, rank=40, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.0424995422363281, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.0103116035461426, rank=3, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.1927359402179718, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-1.1282888650894165, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-1.897783637046814, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.0834796354174614, rank=1, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-0.31044304370880127, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.7018356919288635, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.08656797558069229, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.015342078171670437, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.001342110801488161, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.03845331445336342, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.8961074352264404, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.24604052305221558, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.00525154173374176, rank=1, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.31360125541687, rank=3, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.022651156410574913, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0009365463047288358, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-7.247662142617628e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.004892876371741295, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.138803005218506, rank=7, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.030544022098183632, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.001689555705524981, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-1.276960015296936, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.001290561049245298, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.00033408781746402383, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-6.282132380874828e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005520693026483059, rank=1, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.951915740966797, rank=7, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.003568592481315136, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.001328301033936441, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-0.7559362053871155, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0010598048102110624, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.00035744477645494044, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001752223033690825, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.015477659180760384, rank=1, decoded_token=None)
For token 717, log_prob: Logprob(logprob=-2.1781153678894043, rank=3, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-0.0018874465022236109, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0009585791267454624, rank=1, decoded_token=None)
For token 868, log_prob: Logprob(logprob=-2.1975910663604736, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.022958656772971153, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.00263795698992908, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0005277194431982934, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0764647722244263, rank=1, decoded_token=None)
tokens length:  504
output logprobs length:  504
ctxlen:  503
For token 791, log_prob: Logprob(logprob=-3.6213459968566895, rank=4, decoded_token=None)
For token 2768, log_prob: Logprob(logprob=-4.259817600250244, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-2.991230010986328, rank=3, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-9.332494735717773, rank=699, decoded_token=None)
For token 5873, log_prob: Logprob(logprob=-1.0538994073867798, rank=1, decoded_token=None)
For token 4860, log_prob: Logprob(logprob=-0.15532542765140533, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.4161324501037598, rank=9, decoded_token=None)
For token 4291, log_prob: Logprob(logprob=-3.5592703819274902, rank=2, decoded_token=None)
For token 11503, log_prob: Logprob(logprob=-0.9168203473091125, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.4131229519844055, rank=1, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.8898773193359375, rank=4, decoded_token=None)
For token 36256, log_prob: Logprob(logprob=-8.741050720214844, rank=635, decoded_token=None)
For token 38696, log_prob: Logprob(logprob=-3.7625539302825928, rank=8, decoded_token=None)
For token 382, log_prob: Logprob(logprob=-5.573415279388428, rank=19, decoded_token=None)
For token 791, log_prob: Logprob(logprob=-3.544070243835449, rank=4, decoded_token=None)
For token 7187, log_prob: Logprob(logprob=-7.385589122772217, rank=164, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.11412940919399261, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.8478307723999023, rank=2, decoded_token=None)
For token 3363, log_prob: Logprob(logprob=-1.8618664741516113, rank=1, decoded_token=None)
For token 1405, log_prob: Logprob(logprob=-5.9992265701293945, rank=13, decoded_token=None)
For token 33126, log_prob: Logprob(logprob=-9.025006294250488, rank=320, decoded_token=None)
For token 574, log_prob: Logprob(logprob=-5.349676132202148, rank=8, decoded_token=None)
For token 9405, log_prob: Logprob(logprob=-0.4107400178909302, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.5750153660774231, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.7413759231567383, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-7.208454132080078, rank=134, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.7163258790969849, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-8.746551513671875, rank=551, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.46054989099502563, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-4.115103721618652, rank=8, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.2959842085838318, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.1604301482439041, rank=1, decoded_token=None)
For token 907, log_prob: Logprob(logprob=-5.730544567108154, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.036400843411684036, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.9913142323493958, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.306947708129883, rank=14, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.463329553604126, rank=3, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-6.80005407333374, rank=33, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.502928614616394, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.8077549934387207, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.794535756111145, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-0.4624699354171753, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.35287705063819885, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-0.04949808493256569, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-3.705009937286377, rank=5, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.00704288482666, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.2554558217525482, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.19919312000274658, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.9839682579040527, rank=1, decoded_token=None)
For token 9214, log_prob: Logprob(logprob=-7.269443511962891, rank=42, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.3192760646343231, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0035969815216958523, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0006814065272919834, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021883098408579826, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.1909081935882568, rank=1, decoded_token=None)
For token 11758, log_prob: Logprob(logprob=-1.8936516046524048, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00804623682051897, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.001649211160838604, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000596107158344239, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006301296874880791, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.09370359778404236, rank=1, decoded_token=None)
For token 22781, log_prob: Logprob(logprob=-0.7115755081176758, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.007358944974839687, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002253137994557619, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000610999355558306, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.019312677904963493, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.06189332529902458, rank=1, decoded_token=None)
For token 6305, log_prob: Logprob(logprob=-0.6310369372367859, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.25910231471061707, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.9596242904663086, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.060119159519672394, rank=1, decoded_token=None)
For token 362, log_prob: Logprob(logprob=-1.2652478218078613, rank=2, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-1.2315428256988525, rank=2, decoded_token=None)
For token 43819, log_prob: Logprob(logprob=-12.279776573181152, rank=2720, decoded_token=None)
For token 21475, log_prob: Logprob(logprob=-0.6679940819740295, rank=1, decoded_token=None)
For token 1511, log_prob: Logprob(logprob=-6.589616775512695, rank=49, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.3157753944396973, rank=3, decoded_token=None)
For token 6037, log_prob: Logprob(logprob=-6.093387603759766, rank=53, decoded_token=None)
For token 330, log_prob: Logprob(logprob=-3.6796159744262695, rank=9, decoded_token=None)
For token 2261, log_prob: Logprob(logprob=-4.342022895812988, rank=15, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.6981703042984009, rank=1, decoded_token=None)
For token 806, log_prob: Logprob(logprob=-4.951969146728516, rank=18, decoded_token=None)
For token 1, log_prob: Logprob(logprob=-1.3567357063293457, rank=2, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.559495747089386, rank=1, decoded_token=None)
For token 1893, log_prob: Logprob(logprob=-6.321759223937988, rank=44, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-1.3698585033416748, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3447837829589844, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-6.439241409301758, rank=23, decoded_token=None)
For token 6982, log_prob: Logprob(logprob=-3.0471701622009277, rank=5, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-0.703130304813385, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.47134995460510254, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.5008544921875, rank=9, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-4.440498352050781, rank=13, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.9463624954223633, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.14101086556911469, rank=1, decoded_token=None)
For token 1691, log_prob: Logprob(logprob=-0.807411789894104, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0075277951546013355, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01632852479815483, rank=1, decoded_token=None)
For token 843, log_prob: Logprob(logprob=-0.12699167430400848, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.03602903336286545, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2054326832294464, rank=1, decoded_token=None)
For token 3391, log_prob: Logprob(logprob=-0.025190236046910286, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.08179139345884323, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3728283941745758, rank=1, decoded_token=None)
For token 4370, log_prob: Logprob(logprob=-0.015932045876979828, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-9.9160795211792, rank=121, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-4.163404941558838, rank=8, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.451625347137451, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.517742395401001, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.110421895980835, rank=3, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.476434588432312, rank=2, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.23249292373657227, rank=1, decoded_token=None)
For token 837, log_prob: Logprob(logprob=-0.6536205410957336, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.36460936069488525, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.07394429296255112, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.009883278980851173, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.6059339046478271, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-2.450810432434082, rank=5, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.049487829208374, rank=2, decoded_token=None)
For token 339, log_prob: Logprob(logprob=-0.6980368494987488, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.139958381652832, rank=2, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.1722527742385864, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.015046435408294201, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.19619299471378326, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.604534864425659, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.20953349769115448, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-4.28965425491333, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.45435839891433716, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.02163873240351677, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.2181992381811142, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.001948483637534082, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0003895000845659524, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.05843179672956467, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.4078903198242188, rank=4, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.5167269706726074, rank=4, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.789426326751709, rank=1, decoded_token=None)
For token 2646, log_prob: Logprob(logprob=-3.07065749168396, rank=8, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-2.406424045562744, rank=3, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.64980149269104, rank=7, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-2.804396629333496, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.07326694577932358, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-3.0780837535858154, rank=4, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.01376998983323574, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-0.044610776007175446, rank=1, decoded_token=None)
For token 1023, log_prob: Logprob(logprob=-0.0030948857311159372, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.03554227203130722, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.011711414903402328, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00024434918304905295, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.1415383219718933, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-5.144501686096191, rank=9, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.4923019409179688, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.1131657212972641, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.29162850975990295, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.007929631508886814, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.020741933956742287, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.09790364652872086, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.5009815692901611, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-3.012348175048828, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.7491417527198792, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.07769384235143661, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-7.595197677612305, rank=29, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.1537325382232666, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.010177383199334145, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.005346049088984728, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.0328480489552021, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.024808069691061974, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00047052756417542696, rank=1, decoded_token=None)
For token 1442, log_prob: Logprob(logprob=-4.929317474365234, rank=7, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.5717543363571167, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3725956678390503, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.2139285802841187, rank=1, decoded_token=None)
For token 3940, log_prob: Logprob(logprob=-4.185582160949707, rank=14, decoded_token=None)
For token 449, log_prob: Logprob(logprob=-0.05743381381034851, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.9012429714202881, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.6468750238418579, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.008982133120298386, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-2.8201804161071777, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.6609485149383545, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.6036994457244873, rank=3, decoded_token=None)
For token 1053, log_prob: Logprob(logprob=-2.095855951309204, rank=2, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-3.041916847229004, rank=6, decoded_token=None)
For token 1193, log_prob: Logprob(logprob=-3.4329066276550293, rank=7, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.34858348965644836, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.016673851758241653, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-2.831927537918091, rank=2, decoded_token=None)
For token 433, log_prob: Logprob(logprob=-0.3648470342159271, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.21367542445659637, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.02570355497300625, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0026745761279016733, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.1849979162216187, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.18910124897956848, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.310189723968506, rank=2, decoded_token=None)
For token 2860, log_prob: Logprob(logprob=-5.869146347045898, rank=56, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.027346676215529442, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2362522929906845, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-4.086330413818359, rank=4, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-6.07204008102417, rank=49, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.5300240516662598, rank=7, decoded_token=None)
For token 1514, log_prob: Logprob(logprob=-1.5933805704116821, rank=2, decoded_token=None)
For token 19794, log_prob: Logprob(logprob=-4.322381496429443, rank=6, decoded_token=None)
For token 520, log_prob: Logprob(logprob=-2.5797297954559326, rank=4, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.8274871110916138, rank=1, decoded_token=None)
For token 6246, log_prob: Logprob(logprob=-5.394405841827393, rank=25, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.8071932196617126, rank=1, decoded_token=None)
For token 2684, log_prob: Logprob(logprob=-3.05216908454895, rank=7, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.6914281249046326, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.022183140739798546, rank=1, decoded_token=None)
For token 7041, log_prob: Logprob(logprob=-3.9680607318878174, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3262915313243866, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2028698921203613, rank=1, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-0.6208716034889221, rank=1, decoded_token=None)
For token 389, log_prob: Logprob(logprob=-2.077561855316162, rank=3, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-1.246550440788269, rank=2, decoded_token=None)
For token 2128, log_prob: Logprob(logprob=-0.10005613416433334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.14739106595516205, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-2.883037567138672, rank=4, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-1.1887978315353394, rank=2, decoded_token=None)
For token 12722, log_prob: Logprob(logprob=-4.796601295471191, rank=9, decoded_token=None)
For token 15100, log_prob: Logprob(logprob=-4.097357749938965, rank=7, decoded_token=None)
For token 1268, log_prob: Logprob(logprob=-0.9826016426086426, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.8719936609268188, rank=3, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-1.8892854452133179, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.10686607658863068, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.29455244541168213, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.010281220078468323, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.8527332544326782, rank=1, decoded_token=None)
For token 4460, log_prob: Logprob(logprob=-3.4623050689697266, rank=3, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-1.0008432865142822, rank=2, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.03988252580165863, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002444852376356721, rank=1, decoded_token=None)
For token 2758, log_prob: Logprob(logprob=-3.4538803100585938, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.37787938117980957, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.939903974533081, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.39280885457992554, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.3244531154632568, rank=2, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.10098931938409805, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.7775647640228271, rank=2, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.4539406895637512, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.811513423919678, rank=4, decoded_token=None)
For token 1758, log_prob: Logprob(logprob=-0.7816817164421082, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.9299181699752808, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.44691434502601624, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0014972201315686107, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001538873475510627, rank=1, decoded_token=None)
For token 64002, log_prob: Logprob(logprob=-2.5435791015625, rank=3, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04151042550802231, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.13028867542743683, rank=1, decoded_token=None)
For token 555, log_prob: Logprob(logprob=-0.033352263271808624, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.004435819108039141, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.01422715000808239, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.0882897675037384, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.06284724175930023, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.23540009558200836, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-0.04173900932073593, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.009144803509116173, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.061586808413267136, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013944911770522594, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010585224663373083, rank=1, decoded_token=None)
For token 72159, log_prob: Logprob(logprob=-1.4160566329956055, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021862106397747993, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.14335329830646515, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-5.759881019592285, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005048384889960289, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.10374521464109421, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.17173078656196594, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.02425275556743145, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.045896414667367935, rank=1, decoded_token=None)
For token 3965, log_prob: Logprob(logprob=-0.1629486083984375, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.11125016212463379, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.008519258350133896, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002081372309476137, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00037245964631438255, rank=1, decoded_token=None)
For token 94310, log_prob: Logprob(logprob=-0.7335497140884399, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.02491365373134613, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5532340407371521, rank=1, decoded_token=None)
For token 505, log_prob: Logprob(logprob=-0.10938028991222382, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.010903777554631233, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.055021319538354874, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.02717730961740017, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.014209168031811714, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04492345079779625, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.008596202358603477, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.019180072471499443, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.05701299384236336, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.0044067418202757835, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0004991239402443171, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.3356616497039795, rank=3, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.2321207970380783, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-1.9457459449768066, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-5.169647216796875, rank=25, decoded_token=None)
For token 31878, log_prob: Logprob(logprob=-1.6065828800201416, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.7340887784957886, rank=1, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-8.43447208404541, rank=182, decoded_token=None)
For token 2204, log_prob: Logprob(logprob=-2.5959243774414062, rank=2, decoded_token=None)
For token 8146, log_prob: Logprob(logprob=-5.7852783203125, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.028130831196904182, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-4.079294681549072, rank=13, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.363671213388443, rank=1, decoded_token=None)
For token 2435, log_prob: Logprob(logprob=-4.852097988128662, rank=13, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.3592950105667114, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.8471036553382874, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-4.368374824523926, rank=20, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-4.802444934844971, rank=13, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.16641685366630554, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-2.103876829147339, rank=2, decoded_token=None)
For token 1933, log_prob: Logprob(logprob=-0.12087968736886978, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-3.4264016151428223, rank=5, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-7.156714916229248, rank=17, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.11071085929870605, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-2.5686776638031006, rank=5, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.808468818664551, rank=3, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.08335965126752853, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.6839105486869812, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.7509100437164307, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-2.0333144664764404, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-3.4627275466918945, rank=6, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.025303103029727936, rank=1, decoded_token=None)
For token 706, log_prob: Logprob(logprob=-0.38641905784606934, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.6944231986999512, rank=2, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.2304867058992386, rank=1, decoded_token=None)
For token 649, log_prob: Logprob(logprob=-2.619453191757202, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.055597249418497086, rank=1, decoded_token=None)
For token 1766, log_prob: Logprob(logprob=-2.600069999694824, rank=4, decoded_token=None)
For token 1701, log_prob: Logprob(logprob=-2.2944202423095703, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.4182531535625458, rank=1, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-3.653362512588501, rank=7, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-4.6120195388793945, rank=15, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.18519794940948486, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.9661778211593628, rank=2, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-0.45861148834228516, rank=1, decoded_token=None)
For token 25800, log_prob: Logprob(logprob=-3.94254732131958, rank=9, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.1716657280921936, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.07201958447694778, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-2.19677996635437, rank=3, decoded_token=None)
For token 2650, log_prob: Logprob(logprob=-2.998732566833496, rank=3, decoded_token=None)
For token 1690, log_prob: Logprob(logprob=-0.08345484733581543, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.7078306674957275, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.1414029747247696, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-0.18299917876720428, rank=1, decoded_token=None)
For token 1587, log_prob: Logprob(logprob=-0.9597219228744507, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.0231848806142807, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.0032851321157068014, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-0.10467099398374557, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.15210722386837006, rank=1, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.03904413804411888, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.10596451908349991, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.08106350153684616, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002707508159801364, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.022244233638048172, rank=1, decoded_token=None)
For token 25541, log_prob: Logprob(logprob=-10.945005416870117, rank=916, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.6583459973335266, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0010521834483370185, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001486429391661659, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0014629386132583022, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-4.006361961364746, rank=7, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.023395448923110962, rank=1, decoded_token=None)
For token 21129, log_prob: Logprob(logprob=-5.530216217041016, rank=44, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00830328743904829, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0003693613689392805, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013433984713628888, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0016192194307222962, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.299423933029175, rank=2, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.006571113597601652, rank=1, decoded_token=None)
For token 24599, log_prob: Logprob(logprob=-6.174839973449707, rank=81, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.004514620639383793, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0005022218101657927, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002609150833450258, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.003974872175604105, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-2.5288949012756348, rank=3, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0012215065071359277, rank=1, decoded_token=None)
For token 5154, log_prob: Logprob(logprob=-5.727021217346191, rank=71, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.49432677030563354, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.005106738768517971, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.000403084559366107, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0903244018554688, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.23497126996517181, rank=1, decoded_token=None)
For token 23956, log_prob: Logprob(logprob=-3.718066692352295, rank=5, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-2.335458755493164, rank=3, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-1.303149938583374, rank=1, decoded_token=None)
For token 13890, log_prob: Logprob(logprob=-0.3004732131958008, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.004260392393916845, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5732686519622803, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.590839147567749, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-3.827090263366699, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.22617821395397186, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-3.2456188201904297, rank=8, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.9588005542755127, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.026078294962644577, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0019421778852120042, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.9211294651031494, rank=2, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3348463177680969, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7776240110397339, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01911025308072567, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.888803005218506, rank=6, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.054509516805410385, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7908403277397156, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-1.7093759775161743, rank=2, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-4.15236234664917, rank=6, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.05701907351613045, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006355076562613249, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.6023101806640625, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.06791981309652328, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0033156678546220064, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002029928145930171, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.5973119735717773, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3241466283798218, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.18300116062164307, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.11992660909891129, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2516236305236816, rank=4, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.24058884382247925, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-4.195656776428223, rank=3, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.4392582178115845, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.5084874629974365, rank=3, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.012086370028555393, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.020088670775294304, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-1.0653190612792969, rank=1, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.1461433619260788, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013424679636955261, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013040646445006132, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.36163878440856934, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.1781444400548935, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.15448440611362457, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.06548036634922028, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.4418625831604004, rank=3, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.10001654922962189, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-0.7548537254333496, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.39578503370285034, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5675726532936096, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.03172972798347473, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.059371717274188995, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-1.1219673156738281, rank=2, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.014431270770728588, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0009012927766889334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00019727191829588264, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.1902770847082138, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.08072244375944138, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.11521956324577332, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.035654667764902115, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-0.6550530791282654, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.02330426312983036, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-4.384681224822998, rank=4, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.05364048480987549, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.8038601875305176, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.02270464599132538, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.002600504318252206, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-4.947210788726807, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.018018605187535286, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004600179847329855, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0003252692404203117, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0266454219818115, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.1865871399641037, rank=1, decoded_token=None)
For token 3947, log_prob: Logprob(logprob=-4.355022430419922, rank=10, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-0.1291186660528183, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.15686523914337158, rank=1, decoded_token=None)
For token 9870, log_prob: Logprob(logprob=-7.3711042404174805, rank=175, decoded_token=None)
For token 25247, log_prob: Logprob(logprob=-7.405229091644287, rank=178, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.053574614226818085, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.1845602989196777, rank=2, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.5040314197540283, rank=5, decoded_token=None)
For token 49138, log_prob: Logprob(logprob=-0.8289725184440613, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.020171621814370155, rank=1, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-3.268665075302124, rank=2, decoded_token=None)
For token 955, log_prob: Logprob(logprob=-4.626097679138184, rank=17, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.004487681668251753, rank=1, decoded_token=None)
For token 10054, log_prob: Logprob(logprob=-3.1009275913238525, rank=4, decoded_token=None)
For token 12932, log_prob: Logprob(logprob=-0.01945801079273224, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.2609769403934479, rank=1, decoded_token=None)
For token 2650, log_prob: Logprob(logprob=-1.2525132894515991, rank=1, decoded_token=None)
For token 1690, log_prob: Logprob(logprob=-0.04048464074730873, rank=1, decoded_token=None)
For token 25247, log_prob: Logprob(logprob=-0.3192667067050934, rank=1, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-0.06887322664260864, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.2416324019432068, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.20790553092956543, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-3.1029748916625977, rank=5, decoded_token=None)
For token 49138, log_prob: Logprob(logprob=-0.09661869704723358, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.029441410675644875, rank=1, decoded_token=None)
For token 430, log_prob: Logprob(logprob=-2.282524585723877, rank=4, decoded_token=None)
For token 10054, log_prob: Logprob(logprob=-1.0850210189819336, rank=1, decoded_token=None)
For token 12932, log_prob: Logprob(logprob=-0.0009224927052855492, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.040599800646305084, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.013636058196425438, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0007173825288191438, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.00621055206283927, rank=1, decoded_token=None)
For token 12338, log_prob: Logprob(logprob=-7.496326446533203, rank=197, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.30963918566703796, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0007758706342428923, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-7.045020902296528e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0010788579238578677, rank=1, decoded_token=None)
For token 14087, log_prob: Logprob(logprob=-4.517580509185791, rank=8, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.01048543956130743, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0003829461056739092, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-4.160317621426657e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0006625840906053782, rank=1, decoded_token=None)
For token 12901, log_prob: Logprob(logprob=-9.747176170349121, rank=489, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.016063792631030083, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0007327494095079601, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00011955977242905647, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0034975565504282713, rank=1, decoded_token=None)
For token 16551, log_prob: Logprob(logprob=-4.405282974243164, rank=16, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.021435726433992386, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.0020148707553744316, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0002810560108628124, rank=1, decoded_token=None)
For token 356, log_prob: Logprob(logprob=-1.8010461330413818, rank=3, decoded_token=None)
tokens length:  504
output logprobs length:  504
ctxlen:  503
For token 791, log_prob: Logprob(logprob=-3.6213459968566895, rank=4, decoded_token=None)
For token 2768, log_prob: Logprob(logprob=-4.259817600250244, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-2.991230010986328, rank=3, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-9.332494735717773, rank=699, decoded_token=None)
For token 5873, log_prob: Logprob(logprob=-1.0538994073867798, rank=1, decoded_token=None)
For token 4860, log_prob: Logprob(logprob=-0.15532542765140533, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.4161324501037598, rank=9, decoded_token=None)
For token 4291, log_prob: Logprob(logprob=-3.5592703819274902, rank=2, decoded_token=None)
For token 11503, log_prob: Logprob(logprob=-0.9168203473091125, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.4131229519844055, rank=1, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.8898773193359375, rank=4, decoded_token=None)
For token 36256, log_prob: Logprob(logprob=-8.741050720214844, rank=635, decoded_token=None)
For token 38696, log_prob: Logprob(logprob=-3.7625539302825928, rank=8, decoded_token=None)
For token 382, log_prob: Logprob(logprob=-5.573415279388428, rank=19, decoded_token=None)
For token 791, log_prob: Logprob(logprob=-3.544070243835449, rank=4, decoded_token=None)
For token 7187, log_prob: Logprob(logprob=-7.385589122772217, rank=164, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.11412940919399261, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.8478307723999023, rank=2, decoded_token=None)
For token 3363, log_prob: Logprob(logprob=-1.8618664741516113, rank=1, decoded_token=None)
For token 1405, log_prob: Logprob(logprob=-5.9992265701293945, rank=13, decoded_token=None)
For token 33126, log_prob: Logprob(logprob=-9.025006294250488, rank=320, decoded_token=None)
For token 574, log_prob: Logprob(logprob=-5.349676132202148, rank=8, decoded_token=None)
For token 9405, log_prob: Logprob(logprob=-0.4107400178909302, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.5750153660774231, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.7413759231567383, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-7.208454132080078, rank=134, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.7163258790969849, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-8.746551513671875, rank=551, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.46054989099502563, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-4.115103721618652, rank=8, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.2959842085838318, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.1604301482439041, rank=1, decoded_token=None)
For token 907, log_prob: Logprob(logprob=-5.730544567108154, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.036400843411684036, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.9913142323493958, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.306947708129883, rank=14, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.463329553604126, rank=3, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-6.80005407333374, rank=33, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.502928614616394, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.8077549934387207, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.794535756111145, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-0.4624699354171753, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.35287705063819885, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-0.04949808493256569, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-3.705009937286377, rank=5, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.00704288482666, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.2554558217525482, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.19919312000274658, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.9839682579040527, rank=1, decoded_token=None)
For token 9214, log_prob: Logprob(logprob=-7.269443511962891, rank=42, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.3192760646343231, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0035969815216958523, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0006814065272919834, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021883098408579826, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.1909081935882568, rank=1, decoded_token=None)
For token 11758, log_prob: Logprob(logprob=-1.8936516046524048, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00804623682051897, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.001649211160838604, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000596107158344239, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006301296874880791, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.09370359778404236, rank=1, decoded_token=None)
For token 22781, log_prob: Logprob(logprob=-0.7115755081176758, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.007358944974839687, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002253137994557619, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000610999355558306, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.019312677904963493, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.06189332529902458, rank=1, decoded_token=None)
For token 6305, log_prob: Logprob(logprob=-0.6310369372367859, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.25910231471061707, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.9596242904663086, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.060119159519672394, rank=1, decoded_token=None)
For token 362, log_prob: Logprob(logprob=-1.2652478218078613, rank=2, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-1.2315428256988525, rank=2, decoded_token=None)
For token 43819, log_prob: Logprob(logprob=-12.279776573181152, rank=2720, decoded_token=None)
For token 21475, log_prob: Logprob(logprob=-0.6679940819740295, rank=1, decoded_token=None)
For token 1511, log_prob: Logprob(logprob=-6.589616775512695, rank=49, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.3157753944396973, rank=3, decoded_token=None)
For token 6037, log_prob: Logprob(logprob=-6.093387603759766, rank=53, decoded_token=None)
For token 330, log_prob: Logprob(logprob=-3.6796159744262695, rank=9, decoded_token=None)
For token 2261, log_prob: Logprob(logprob=-4.342022895812988, rank=15, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.6981703042984009, rank=1, decoded_token=None)
For token 806, log_prob: Logprob(logprob=-4.951969146728516, rank=18, decoded_token=None)
For token 1, log_prob: Logprob(logprob=-1.3567357063293457, rank=2, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.559495747089386, rank=1, decoded_token=None)
For token 1893, log_prob: Logprob(logprob=-6.321759223937988, rank=44, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-1.3698585033416748, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3447837829589844, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-6.439241409301758, rank=23, decoded_token=None)
For token 6982, log_prob: Logprob(logprob=-3.0471701622009277, rank=5, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-0.703130304813385, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.47134995460510254, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.5008544921875, rank=9, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-4.440498352050781, rank=13, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.9463624954223633, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.14101086556911469, rank=1, decoded_token=None)
For token 1691, log_prob: Logprob(logprob=-0.807411789894104, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0075277951546013355, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01632852479815483, rank=1, decoded_token=None)
For token 843, log_prob: Logprob(logprob=-0.12699167430400848, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.03602903336286545, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2054326832294464, rank=1, decoded_token=None)
For token 3391, log_prob: Logprob(logprob=-0.025190236046910286, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.08179139345884323, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3728283941745758, rank=1, decoded_token=None)
For token 4370, log_prob: Logprob(logprob=-0.015932045876979828, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-9.9160795211792, rank=121, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-4.163404941558838, rank=8, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.451625347137451, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.517742395401001, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.110421895980835, rank=3, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.476434588432312, rank=2, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.23249292373657227, rank=1, decoded_token=None)
For token 837, log_prob: Logprob(logprob=-0.6536205410957336, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.36460936069488525, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.07394429296255112, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.009883278980851173, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.6059339046478271, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-2.450810432434082, rank=5, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.049487829208374, rank=2, decoded_token=None)
For token 339, log_prob: Logprob(logprob=-0.6980368494987488, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.139958381652832, rank=2, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.1722527742385864, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.015046435408294201, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.19619299471378326, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.604534864425659, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.20953349769115448, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-4.28965425491333, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.45435839891433716, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.02163873240351677, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.2181992381811142, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.001948483637534082, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0003895000845659524, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.05843179672956467, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.4078903198242188, rank=4, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.5167269706726074, rank=4, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.789426326751709, rank=1, decoded_token=None)
For token 2646, log_prob: Logprob(logprob=-3.07065749168396, rank=8, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-2.406424045562744, rank=3, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.64980149269104, rank=7, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-2.804396629333496, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.07326694577932358, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-3.0780837535858154, rank=4, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.01376998983323574, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-0.044610776007175446, rank=1, decoded_token=None)
For token 1023, log_prob: Logprob(logprob=-0.0030948857311159372, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.03554227203130722, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.011711414903402328, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00024434918304905295, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.1415383219718933, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-5.144501686096191, rank=9, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.4923019409179688, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.1131657212972641, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.29162850975990295, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.007929631508886814, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.020741933956742287, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.09790364652872086, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.5009815692901611, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-3.012348175048828, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.7491417527198792, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.07769384235143661, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-7.595197677612305, rank=29, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.1537325382232666, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.010177383199334145, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.005346049088984728, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.0328480489552021, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.024808069691061974, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00047052756417542696, rank=1, decoded_token=None)
For token 1442, log_prob: Logprob(logprob=-4.929317474365234, rank=7, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.5717543363571167, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3725956678390503, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.2139285802841187, rank=1, decoded_token=None)
For token 3940, log_prob: Logprob(logprob=-4.185582160949707, rank=14, decoded_token=None)
For token 449, log_prob: Logprob(logprob=-0.05743381381034851, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.9012429714202881, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.6468750238418579, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.008982133120298386, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-2.8201804161071777, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.6609485149383545, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.6036994457244873, rank=3, decoded_token=None)
For token 1053, log_prob: Logprob(logprob=-2.095855951309204, rank=2, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-3.041916847229004, rank=6, decoded_token=None)
For token 1193, log_prob: Logprob(logprob=-3.4329066276550293, rank=7, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.34858348965644836, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.016673851758241653, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-2.831927537918091, rank=2, decoded_token=None)
For token 433, log_prob: Logprob(logprob=-0.3648470342159271, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.21367542445659637, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.02570355497300625, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0026745761279016733, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.1849979162216187, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.18910124897956848, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.310189723968506, rank=2, decoded_token=None)
For token 2860, log_prob: Logprob(logprob=-5.869146347045898, rank=56, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.027346676215529442, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2362522929906845, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-4.086330413818359, rank=4, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-6.07204008102417, rank=49, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.5300240516662598, rank=7, decoded_token=None)
For token 1514, log_prob: Logprob(logprob=-1.5933805704116821, rank=2, decoded_token=None)
For token 19794, log_prob: Logprob(logprob=-4.322381496429443, rank=6, decoded_token=None)
For token 520, log_prob: Logprob(logprob=-2.5797297954559326, rank=4, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.8274871110916138, rank=1, decoded_token=None)
For token 6246, log_prob: Logprob(logprob=-5.394405841827393, rank=25, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.8071932196617126, rank=1, decoded_token=None)
For token 2684, log_prob: Logprob(logprob=-3.05216908454895, rank=7, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.6914281249046326, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.022183140739798546, rank=1, decoded_token=None)
For token 7041, log_prob: Logprob(logprob=-3.9680607318878174, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3262915313243866, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2028698921203613, rank=1, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-0.6208716034889221, rank=1, decoded_token=None)
For token 389, log_prob: Logprob(logprob=-2.077561855316162, rank=3, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-1.246550440788269, rank=2, decoded_token=None)
For token 2128, log_prob: Logprob(logprob=-0.10005613416433334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.14739106595516205, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-2.883037567138672, rank=4, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-1.1887978315353394, rank=2, decoded_token=None)
For token 12722, log_prob: Logprob(logprob=-4.796601295471191, rank=9, decoded_token=None)
For token 15100, log_prob: Logprob(logprob=-4.097357749938965, rank=7, decoded_token=None)
For token 1268, log_prob: Logprob(logprob=-0.9826016426086426, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.8719936609268188, rank=3, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-1.8892854452133179, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.10686607658863068, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.29455244541168213, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.010281220078468323, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.8527332544326782, rank=1, decoded_token=None)
For token 4460, log_prob: Logprob(logprob=-3.4623050689697266, rank=3, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-1.0008432865142822, rank=2, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.03988252580165863, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002444852376356721, rank=1, decoded_token=None)
For token 2758, log_prob: Logprob(logprob=-3.4538803100585938, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.37787938117980957, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.939903974533081, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.39280885457992554, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.3244531154632568, rank=2, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.10098931938409805, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.7775647640228271, rank=2, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.4539406895637512, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.811513423919678, rank=4, decoded_token=None)
For token 1758, log_prob: Logprob(logprob=-0.7816817164421082, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.9299181699752808, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.44691434502601624, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0014972201315686107, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001538873475510627, rank=1, decoded_token=None)
For token 64002, log_prob: Logprob(logprob=-2.5435791015625, rank=3, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04151042550802231, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.13028867542743683, rank=1, decoded_token=None)
For token 555, log_prob: Logprob(logprob=-0.033352263271808624, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.004435819108039141, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.01422715000808239, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.0882897675037384, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.06284724175930023, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.23540009558200836, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-0.04173900932073593, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.009144803509116173, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.061586808413267136, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013944911770522594, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010585224663373083, rank=1, decoded_token=None)
For token 72159, log_prob: Logprob(logprob=-1.4160566329956055, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021862106397747993, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.14335329830646515, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-5.759881019592285, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005048384889960289, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.10374521464109421, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.17173078656196594, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.02425275556743145, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.045896414667367935, rank=1, decoded_token=None)
For token 3965, log_prob: Logprob(logprob=-0.1629486083984375, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.11125016212463379, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.008519258350133896, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002081372309476137, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00037245964631438255, rank=1, decoded_token=None)
For token 94310, log_prob: Logprob(logprob=-0.7335497140884399, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.02491365373134613, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5532340407371521, rank=1, decoded_token=None)
For token 505, log_prob: Logprob(logprob=-0.10938028991222382, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.010903777554631233, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.055021319538354874, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.02717730961740017, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.014209168031811714, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04492345079779625, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.008596202358603477, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.019180072471499443, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.05701299384236336, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.0044067418202757835, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0004991239402443171, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.3356616497039795, rank=3, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.2321207970380783, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-1.9457459449768066, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-5.169647216796875, rank=25, decoded_token=None)
For token 31878, log_prob: Logprob(logprob=-1.6065828800201416, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.7340887784957886, rank=1, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-8.43447208404541, rank=182, decoded_token=None)
For token 2204, log_prob: Logprob(logprob=-2.5959243774414062, rank=2, decoded_token=None)
For token 8146, log_prob: Logprob(logprob=-5.7852783203125, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.028130831196904182, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-4.079294681549072, rank=13, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.363671213388443, rank=1, decoded_token=None)
For token 2435, log_prob: Logprob(logprob=-4.852097988128662, rank=13, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.3592950105667114, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.8471036553382874, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-4.368374824523926, rank=20, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-4.802444934844971, rank=13, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.16641685366630554, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-2.103876829147339, rank=2, decoded_token=None)
For token 1933, log_prob: Logprob(logprob=-0.12087968736886978, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-3.4264016151428223, rank=5, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-7.156714916229248, rank=17, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.11071085929870605, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-2.5686776638031006, rank=5, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.808468818664551, rank=3, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.08335965126752853, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.6839105486869812, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.7509100437164307, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-2.0333144664764404, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-3.4627275466918945, rank=6, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.025303103029727936, rank=1, decoded_token=None)
For token 706, log_prob: Logprob(logprob=-0.38641905784606934, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.6944231986999512, rank=2, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.2304867058992386, rank=1, decoded_token=None)
For token 649, log_prob: Logprob(logprob=-2.619453191757202, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.055597249418497086, rank=1, decoded_token=None)
For token 1766, log_prob: Logprob(logprob=-2.600069999694824, rank=4, decoded_token=None)
For token 1701, log_prob: Logprob(logprob=-2.2944202423095703, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.4182531535625458, rank=1, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-3.653362512588501, rank=7, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-4.6120195388793945, rank=15, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.18519794940948486, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.9661778211593628, rank=2, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-0.45861148834228516, rank=1, decoded_token=None)
For token 25800, log_prob: Logprob(logprob=-3.94254732131958, rank=9, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.1716657280921936, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.07201958447694778, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-2.19677996635437, rank=3, decoded_token=None)
For token 2650, log_prob: Logprob(logprob=-2.998732566833496, rank=3, decoded_token=None)
For token 1690, log_prob: Logprob(logprob=-0.08345484733581543, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.7078306674957275, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.1414029747247696, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-0.18299917876720428, rank=1, decoded_token=None)
For token 1587, log_prob: Logprob(logprob=-0.9597219228744507, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.0231848806142807, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.0032851321157068014, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-0.10467099398374557, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.15210722386837006, rank=1, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.03904413804411888, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.10596451908349991, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.08106350153684616, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002707508159801364, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.022244233638048172, rank=1, decoded_token=None)
For token 25541, log_prob: Logprob(logprob=-10.945005416870117, rank=916, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.6583459973335266, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0010521834483370185, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001486429391661659, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0014629386132583022, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-4.006361961364746, rank=7, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.023395448923110962, rank=1, decoded_token=None)
For token 21129, log_prob: Logprob(logprob=-5.530216217041016, rank=44, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00830328743904829, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0003693613689392805, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013433984713628888, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0016192194307222962, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.299423933029175, rank=2, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.006571113597601652, rank=1, decoded_token=None)
For token 24599, log_prob: Logprob(logprob=-6.174839973449707, rank=81, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.004514620639383793, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0005022218101657927, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002609150833450258, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.003974872175604105, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-2.5288949012756348, rank=3, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0012215065071359277, rank=1, decoded_token=None)
For token 5154, log_prob: Logprob(logprob=-5.727021217346191, rank=71, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.49432677030563354, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.005106738768517971, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.000403084559366107, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0903244018554688, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.23497126996517181, rank=1, decoded_token=None)
For token 23956, log_prob: Logprob(logprob=-3.718066692352295, rank=5, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-2.335458755493164, rank=3, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-1.303149938583374, rank=1, decoded_token=None)
For token 13890, log_prob: Logprob(logprob=-0.3004732131958008, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.004260392393916845, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5732686519622803, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.590839147567749, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-3.827090263366699, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.22617821395397186, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-3.2456188201904297, rank=8, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.9588005542755127, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.026078294962644577, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0019421778852120042, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.9211294651031494, rank=2, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3348463177680969, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7776240110397339, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01911025308072567, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.888803005218506, rank=6, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.054509516805410385, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7908403277397156, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-1.7093759775161743, rank=2, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-4.15236234664917, rank=6, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.05701907351613045, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006355076562613249, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.6023101806640625, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.06791981309652328, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0033156678546220064, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002029928145930171, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.5973119735717773, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3241466283798218, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.18300116062164307, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.11992660909891129, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2516236305236816, rank=4, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.24058884382247925, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-4.195656776428223, rank=3, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.4392582178115845, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.5084874629974365, rank=3, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.012086370028555393, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.020088670775294304, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-1.0653190612792969, rank=1, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.1461433619260788, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013424679636955261, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013040646445006132, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.36163878440856934, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.1781444400548935, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.15448440611362457, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.06548036634922028, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.4418625831604004, rank=3, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.10001654922962189, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-0.7548537254333496, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.39578503370285034, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5675726532936096, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.03172972798347473, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.059371717274188995, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-1.1219673156738281, rank=2, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.014431270770728588, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0009012927766889334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00019727191829588264, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.1902770847082138, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.08072244375944138, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.11521956324577332, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.035654667764902115, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-0.6550530791282654, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.02330426312983036, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-4.384681224822998, rank=4, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.05364048480987549, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.8038601875305176, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.02270464599132538, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.002600504318252206, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-4.947210788726807, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.018018605187535286, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004600179847329855, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0003252692404203117, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0266454219818115, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.1865871399641037, rank=1, decoded_token=None)
For token 3947, log_prob: Logprob(logprob=-4.355022430419922, rank=10, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-0.1291186660528183, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.15686523914337158, rank=1, decoded_token=None)
For token 9870, log_prob: Logprob(logprob=-7.3711042404174805, rank=175, decoded_token=None)
For token 25247, log_prob: Logprob(logprob=-7.405229091644287, rank=178, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.053574614226818085, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.1845602989196777, rank=2, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.5040314197540283, rank=5, decoded_token=None)
For token 49138, log_prob: Logprob(logprob=-0.8289725184440613, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.020171621814370155, rank=1, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-3.268665075302124, rank=2, decoded_token=None)
For token 955, log_prob: Logprob(logprob=-4.626097679138184, rank=17, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.004487681668251753, rank=1, decoded_token=None)
For token 10054, log_prob: Logprob(logprob=-3.1009275913238525, rank=4, decoded_token=None)
For token 12932, log_prob: Logprob(logprob=-0.01945801079273224, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.2609769403934479, rank=1, decoded_token=None)
For token 2650, log_prob: Logprob(logprob=-1.2525132894515991, rank=1, decoded_token=None)
For token 1690, log_prob: Logprob(logprob=-0.04048464074730873, rank=1, decoded_token=None)
For token 25247, log_prob: Logprob(logprob=-0.3192667067050934, rank=1, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-0.06887322664260864, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.2416324019432068, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.20790553092956543, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-3.1029748916625977, rank=5, decoded_token=None)
For token 49138, log_prob: Logprob(logprob=-0.09661869704723358, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.029441410675644875, rank=1, decoded_token=None)
For token 430, log_prob: Logprob(logprob=-2.282524585723877, rank=4, decoded_token=None)
For token 10054, log_prob: Logprob(logprob=-1.0850210189819336, rank=1, decoded_token=None)
For token 12932, log_prob: Logprob(logprob=-0.0009224927052855492, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.040599800646305084, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.013636058196425438, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0007173825288191438, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.00621055206283927, rank=1, decoded_token=None)
For token 12338, log_prob: Logprob(logprob=-7.496326446533203, rank=197, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.30963918566703796, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0007758706342428923, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-7.045020902296528e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0010788579238578677, rank=1, decoded_token=None)
For token 14087, log_prob: Logprob(logprob=-4.517580509185791, rank=8, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.01048543956130743, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0003829461056739092, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-4.160317621426657e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0006625840906053782, rank=1, decoded_token=None)
For token 12901, log_prob: Logprob(logprob=-9.747176170349121, rank=489, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.016063792631030083, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0007327494095079601, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00011955977242905647, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0034975565504282713, rank=1, decoded_token=None)
For token 16551, log_prob: Logprob(logprob=-4.405282974243164, rank=16, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.021435726433992386, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.0020148707553744316, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0002810560108628124, rank=1, decoded_token=None)
For token 362, log_prob: Logprob(logprob=-1.3010461330413818, rank=2, decoded_token=None)
tokens length:  504
output logprobs length:  504
ctxlen:  503
For token 791, log_prob: Logprob(logprob=-3.6213459968566895, rank=4, decoded_token=None)
For token 2768, log_prob: Logprob(logprob=-4.259817600250244, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-2.991230010986328, rank=3, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-9.332494735717773, rank=699, decoded_token=None)
For token 5873, log_prob: Logprob(logprob=-1.0538994073867798, rank=1, decoded_token=None)
For token 4860, log_prob: Logprob(logprob=-0.15532542765140533, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.4161324501037598, rank=9, decoded_token=None)
For token 4291, log_prob: Logprob(logprob=-3.5592703819274902, rank=2, decoded_token=None)
For token 11503, log_prob: Logprob(logprob=-0.9168203473091125, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.4131229519844055, rank=1, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.8898773193359375, rank=4, decoded_token=None)
For token 36256, log_prob: Logprob(logprob=-8.741050720214844, rank=635, decoded_token=None)
For token 38696, log_prob: Logprob(logprob=-3.7625539302825928, rank=8, decoded_token=None)
For token 382, log_prob: Logprob(logprob=-5.573415279388428, rank=19, decoded_token=None)
For token 791, log_prob: Logprob(logprob=-3.544070243835449, rank=4, decoded_token=None)
For token 7187, log_prob: Logprob(logprob=-7.385589122772217, rank=164, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.11412940919399261, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.8478307723999023, rank=2, decoded_token=None)
For token 3363, log_prob: Logprob(logprob=-1.8618664741516113, rank=1, decoded_token=None)
For token 1405, log_prob: Logprob(logprob=-5.9992265701293945, rank=13, decoded_token=None)
For token 33126, log_prob: Logprob(logprob=-9.025006294250488, rank=320, decoded_token=None)
For token 574, log_prob: Logprob(logprob=-5.349676132202148, rank=8, decoded_token=None)
For token 9405, log_prob: Logprob(logprob=-0.4107400178909302, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.5750153660774231, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.7413759231567383, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-7.208454132080078, rank=134, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.7163258790969849, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-8.746551513671875, rank=551, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.46054989099502563, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-4.115103721618652, rank=8, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.2959842085838318, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.1604301482439041, rank=1, decoded_token=None)
For token 907, log_prob: Logprob(logprob=-5.730544567108154, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.036400843411684036, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.9913142323493958, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.306947708129883, rank=14, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.463329553604126, rank=3, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-6.80005407333374, rank=33, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.502928614616394, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.8077549934387207, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.794535756111145, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-0.4624699354171753, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.35287705063819885, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-0.04949808493256569, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-3.705009937286377, rank=5, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.00704288482666, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.2554558217525482, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.19919312000274658, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.9839682579040527, rank=1, decoded_token=None)
For token 9214, log_prob: Logprob(logprob=-7.269443511962891, rank=42, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.3192760646343231, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0035969815216958523, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0006814065272919834, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021883098408579826, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.1909081935882568, rank=1, decoded_token=None)
For token 11758, log_prob: Logprob(logprob=-1.8936516046524048, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00804623682051897, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.001649211160838604, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000596107158344239, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006301296874880791, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.09370359778404236, rank=1, decoded_token=None)
For token 22781, log_prob: Logprob(logprob=-0.7115755081176758, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.007358944974839687, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002253137994557619, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000610999355558306, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.019312677904963493, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.06189332529902458, rank=1, decoded_token=None)
For token 6305, log_prob: Logprob(logprob=-0.6310369372367859, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.25910231471061707, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.9596242904663086, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.060119159519672394, rank=1, decoded_token=None)
For token 362, log_prob: Logprob(logprob=-1.2652478218078613, rank=2, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-1.2315428256988525, rank=2, decoded_token=None)
For token 43819, log_prob: Logprob(logprob=-12.279776573181152, rank=2720, decoded_token=None)
For token 21475, log_prob: Logprob(logprob=-0.6679940819740295, rank=1, decoded_token=None)
For token 1511, log_prob: Logprob(logprob=-6.589616775512695, rank=49, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.3157753944396973, rank=3, decoded_token=None)
For token 6037, log_prob: Logprob(logprob=-6.093387603759766, rank=53, decoded_token=None)
For token 330, log_prob: Logprob(logprob=-3.6796159744262695, rank=9, decoded_token=None)
For token 2261, log_prob: Logprob(logprob=-4.342022895812988, rank=15, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.6981703042984009, rank=1, decoded_token=None)
For token 806, log_prob: Logprob(logprob=-4.951969146728516, rank=18, decoded_token=None)
For token 1, log_prob: Logprob(logprob=-1.3567357063293457, rank=2, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.559495747089386, rank=1, decoded_token=None)
For token 1893, log_prob: Logprob(logprob=-6.321759223937988, rank=44, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-1.3698585033416748, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3447837829589844, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-6.439241409301758, rank=23, decoded_token=None)
For token 6982, log_prob: Logprob(logprob=-3.0471701622009277, rank=5, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-0.703130304813385, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.47134995460510254, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.5008544921875, rank=9, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-4.440498352050781, rank=13, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.9463624954223633, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.14101086556911469, rank=1, decoded_token=None)
For token 1691, log_prob: Logprob(logprob=-0.807411789894104, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0075277951546013355, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01632852479815483, rank=1, decoded_token=None)
For token 843, log_prob: Logprob(logprob=-0.12699167430400848, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.03602903336286545, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2054326832294464, rank=1, decoded_token=None)
For token 3391, log_prob: Logprob(logprob=-0.025190236046910286, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.08179139345884323, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3728283941745758, rank=1, decoded_token=None)
For token 4370, log_prob: Logprob(logprob=-0.015932045876979828, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-9.9160795211792, rank=121, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-4.163404941558838, rank=8, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.451625347137451, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.517742395401001, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.110421895980835, rank=3, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.476434588432312, rank=2, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.23249292373657227, rank=1, decoded_token=None)
For token 837, log_prob: Logprob(logprob=-0.6536205410957336, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.36460936069488525, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.07394429296255112, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.009883278980851173, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.6059339046478271, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-2.450810432434082, rank=5, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.049487829208374, rank=2, decoded_token=None)
For token 339, log_prob: Logprob(logprob=-0.6980368494987488, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.139958381652832, rank=2, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.1722527742385864, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.015046435408294201, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.19619299471378326, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.604534864425659, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.20953349769115448, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-4.28965425491333, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.45435839891433716, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.02163873240351677, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.2181992381811142, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.001948483637534082, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0003895000845659524, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.05843179672956467, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.4078903198242188, rank=4, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.5167269706726074, rank=4, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.789426326751709, rank=1, decoded_token=None)
For token 2646, log_prob: Logprob(logprob=-3.07065749168396, rank=8, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-2.406424045562744, rank=3, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.64980149269104, rank=7, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-2.804396629333496, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.07326694577932358, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-3.0780837535858154, rank=4, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.01376998983323574, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-0.044610776007175446, rank=1, decoded_token=None)
For token 1023, log_prob: Logprob(logprob=-0.0030948857311159372, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.03554227203130722, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.011711414903402328, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00024434918304905295, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.1415383219718933, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-5.144501686096191, rank=9, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.4923019409179688, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.1131657212972641, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.29162850975990295, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.007929631508886814, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.020741933956742287, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.09790364652872086, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.5009815692901611, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-3.012348175048828, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.7491417527198792, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.07769384235143661, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-7.595197677612305, rank=29, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.1537325382232666, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.010177383199334145, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.005346049088984728, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.0328480489552021, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.024808069691061974, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00047052756417542696, rank=1, decoded_token=None)
For token 1442, log_prob: Logprob(logprob=-4.929317474365234, rank=7, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.5717543363571167, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3725956678390503, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.2139285802841187, rank=1, decoded_token=None)
For token 3940, log_prob: Logprob(logprob=-4.185582160949707, rank=14, decoded_token=None)
For token 449, log_prob: Logprob(logprob=-0.05743381381034851, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.9012429714202881, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.6468750238418579, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.008982133120298386, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-2.8201804161071777, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.6609485149383545, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.6036994457244873, rank=3, decoded_token=None)
For token 1053, log_prob: Logprob(logprob=-2.095855951309204, rank=2, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-3.041916847229004, rank=6, decoded_token=None)
For token 1193, log_prob: Logprob(logprob=-3.4329066276550293, rank=7, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.34858348965644836, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.016673851758241653, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-2.831927537918091, rank=2, decoded_token=None)
For token 433, log_prob: Logprob(logprob=-0.3648470342159271, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.21367542445659637, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.02570355497300625, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0026745761279016733, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.1849979162216187, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.18910124897956848, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.310189723968506, rank=2, decoded_token=None)
For token 2860, log_prob: Logprob(logprob=-5.869146347045898, rank=56, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.027346676215529442, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2362522929906845, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-4.086330413818359, rank=4, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-6.07204008102417, rank=49, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.5300240516662598, rank=7, decoded_token=None)
For token 1514, log_prob: Logprob(logprob=-1.5933805704116821, rank=2, decoded_token=None)
For token 19794, log_prob: Logprob(logprob=-4.322381496429443, rank=6, decoded_token=None)
For token 520, log_prob: Logprob(logprob=-2.5797297954559326, rank=4, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.8274871110916138, rank=1, decoded_token=None)
For token 6246, log_prob: Logprob(logprob=-5.394405841827393, rank=25, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.8071932196617126, rank=1, decoded_token=None)
For token 2684, log_prob: Logprob(logprob=-3.05216908454895, rank=7, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.6914281249046326, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.022183140739798546, rank=1, decoded_token=None)
For token 7041, log_prob: Logprob(logprob=-3.9680607318878174, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3262915313243866, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2028698921203613, rank=1, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-0.6208716034889221, rank=1, decoded_token=None)
For token 389, log_prob: Logprob(logprob=-2.077561855316162, rank=3, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-1.246550440788269, rank=2, decoded_token=None)
For token 2128, log_prob: Logprob(logprob=-0.10005613416433334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.14739106595516205, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-2.883037567138672, rank=4, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-1.1887978315353394, rank=2, decoded_token=None)
For token 12722, log_prob: Logprob(logprob=-4.796601295471191, rank=9, decoded_token=None)
For token 15100, log_prob: Logprob(logprob=-4.097357749938965, rank=7, decoded_token=None)
For token 1268, log_prob: Logprob(logprob=-0.9826016426086426, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.8719936609268188, rank=3, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-1.8892854452133179, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.10686607658863068, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.29455244541168213, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.010281220078468323, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.8527332544326782, rank=1, decoded_token=None)
For token 4460, log_prob: Logprob(logprob=-3.4623050689697266, rank=3, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-1.0008432865142822, rank=2, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.03988252580165863, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002444852376356721, rank=1, decoded_token=None)
For token 2758, log_prob: Logprob(logprob=-3.4538803100585938, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.37787938117980957, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.939903974533081, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.39280885457992554, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.3244531154632568, rank=2, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.10098931938409805, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.7775647640228271, rank=2, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.4539406895637512, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.811513423919678, rank=4, decoded_token=None)
For token 1758, log_prob: Logprob(logprob=-0.7816817164421082, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.9299181699752808, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.44691434502601624, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0014972201315686107, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001538873475510627, rank=1, decoded_token=None)
For token 64002, log_prob: Logprob(logprob=-2.5435791015625, rank=3, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04151042550802231, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.13028867542743683, rank=1, decoded_token=None)
For token 555, log_prob: Logprob(logprob=-0.033352263271808624, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.004435819108039141, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.01422715000808239, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.0882897675037384, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.06284724175930023, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.23540009558200836, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-0.04173900932073593, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.009144803509116173, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.061586808413267136, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013944911770522594, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010585224663373083, rank=1, decoded_token=None)
For token 72159, log_prob: Logprob(logprob=-1.4160566329956055, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021862106397747993, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.14335329830646515, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-5.759881019592285, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005048384889960289, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.10374521464109421, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.17173078656196594, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.02425275556743145, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.045896414667367935, rank=1, decoded_token=None)
For token 3965, log_prob: Logprob(logprob=-0.1629486083984375, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.11125016212463379, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.008519258350133896, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002081372309476137, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00037245964631438255, rank=1, decoded_token=None)
For token 94310, log_prob: Logprob(logprob=-0.7335497140884399, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.02491365373134613, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5532340407371521, rank=1, decoded_token=None)
For token 505, log_prob: Logprob(logprob=-0.10938028991222382, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.010903777554631233, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.055021319538354874, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.02717730961740017, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.014209168031811714, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04492345079779625, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.008596202358603477, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.019180072471499443, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.05701299384236336, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.0044067418202757835, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0004991239402443171, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.3356616497039795, rank=3, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.2321207970380783, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-1.9457459449768066, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-5.169647216796875, rank=25, decoded_token=None)
For token 31878, log_prob: Logprob(logprob=-1.6065828800201416, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.7340887784957886, rank=1, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-8.43447208404541, rank=182, decoded_token=None)
For token 2204, log_prob: Logprob(logprob=-2.5959243774414062, rank=2, decoded_token=None)
For token 8146, log_prob: Logprob(logprob=-5.7852783203125, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.028130831196904182, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-4.079294681549072, rank=13, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.363671213388443, rank=1, decoded_token=None)
For token 2435, log_prob: Logprob(logprob=-4.852097988128662, rank=13, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.3592950105667114, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.8471036553382874, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-4.368374824523926, rank=20, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-4.802444934844971, rank=13, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.16641685366630554, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-2.103876829147339, rank=2, decoded_token=None)
For token 1933, log_prob: Logprob(logprob=-0.12087968736886978, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-3.4264016151428223, rank=5, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-7.156714916229248, rank=17, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.11071085929870605, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-2.5686776638031006, rank=5, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.808468818664551, rank=3, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.08335965126752853, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.6839105486869812, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.7509100437164307, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-2.0333144664764404, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-3.4627275466918945, rank=6, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.025303103029727936, rank=1, decoded_token=None)
For token 706, log_prob: Logprob(logprob=-0.38641905784606934, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.6944231986999512, rank=2, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.2304867058992386, rank=1, decoded_token=None)
For token 649, log_prob: Logprob(logprob=-2.619453191757202, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.055597249418497086, rank=1, decoded_token=None)
For token 1766, log_prob: Logprob(logprob=-2.600069999694824, rank=4, decoded_token=None)
For token 1701, log_prob: Logprob(logprob=-2.2944202423095703, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.4182531535625458, rank=1, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-3.653362512588501, rank=7, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-4.6120195388793945, rank=15, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.18519794940948486, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.9661778211593628, rank=2, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-0.45861148834228516, rank=1, decoded_token=None)
For token 25800, log_prob: Logprob(logprob=-3.94254732131958, rank=9, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.1716657280921936, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.07201958447694778, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-2.19677996635437, rank=3, decoded_token=None)
For token 2650, log_prob: Logprob(logprob=-2.998732566833496, rank=3, decoded_token=None)
For token 1690, log_prob: Logprob(logprob=-0.08345484733581543, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.7078306674957275, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.1414029747247696, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-0.18299917876720428, rank=1, decoded_token=None)
For token 1587, log_prob: Logprob(logprob=-0.9597219228744507, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.0231848806142807, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.0032851321157068014, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-0.10467099398374557, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.15210722386837006, rank=1, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.03904413804411888, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.10596451908349991, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.08106350153684616, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002707508159801364, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.022244233638048172, rank=1, decoded_token=None)
For token 25541, log_prob: Logprob(logprob=-10.945005416870117, rank=916, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.6583459973335266, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0010521834483370185, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001486429391661659, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0014629386132583022, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-4.006361961364746, rank=7, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.023395448923110962, rank=1, decoded_token=None)
For token 21129, log_prob: Logprob(logprob=-5.530216217041016, rank=44, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00830328743904829, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0003693613689392805, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013433984713628888, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0016192194307222962, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.299423933029175, rank=2, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.006571113597601652, rank=1, decoded_token=None)
For token 24599, log_prob: Logprob(logprob=-6.174839973449707, rank=81, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.004514620639383793, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0005022218101657927, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002609150833450258, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.003974872175604105, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-2.5288949012756348, rank=3, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0012215065071359277, rank=1, decoded_token=None)
For token 5154, log_prob: Logprob(logprob=-5.727021217346191, rank=71, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.49432677030563354, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.005106738768517971, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.000403084559366107, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0903244018554688, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.23497126996517181, rank=1, decoded_token=None)
For token 23956, log_prob: Logprob(logprob=-3.718066692352295, rank=5, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-2.335458755493164, rank=3, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-1.303149938583374, rank=1, decoded_token=None)
For token 13890, log_prob: Logprob(logprob=-0.3004732131958008, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.004260392393916845, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5732686519622803, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.590839147567749, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-3.827090263366699, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.22617821395397186, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-3.2456188201904297, rank=8, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.9588005542755127, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.026078294962644577, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0019421778852120042, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.9211294651031494, rank=2, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3348463177680969, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7776240110397339, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01911025308072567, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.888803005218506, rank=6, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.054509516805410385, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7908403277397156, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-1.7093759775161743, rank=2, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-4.15236234664917, rank=6, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.05701907351613045, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006355076562613249, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.6023101806640625, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.06791981309652328, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0033156678546220064, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002029928145930171, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.5973119735717773, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3241466283798218, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.18300116062164307, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.11992660909891129, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2516236305236816, rank=4, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.24058884382247925, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-4.195656776428223, rank=3, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.4392582178115845, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.5084874629974365, rank=3, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.012086370028555393, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.020088670775294304, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-1.0653190612792969, rank=1, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.1461433619260788, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013424679636955261, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013040646445006132, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.36163878440856934, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.1781444400548935, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.15448440611362457, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.06548036634922028, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.4418625831604004, rank=3, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.10001654922962189, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-0.7548537254333496, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.39578503370285034, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5675726532936096, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.03172972798347473, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.059371717274188995, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-1.1219673156738281, rank=2, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.014431270770728588, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0009012927766889334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00019727191829588264, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.1902770847082138, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.08072244375944138, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.11521956324577332, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.035654667764902115, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-0.6550530791282654, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.02330426312983036, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-4.384681224822998, rank=4, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.05364048480987549, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.8038601875305176, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.02270464599132538, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.002600504318252206, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-4.947210788726807, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.018018605187535286, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004600179847329855, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0003252692404203117, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0266454219818115, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.1865871399641037, rank=1, decoded_token=None)
For token 3947, log_prob: Logprob(logprob=-4.355022430419922, rank=10, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-0.1291186660528183, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.15686523914337158, rank=1, decoded_token=None)
For token 9870, log_prob: Logprob(logprob=-7.3711042404174805, rank=175, decoded_token=None)
For token 25247, log_prob: Logprob(logprob=-7.405229091644287, rank=178, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.053574614226818085, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.1845602989196777, rank=2, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.5040314197540283, rank=5, decoded_token=None)
For token 49138, log_prob: Logprob(logprob=-0.8289725184440613, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.020171621814370155, rank=1, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-3.268665075302124, rank=2, decoded_token=None)
For token 955, log_prob: Logprob(logprob=-4.626097679138184, rank=17, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.004487681668251753, rank=1, decoded_token=None)
For token 10054, log_prob: Logprob(logprob=-3.1009275913238525, rank=4, decoded_token=None)
For token 12932, log_prob: Logprob(logprob=-0.01945801079273224, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.2609769403934479, rank=1, decoded_token=None)
For token 2650, log_prob: Logprob(logprob=-1.2525132894515991, rank=1, decoded_token=None)
For token 1690, log_prob: Logprob(logprob=-0.04048464074730873, rank=1, decoded_token=None)
For token 25247, log_prob: Logprob(logprob=-0.3192667067050934, rank=1, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-0.06887322664260864, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.2416324019432068, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.20790553092956543, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-3.1029748916625977, rank=5, decoded_token=None)
For token 49138, log_prob: Logprob(logprob=-0.09661869704723358, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.029441410675644875, rank=1, decoded_token=None)
For token 430, log_prob: Logprob(logprob=-2.282524585723877, rank=4, decoded_token=None)
For token 10054, log_prob: Logprob(logprob=-1.0850210189819336, rank=1, decoded_token=None)
For token 12932, log_prob: Logprob(logprob=-0.0009224927052855492, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.040599800646305084, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.013636058196425438, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0007173825288191438, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.00621055206283927, rank=1, decoded_token=None)
For token 12338, log_prob: Logprob(logprob=-7.496326446533203, rank=197, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.30963918566703796, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0007758706342428923, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-7.045020902296528e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0010788579238578677, rank=1, decoded_token=None)
For token 14087, log_prob: Logprob(logprob=-4.517580509185791, rank=8, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.01048543956130743, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0003829461056739092, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-4.160317621426657e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0006625840906053782, rank=1, decoded_token=None)
For token 12901, log_prob: Logprob(logprob=-9.747176170349121, rank=489, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.016063792631030083, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0007327494095079601, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00011955977242905647, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0034975565504282713, rank=1, decoded_token=None)
For token 16551, log_prob: Logprob(logprob=-4.405282974243164, rank=16, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.021435726433992386, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.0020148707553744316, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0002810560108628124, rank=1, decoded_token=None)
For token 423, log_prob: Logprob(logprob=-2.926046133041382, rank=4, decoded_token=None)
tokens length:  504
output logprobs length:  504
ctxlen:  503
For token 791, log_prob: Logprob(logprob=-3.6213459968566895, rank=4, decoded_token=None)
For token 2768, log_prob: Logprob(logprob=-4.259817600250244, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-2.991230010986328, rank=3, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-9.332494735717773, rank=699, decoded_token=None)
For token 5873, log_prob: Logprob(logprob=-1.0538994073867798, rank=1, decoded_token=None)
For token 4860, log_prob: Logprob(logprob=-0.15532542765140533, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.4161324501037598, rank=9, decoded_token=None)
For token 4291, log_prob: Logprob(logprob=-3.5592703819274902, rank=2, decoded_token=None)
For token 11503, log_prob: Logprob(logprob=-0.9168203473091125, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.4131229519844055, rank=1, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.8898773193359375, rank=4, decoded_token=None)
For token 36256, log_prob: Logprob(logprob=-8.741050720214844, rank=635, decoded_token=None)
For token 38696, log_prob: Logprob(logprob=-3.7625539302825928, rank=8, decoded_token=None)
For token 382, log_prob: Logprob(logprob=-5.573415279388428, rank=19, decoded_token=None)
For token 791, log_prob: Logprob(logprob=-3.544070243835449, rank=4, decoded_token=None)
For token 7187, log_prob: Logprob(logprob=-7.385589122772217, rank=164, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.11412940919399261, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.8478307723999023, rank=2, decoded_token=None)
For token 3363, log_prob: Logprob(logprob=-1.8618664741516113, rank=1, decoded_token=None)
For token 1405, log_prob: Logprob(logprob=-5.9992265701293945, rank=13, decoded_token=None)
For token 33126, log_prob: Logprob(logprob=-9.025006294250488, rank=320, decoded_token=None)
For token 574, log_prob: Logprob(logprob=-5.349676132202148, rank=8, decoded_token=None)
For token 9405, log_prob: Logprob(logprob=-0.4107400178909302, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.5750153660774231, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.7413759231567383, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-7.208454132080078, rank=134, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.7163258790969849, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-8.746551513671875, rank=551, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.46054989099502563, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-4.115103721618652, rank=8, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.2959842085838318, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.1604301482439041, rank=1, decoded_token=None)
For token 907, log_prob: Logprob(logprob=-5.730544567108154, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.036400843411684036, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.9913142323493958, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.306947708129883, rank=14, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.463329553604126, rank=3, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-6.80005407333374, rank=33, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.502928614616394, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.8077549934387207, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.794535756111145, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-0.4624699354171753, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.35287705063819885, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-0.04949808493256569, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-3.705009937286377, rank=5, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.00704288482666, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.2554558217525482, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.19919312000274658, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.9839682579040527, rank=1, decoded_token=None)
For token 9214, log_prob: Logprob(logprob=-7.269443511962891, rank=42, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.3192760646343231, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0035969815216958523, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0006814065272919834, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021883098408579826, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.1909081935882568, rank=1, decoded_token=None)
For token 11758, log_prob: Logprob(logprob=-1.8936516046524048, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00804623682051897, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.001649211160838604, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000596107158344239, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006301296874880791, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.09370359778404236, rank=1, decoded_token=None)
For token 22781, log_prob: Logprob(logprob=-0.7115755081176758, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.007358944974839687, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002253137994557619, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000610999355558306, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.019312677904963493, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.06189332529902458, rank=1, decoded_token=None)
For token 6305, log_prob: Logprob(logprob=-0.6310369372367859, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.25910231471061707, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.9596242904663086, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.060119159519672394, rank=1, decoded_token=None)
For token 362, log_prob: Logprob(logprob=-1.2652478218078613, rank=2, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-1.2315428256988525, rank=2, decoded_token=None)
For token 43819, log_prob: Logprob(logprob=-12.279776573181152, rank=2720, decoded_token=None)
For token 21475, log_prob: Logprob(logprob=-0.6679940819740295, rank=1, decoded_token=None)
For token 1511, log_prob: Logprob(logprob=-6.589616775512695, rank=49, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.3157753944396973, rank=3, decoded_token=None)
For token 6037, log_prob: Logprob(logprob=-6.093387603759766, rank=53, decoded_token=None)
For token 330, log_prob: Logprob(logprob=-3.6796159744262695, rank=9, decoded_token=None)
For token 2261, log_prob: Logprob(logprob=-4.342022895812988, rank=15, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.6981703042984009, rank=1, decoded_token=None)
For token 806, log_prob: Logprob(logprob=-4.951969146728516, rank=18, decoded_token=None)
For token 1, log_prob: Logprob(logprob=-1.3567357063293457, rank=2, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.559495747089386, rank=1, decoded_token=None)
For token 1893, log_prob: Logprob(logprob=-6.321759223937988, rank=44, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-1.3698585033416748, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3447837829589844, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-6.439241409301758, rank=23, decoded_token=None)
For token 6982, log_prob: Logprob(logprob=-3.0471701622009277, rank=5, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-0.703130304813385, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.47134995460510254, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.5008544921875, rank=9, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-4.440498352050781, rank=13, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.9463624954223633, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.14101086556911469, rank=1, decoded_token=None)
For token 1691, log_prob: Logprob(logprob=-0.807411789894104, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0075277951546013355, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01632852479815483, rank=1, decoded_token=None)
For token 843, log_prob: Logprob(logprob=-0.12699167430400848, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.03602903336286545, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2054326832294464, rank=1, decoded_token=None)
For token 3391, log_prob: Logprob(logprob=-0.025190236046910286, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.08179139345884323, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3728283941745758, rank=1, decoded_token=None)
For token 4370, log_prob: Logprob(logprob=-0.015932045876979828, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-9.9160795211792, rank=121, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-4.163404941558838, rank=8, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.451625347137451, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.517742395401001, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.110421895980835, rank=3, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.476434588432312, rank=2, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.23249292373657227, rank=1, decoded_token=None)
For token 837, log_prob: Logprob(logprob=-0.6536205410957336, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.36460936069488525, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.07394429296255112, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.009883278980851173, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.6059339046478271, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-2.450810432434082, rank=5, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.049487829208374, rank=2, decoded_token=None)
For token 339, log_prob: Logprob(logprob=-0.6980368494987488, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.139958381652832, rank=2, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.1722527742385864, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.015046435408294201, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.19619299471378326, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.604534864425659, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.20953349769115448, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-4.28965425491333, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.45435839891433716, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.02163873240351677, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.2181992381811142, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.001948483637534082, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0003895000845659524, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.05843179672956467, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.4078903198242188, rank=4, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.5167269706726074, rank=4, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.789426326751709, rank=1, decoded_token=None)
For token 2646, log_prob: Logprob(logprob=-3.07065749168396, rank=8, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-2.406424045562744, rank=3, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.64980149269104, rank=7, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-2.804396629333496, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.07326694577932358, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-3.0780837535858154, rank=4, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.01376998983323574, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-0.044610776007175446, rank=1, decoded_token=None)
For token 1023, log_prob: Logprob(logprob=-0.0030948857311159372, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.03554227203130722, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.011711414903402328, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00024434918304905295, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.1415383219718933, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-5.144501686096191, rank=9, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.4923019409179688, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.1131657212972641, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.29162850975990295, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.007929631508886814, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.020741933956742287, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.09790364652872086, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.5009815692901611, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-3.012348175048828, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.7491417527198792, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.07769384235143661, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-7.595197677612305, rank=29, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.1537325382232666, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.010177383199334145, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.005346049088984728, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.0328480489552021, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.024808069691061974, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00047052756417542696, rank=1, decoded_token=None)
For token 1442, log_prob: Logprob(logprob=-4.929317474365234, rank=7, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.5717543363571167, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3725956678390503, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.2139285802841187, rank=1, decoded_token=None)
For token 3940, log_prob: Logprob(logprob=-4.185582160949707, rank=14, decoded_token=None)
For token 449, log_prob: Logprob(logprob=-0.05743381381034851, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.9012429714202881, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.6468750238418579, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.008982133120298386, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-2.8201804161071777, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.6609485149383545, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.6036994457244873, rank=3, decoded_token=None)
For token 1053, log_prob: Logprob(logprob=-2.095855951309204, rank=2, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-3.041916847229004, rank=6, decoded_token=None)
For token 1193, log_prob: Logprob(logprob=-3.4329066276550293, rank=7, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.34858348965644836, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.016673851758241653, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-2.831927537918091, rank=2, decoded_token=None)
For token 433, log_prob: Logprob(logprob=-0.3648470342159271, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.21367542445659637, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.02570355497300625, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0026745761279016733, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.1849979162216187, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.18910124897956848, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.310189723968506, rank=2, decoded_token=None)
For token 2860, log_prob: Logprob(logprob=-5.869146347045898, rank=56, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.027346676215529442, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2362522929906845, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-4.086330413818359, rank=4, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-6.07204008102417, rank=49, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.5300240516662598, rank=7, decoded_token=None)
For token 1514, log_prob: Logprob(logprob=-1.5933805704116821, rank=2, decoded_token=None)
For token 19794, log_prob: Logprob(logprob=-4.322381496429443, rank=6, decoded_token=None)
For token 520, log_prob: Logprob(logprob=-2.5797297954559326, rank=4, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.8274871110916138, rank=1, decoded_token=None)
For token 6246, log_prob: Logprob(logprob=-5.394405841827393, rank=25, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.8071932196617126, rank=1, decoded_token=None)
For token 2684, log_prob: Logprob(logprob=-3.05216908454895, rank=7, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.6914281249046326, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.022183140739798546, rank=1, decoded_token=None)
For token 7041, log_prob: Logprob(logprob=-3.9680607318878174, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3262915313243866, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2028698921203613, rank=1, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-0.6208716034889221, rank=1, decoded_token=None)
For token 389, log_prob: Logprob(logprob=-2.077561855316162, rank=3, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-1.246550440788269, rank=2, decoded_token=None)
For token 2128, log_prob: Logprob(logprob=-0.10005613416433334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.14739106595516205, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-2.883037567138672, rank=4, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-1.1887978315353394, rank=2, decoded_token=None)
For token 12722, log_prob: Logprob(logprob=-4.796601295471191, rank=9, decoded_token=None)
For token 15100, log_prob: Logprob(logprob=-4.097357749938965, rank=7, decoded_token=None)
For token 1268, log_prob: Logprob(logprob=-0.9826016426086426, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.8719936609268188, rank=3, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-1.8892854452133179, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.10686607658863068, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.29455244541168213, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.010281220078468323, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.8527332544326782, rank=1, decoded_token=None)
For token 4460, log_prob: Logprob(logprob=-3.4623050689697266, rank=3, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-1.0008432865142822, rank=2, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.03988252580165863, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002444852376356721, rank=1, decoded_token=None)
For token 2758, log_prob: Logprob(logprob=-3.4538803100585938, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.37787938117980957, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.939903974533081, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.39280885457992554, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.3244531154632568, rank=2, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.10098931938409805, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.7775647640228271, rank=2, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.4539406895637512, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.811513423919678, rank=4, decoded_token=None)
For token 1758, log_prob: Logprob(logprob=-0.7816817164421082, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.9299181699752808, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.44691434502601624, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0014972201315686107, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001538873475510627, rank=1, decoded_token=None)
For token 64002, log_prob: Logprob(logprob=-2.5435791015625, rank=3, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04151042550802231, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.13028867542743683, rank=1, decoded_token=None)
For token 555, log_prob: Logprob(logprob=-0.033352263271808624, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.004435819108039141, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.01422715000808239, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.0882897675037384, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.06284724175930023, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.23540009558200836, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-0.04173900932073593, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.009144803509116173, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.061586808413267136, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013944911770522594, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010585224663373083, rank=1, decoded_token=None)
For token 72159, log_prob: Logprob(logprob=-1.4160566329956055, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021862106397747993, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.14335329830646515, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-5.759881019592285, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005048384889960289, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.10374521464109421, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.17173078656196594, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.02425275556743145, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.045896414667367935, rank=1, decoded_token=None)
For token 3965, log_prob: Logprob(logprob=-0.1629486083984375, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.11125016212463379, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.008519258350133896, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002081372309476137, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00037245964631438255, rank=1, decoded_token=None)
For token 94310, log_prob: Logprob(logprob=-0.7335497140884399, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.02491365373134613, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5532340407371521, rank=1, decoded_token=None)
For token 505, log_prob: Logprob(logprob=-0.10938028991222382, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.010903777554631233, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.055021319538354874, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.02717730961740017, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.014209168031811714, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04492345079779625, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.008596202358603477, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.019180072471499443, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.05701299384236336, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.0044067418202757835, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0004991239402443171, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.3356616497039795, rank=3, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.2321207970380783, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-1.9457459449768066, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-5.169647216796875, rank=25, decoded_token=None)
For token 31878, log_prob: Logprob(logprob=-1.6065828800201416, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.7340887784957886, rank=1, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-8.43447208404541, rank=182, decoded_token=None)
For token 2204, log_prob: Logprob(logprob=-2.5959243774414062, rank=2, decoded_token=None)
For token 8146, log_prob: Logprob(logprob=-5.7852783203125, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.028130831196904182, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-4.079294681549072, rank=13, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.363671213388443, rank=1, decoded_token=None)
For token 2435, log_prob: Logprob(logprob=-4.852097988128662, rank=13, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.3592950105667114, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.8471036553382874, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-4.368374824523926, rank=20, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-4.802444934844971, rank=13, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.16641685366630554, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-2.103876829147339, rank=2, decoded_token=None)
For token 1933, log_prob: Logprob(logprob=-0.12087968736886978, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-3.4264016151428223, rank=5, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-7.156714916229248, rank=17, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.11071085929870605, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-2.5686776638031006, rank=5, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.808468818664551, rank=3, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.08335965126752853, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.6839105486869812, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.7509100437164307, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-2.0333144664764404, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-3.4627275466918945, rank=6, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.025303103029727936, rank=1, decoded_token=None)
For token 706, log_prob: Logprob(logprob=-0.38641905784606934, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.6944231986999512, rank=2, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.2304867058992386, rank=1, decoded_token=None)
For token 649, log_prob: Logprob(logprob=-2.619453191757202, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.055597249418497086, rank=1, decoded_token=None)
For token 1766, log_prob: Logprob(logprob=-2.600069999694824, rank=4, decoded_token=None)
For token 1701, log_prob: Logprob(logprob=-2.2944202423095703, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.4182531535625458, rank=1, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-3.653362512588501, rank=7, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-4.6120195388793945, rank=15, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.18519794940948486, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.9661778211593628, rank=2, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-0.45861148834228516, rank=1, decoded_token=None)
For token 25800, log_prob: Logprob(logprob=-3.94254732131958, rank=9, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.1716657280921936, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.07201958447694778, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-2.19677996635437, rank=3, decoded_token=None)
For token 2650, log_prob: Logprob(logprob=-2.998732566833496, rank=3, decoded_token=None)
For token 1690, log_prob: Logprob(logprob=-0.08345484733581543, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.7078306674957275, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.1414029747247696, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-0.18299917876720428, rank=1, decoded_token=None)
For token 1587, log_prob: Logprob(logprob=-0.9597219228744507, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.0231848806142807, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.0032851321157068014, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-0.10467099398374557, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.15210722386837006, rank=1, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.03904413804411888, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.10596451908349991, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.08106350153684616, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002707508159801364, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.022244233638048172, rank=1, decoded_token=None)
For token 25541, log_prob: Logprob(logprob=-10.945005416870117, rank=916, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.6583459973335266, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0010521834483370185, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001486429391661659, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0014629386132583022, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-4.006361961364746, rank=7, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.023395448923110962, rank=1, decoded_token=None)
For token 21129, log_prob: Logprob(logprob=-5.530216217041016, rank=44, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00830328743904829, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0003693613689392805, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013433984713628888, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0016192194307222962, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.299423933029175, rank=2, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.006571113597601652, rank=1, decoded_token=None)
For token 24599, log_prob: Logprob(logprob=-6.174839973449707, rank=81, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.004514620639383793, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0005022218101657927, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002609150833450258, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.003974872175604105, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-2.5288949012756348, rank=3, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0012215065071359277, rank=1, decoded_token=None)
For token 5154, log_prob: Logprob(logprob=-5.727021217346191, rank=71, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.49432677030563354, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.005106738768517971, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.000403084559366107, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0903244018554688, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.23497126996517181, rank=1, decoded_token=None)
For token 23956, log_prob: Logprob(logprob=-3.718066692352295, rank=5, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-2.335458755493164, rank=3, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-1.303149938583374, rank=1, decoded_token=None)
For token 13890, log_prob: Logprob(logprob=-0.3004732131958008, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.004260392393916845, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5732686519622803, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.590839147567749, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-3.827090263366699, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.22617821395397186, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-3.2456188201904297, rank=8, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.9588005542755127, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.026078294962644577, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0019421778852120042, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.9211294651031494, rank=2, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3348463177680969, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7776240110397339, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01911025308072567, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.888803005218506, rank=6, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.054509516805410385, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7908403277397156, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-1.7093759775161743, rank=2, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-4.15236234664917, rank=6, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.05701907351613045, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006355076562613249, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.6023101806640625, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.06791981309652328, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0033156678546220064, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002029928145930171, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.5973119735717773, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3241466283798218, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.18300116062164307, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.11992660909891129, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2516236305236816, rank=4, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.24058884382247925, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-4.195656776428223, rank=3, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.4392582178115845, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.5084874629974365, rank=3, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.012086370028555393, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.020088670775294304, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-1.0653190612792969, rank=1, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.1461433619260788, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013424679636955261, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013040646445006132, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.36163878440856934, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.1781444400548935, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.15448440611362457, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.06548036634922028, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.4418625831604004, rank=3, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.10001654922962189, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-0.7548537254333496, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.39578503370285034, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5675726532936096, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.03172972798347473, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.059371717274188995, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-1.1219673156738281, rank=2, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.014431270770728588, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0009012927766889334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00019727191829588264, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.1902770847082138, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.08072244375944138, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.11521956324577332, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.035654667764902115, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-0.6550530791282654, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.02330426312983036, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-4.384681224822998, rank=4, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.05364048480987549, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.8038601875305176, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.02270464599132538, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.002600504318252206, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-4.947210788726807, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.018018605187535286, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004600179847329855, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0003252692404203117, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0266454219818115, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.1865871399641037, rank=1, decoded_token=None)
For token 3947, log_prob: Logprob(logprob=-4.355022430419922, rank=10, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-0.1291186660528183, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.15686523914337158, rank=1, decoded_token=None)
For token 9870, log_prob: Logprob(logprob=-7.3711042404174805, rank=175, decoded_token=None)
For token 25247, log_prob: Logprob(logprob=-7.405229091644287, rank=178, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.053574614226818085, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.1845602989196777, rank=2, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.5040314197540283, rank=5, decoded_token=None)
For token 49138, log_prob: Logprob(logprob=-0.8289725184440613, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.020171621814370155, rank=1, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-3.268665075302124, rank=2, decoded_token=None)
For token 955, log_prob: Logprob(logprob=-4.626097679138184, rank=17, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.004487681668251753, rank=1, decoded_token=None)
For token 10054, log_prob: Logprob(logprob=-3.1009275913238525, rank=4, decoded_token=None)
For token 12932, log_prob: Logprob(logprob=-0.01945801079273224, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.2609769403934479, rank=1, decoded_token=None)
For token 2650, log_prob: Logprob(logprob=-1.2525132894515991, rank=1, decoded_token=None)
For token 1690, log_prob: Logprob(logprob=-0.04048464074730873, rank=1, decoded_token=None)
For token 25247, log_prob: Logprob(logprob=-0.3192667067050934, rank=1, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-0.06887322664260864, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.2416324019432068, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.20790553092956543, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-3.1029748916625977, rank=5, decoded_token=None)
For token 49138, log_prob: Logprob(logprob=-0.09661869704723358, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.029441410675644875, rank=1, decoded_token=None)
For token 430, log_prob: Logprob(logprob=-2.282524585723877, rank=4, decoded_token=None)
For token 10054, log_prob: Logprob(logprob=-1.0850210189819336, rank=1, decoded_token=None)
For token 12932, log_prob: Logprob(logprob=-0.0009224927052855492, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.040599800646305084, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.013636058196425438, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0007173825288191438, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.00621055206283927, rank=1, decoded_token=None)
For token 12338, log_prob: Logprob(logprob=-7.496326446533203, rank=197, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.30963918566703796, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0007758706342428923, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-7.045020902296528e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0010788579238578677, rank=1, decoded_token=None)
For token 14087, log_prob: Logprob(logprob=-4.517580509185791, rank=8, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.01048543956130743, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0003829461056739092, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-4.160317621426657e-05, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0006625840906053782, rank=1, decoded_token=None)
For token 12901, log_prob: Logprob(logprob=-9.747176170349121, rank=489, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.016063792631030083, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0007327494095079601, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00011955977242905647, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0034975565504282713, rank=1, decoded_token=None)
For token 16551, log_prob: Logprob(logprob=-4.405282974243164, rank=16, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.021435726433992386, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.0020148707553744316, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0002810560108628124, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-0.6760461926460266, rank=1, decoded_token=None)
tokens length:  489
output logprobs length:  489
ctxlen:  488
For token 791, log_prob: Logprob(logprob=-3.6213459968566895, rank=4, decoded_token=None)
For token 2768, log_prob: Logprob(logprob=-4.259817600250244, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-2.991230010986328, rank=3, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-9.332494735717773, rank=699, decoded_token=None)
For token 5873, log_prob: Logprob(logprob=-1.0538994073867798, rank=1, decoded_token=None)
For token 4860, log_prob: Logprob(logprob=-0.15532542765140533, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.4161324501037598, rank=9, decoded_token=None)
For token 4291, log_prob: Logprob(logprob=-3.5592703819274902, rank=2, decoded_token=None)
For token 11503, log_prob: Logprob(logprob=-0.9168203473091125, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.4131229519844055, rank=1, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.8898773193359375, rank=4, decoded_token=None)
For token 36256, log_prob: Logprob(logprob=-8.741050720214844, rank=635, decoded_token=None)
For token 38696, log_prob: Logprob(logprob=-3.7625539302825928, rank=8, decoded_token=None)
For token 382, log_prob: Logprob(logprob=-5.573415279388428, rank=19, decoded_token=None)
For token 791, log_prob: Logprob(logprob=-3.544070243835449, rank=4, decoded_token=None)
For token 7187, log_prob: Logprob(logprob=-7.385589122772217, rank=164, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.11412940919399261, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.8478307723999023, rank=2, decoded_token=None)
For token 3363, log_prob: Logprob(logprob=-1.8618664741516113, rank=1, decoded_token=None)
For token 1405, log_prob: Logprob(logprob=-5.9992265701293945, rank=13, decoded_token=None)
For token 33126, log_prob: Logprob(logprob=-9.025006294250488, rank=320, decoded_token=None)
For token 574, log_prob: Logprob(logprob=-5.349676132202148, rank=8, decoded_token=None)
For token 9405, log_prob: Logprob(logprob=-0.4107400178909302, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.5750153660774231, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.7413759231567383, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-7.208454132080078, rank=134, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.7163258790969849, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-8.746551513671875, rank=551, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.46054989099502563, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-4.115103721618652, rank=8, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.2959842085838318, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.1604301482439041, rank=1, decoded_token=None)
For token 907, log_prob: Logprob(logprob=-5.730544567108154, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.036400843411684036, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.9913142323493958, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.306947708129883, rank=14, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.463329553604126, rank=3, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-6.80005407333374, rank=33, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.502928614616394, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.8077549934387207, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.794535756111145, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-0.4624699354171753, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.35287705063819885, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-0.04949808493256569, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-3.705009937286377, rank=5, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.00704288482666, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.2554558217525482, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.19919312000274658, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.9839682579040527, rank=1, decoded_token=None)
For token 9214, log_prob: Logprob(logprob=-7.269443511962891, rank=42, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.3192760646343231, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0035969815216958523, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0006814065272919834, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021883098408579826, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.1909081935882568, rank=1, decoded_token=None)
For token 11758, log_prob: Logprob(logprob=-1.8936516046524048, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00804623682051897, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.001649211160838604, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000596107158344239, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006301296874880791, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.09370359778404236, rank=1, decoded_token=None)
For token 22781, log_prob: Logprob(logprob=-0.7115755081176758, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.007358944974839687, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002253137994557619, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000610999355558306, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.019312677904963493, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.06189332529902458, rank=1, decoded_token=None)
For token 6305, log_prob: Logprob(logprob=-0.6310369372367859, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.25910231471061707, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.9596242904663086, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.060119159519672394, rank=1, decoded_token=None)
For token 362, log_prob: Logprob(logprob=-1.2652478218078613, rank=2, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-1.2315428256988525, rank=2, decoded_token=None)
For token 43819, log_prob: Logprob(logprob=-12.279776573181152, rank=2720, decoded_token=None)
For token 21475, log_prob: Logprob(logprob=-0.6679940819740295, rank=1, decoded_token=None)
For token 1511, log_prob: Logprob(logprob=-6.589616775512695, rank=49, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.3157753944396973, rank=3, decoded_token=None)
For token 6037, log_prob: Logprob(logprob=-6.093387603759766, rank=53, decoded_token=None)
For token 330, log_prob: Logprob(logprob=-3.6796159744262695, rank=9, decoded_token=None)
For token 2261, log_prob: Logprob(logprob=-4.342022895812988, rank=15, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.6981703042984009, rank=1, decoded_token=None)
For token 806, log_prob: Logprob(logprob=-4.951969146728516, rank=18, decoded_token=None)
For token 1, log_prob: Logprob(logprob=-1.3567357063293457, rank=2, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.559495747089386, rank=1, decoded_token=None)
For token 1893, log_prob: Logprob(logprob=-6.321759223937988, rank=44, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-1.3698585033416748, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3447837829589844, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-6.439241409301758, rank=23, decoded_token=None)
For token 6982, log_prob: Logprob(logprob=-3.0471701622009277, rank=5, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-0.703130304813385, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.47134995460510254, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.5008544921875, rank=9, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-4.440498352050781, rank=13, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.9463624954223633, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.14101086556911469, rank=1, decoded_token=None)
For token 1691, log_prob: Logprob(logprob=-0.807411789894104, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0075277951546013355, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01632852479815483, rank=1, decoded_token=None)
For token 843, log_prob: Logprob(logprob=-0.12699167430400848, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.03602903336286545, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2054326832294464, rank=1, decoded_token=None)
For token 3391, log_prob: Logprob(logprob=-0.025190236046910286, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.08179139345884323, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3728283941745758, rank=1, decoded_token=None)
For token 4370, log_prob: Logprob(logprob=-0.015932045876979828, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-9.9160795211792, rank=121, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-4.163404941558838, rank=8, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.451625347137451, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.517742395401001, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.110421895980835, rank=3, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.476434588432312, rank=2, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.23249292373657227, rank=1, decoded_token=None)
For token 837, log_prob: Logprob(logprob=-0.6536205410957336, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.36460936069488525, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.07394429296255112, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.009883278980851173, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.6059339046478271, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-2.450810432434082, rank=5, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.049487829208374, rank=2, decoded_token=None)
For token 339, log_prob: Logprob(logprob=-0.6980368494987488, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.139958381652832, rank=2, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.1722527742385864, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.015046435408294201, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.19619299471378326, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.604534864425659, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.20953349769115448, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-4.28965425491333, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.45435839891433716, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.02163873240351677, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.2181992381811142, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.001948483637534082, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0003895000845659524, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.05843179672956467, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.4078903198242188, rank=4, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.5167269706726074, rank=4, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.789426326751709, rank=1, decoded_token=None)
For token 2646, log_prob: Logprob(logprob=-3.07065749168396, rank=8, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-2.406424045562744, rank=3, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.64980149269104, rank=7, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-2.804396629333496, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.07326694577932358, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-3.0780837535858154, rank=4, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.01376998983323574, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-0.044610776007175446, rank=1, decoded_token=None)
For token 1023, log_prob: Logprob(logprob=-0.0030948857311159372, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.03554227203130722, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.011711414903402328, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00024434918304905295, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.1415383219718933, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-5.144501686096191, rank=9, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.4923019409179688, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.1131657212972641, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.29162850975990295, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.007929631508886814, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.020741933956742287, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.09790364652872086, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.5009815692901611, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-3.012348175048828, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.7491417527198792, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.07769384235143661, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-7.595197677612305, rank=29, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.1537325382232666, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.010177383199334145, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.005346049088984728, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.0328480489552021, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.024808069691061974, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00047052756417542696, rank=1, decoded_token=None)
For token 1442, log_prob: Logprob(logprob=-4.929317474365234, rank=7, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.5717543363571167, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3725956678390503, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.2139285802841187, rank=1, decoded_token=None)
For token 3940, log_prob: Logprob(logprob=-4.185582160949707, rank=14, decoded_token=None)
For token 449, log_prob: Logprob(logprob=-0.05743381381034851, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.9012429714202881, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.6468750238418579, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.008982133120298386, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-2.8201804161071777, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.6609485149383545, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.6036994457244873, rank=3, decoded_token=None)
For token 1053, log_prob: Logprob(logprob=-2.095855951309204, rank=2, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-3.041916847229004, rank=6, decoded_token=None)
For token 1193, log_prob: Logprob(logprob=-3.4329066276550293, rank=7, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.34858348965644836, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.016673851758241653, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-2.831927537918091, rank=2, decoded_token=None)
For token 433, log_prob: Logprob(logprob=-0.3648470342159271, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.21367542445659637, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.02570355497300625, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0026745761279016733, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.1849979162216187, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.18910124897956848, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.310189723968506, rank=2, decoded_token=None)
For token 2860, log_prob: Logprob(logprob=-5.869146347045898, rank=56, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.027346676215529442, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2362522929906845, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-4.086330413818359, rank=4, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-6.07204008102417, rank=49, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.5300240516662598, rank=7, decoded_token=None)
For token 1514, log_prob: Logprob(logprob=-1.5933805704116821, rank=2, decoded_token=None)
For token 19794, log_prob: Logprob(logprob=-4.322381496429443, rank=6, decoded_token=None)
For token 520, log_prob: Logprob(logprob=-2.5797297954559326, rank=4, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.8274871110916138, rank=1, decoded_token=None)
For token 6246, log_prob: Logprob(logprob=-5.394405841827393, rank=25, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.8071932196617126, rank=1, decoded_token=None)
For token 2684, log_prob: Logprob(logprob=-3.05216908454895, rank=7, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.6914281249046326, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.022183140739798546, rank=1, decoded_token=None)
For token 7041, log_prob: Logprob(logprob=-3.9680607318878174, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3262915313243866, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2028698921203613, rank=1, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-0.6208716034889221, rank=1, decoded_token=None)
For token 389, log_prob: Logprob(logprob=-2.077561855316162, rank=3, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-1.246550440788269, rank=2, decoded_token=None)
For token 2128, log_prob: Logprob(logprob=-0.10005613416433334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.14739106595516205, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-2.883037567138672, rank=4, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-1.1887978315353394, rank=2, decoded_token=None)
For token 12722, log_prob: Logprob(logprob=-4.796601295471191, rank=9, decoded_token=None)
For token 15100, log_prob: Logprob(logprob=-4.097357749938965, rank=7, decoded_token=None)
For token 1268, log_prob: Logprob(logprob=-0.9826016426086426, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.8719936609268188, rank=3, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-1.8892854452133179, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.10686607658863068, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.29455244541168213, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.010281220078468323, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.8527332544326782, rank=1, decoded_token=None)
For token 4460, log_prob: Logprob(logprob=-3.4623050689697266, rank=3, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-1.0008432865142822, rank=2, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.03988252580165863, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002444852376356721, rank=1, decoded_token=None)
For token 2758, log_prob: Logprob(logprob=-3.4538803100585938, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.37787938117980957, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.939903974533081, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.39280885457992554, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.3244531154632568, rank=2, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.10098931938409805, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.7775647640228271, rank=2, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.4539406895637512, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.811513423919678, rank=4, decoded_token=None)
For token 1758, log_prob: Logprob(logprob=-0.7816817164421082, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.9299181699752808, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.44691434502601624, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0014972201315686107, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001538873475510627, rank=1, decoded_token=None)
For token 64002, log_prob: Logprob(logprob=-2.5435791015625, rank=3, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04151042550802231, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.13028867542743683, rank=1, decoded_token=None)
For token 555, log_prob: Logprob(logprob=-0.033352263271808624, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.004435819108039141, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.01422715000808239, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.0882897675037384, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.06284724175930023, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.23540009558200836, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-0.04173900932073593, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.009144803509116173, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.061586808413267136, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013944911770522594, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010585224663373083, rank=1, decoded_token=None)
For token 72159, log_prob: Logprob(logprob=-1.4160566329956055, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021862106397747993, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.14335329830646515, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-5.759881019592285, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005048384889960289, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.10374521464109421, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.17173078656196594, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.02425275556743145, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.045896414667367935, rank=1, decoded_token=None)
For token 3965, log_prob: Logprob(logprob=-0.1629486083984375, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.11125016212463379, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.008519258350133896, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002081372309476137, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00037245964631438255, rank=1, decoded_token=None)
For token 94310, log_prob: Logprob(logprob=-0.7335497140884399, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.02491365373134613, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5532340407371521, rank=1, decoded_token=None)
For token 505, log_prob: Logprob(logprob=-0.10938028991222382, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.010903777554631233, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.055021319538354874, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.02717730961740017, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.014209168031811714, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04492345079779625, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.008596202358603477, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.019180072471499443, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.05701299384236336, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.0044067418202757835, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0004991239402443171, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.3356616497039795, rank=3, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.2321207970380783, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-1.9457459449768066, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-5.169647216796875, rank=25, decoded_token=None)
For token 31878, log_prob: Logprob(logprob=-1.6065828800201416, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.7340887784957886, rank=1, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-8.43447208404541, rank=182, decoded_token=None)
For token 2204, log_prob: Logprob(logprob=-2.5959243774414062, rank=2, decoded_token=None)
For token 8146, log_prob: Logprob(logprob=-5.7852783203125, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.028130831196904182, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-4.079294681549072, rank=13, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.363671213388443, rank=1, decoded_token=None)
For token 2435, log_prob: Logprob(logprob=-4.852097988128662, rank=13, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.3592950105667114, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.8471036553382874, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-4.368374824523926, rank=20, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-4.802444934844971, rank=13, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.16641685366630554, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-2.103876829147339, rank=2, decoded_token=None)
For token 1933, log_prob: Logprob(logprob=-0.12087968736886978, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-3.4264016151428223, rank=5, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-7.156714916229248, rank=17, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.11071085929870605, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-2.5686776638031006, rank=5, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.808468818664551, rank=3, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.08335965126752853, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.6839105486869812, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.7509100437164307, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-2.0333144664764404, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-3.4627275466918945, rank=6, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.025303103029727936, rank=1, decoded_token=None)
For token 706, log_prob: Logprob(logprob=-0.38641905784606934, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.6944231986999512, rank=2, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.2304867058992386, rank=1, decoded_token=None)
For token 649, log_prob: Logprob(logprob=-2.619453191757202, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.055597249418497086, rank=1, decoded_token=None)
For token 1766, log_prob: Logprob(logprob=-2.600069999694824, rank=4, decoded_token=None)
For token 1701, log_prob: Logprob(logprob=-2.2944202423095703, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.4182531535625458, rank=1, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-3.653362512588501, rank=7, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-4.6120195388793945, rank=15, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.18519794940948486, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.9661778211593628, rank=2, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-0.45861148834228516, rank=1, decoded_token=None)
For token 25800, log_prob: Logprob(logprob=-3.94254732131958, rank=9, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.1716657280921936, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.07201958447694778, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-2.19677996635437, rank=3, decoded_token=None)
For token 2650, log_prob: Logprob(logprob=-2.998732566833496, rank=3, decoded_token=None)
For token 1690, log_prob: Logprob(logprob=-0.08345484733581543, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.7078306674957275, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.1414029747247696, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-0.18299917876720428, rank=1, decoded_token=None)
For token 1587, log_prob: Logprob(logprob=-0.9597219228744507, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.0231848806142807, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.0032851321157068014, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-0.10467099398374557, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.15210722386837006, rank=1, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.03904413804411888, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.10596451908349991, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.08106350153684616, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002707508159801364, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.022244233638048172, rank=1, decoded_token=None)
For token 25541, log_prob: Logprob(logprob=-10.945005416870117, rank=916, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.6583459973335266, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0010521834483370185, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001486429391661659, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0014629386132583022, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-4.006361961364746, rank=7, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.023395448923110962, rank=1, decoded_token=None)
For token 21129, log_prob: Logprob(logprob=-5.530216217041016, rank=44, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00830328743904829, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0003693613689392805, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013433984713628888, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0016192194307222962, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.299423933029175, rank=2, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.006571113597601652, rank=1, decoded_token=None)
For token 24599, log_prob: Logprob(logprob=-6.174839973449707, rank=81, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.004514620639383793, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0005022218101657927, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002609150833450258, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.003974872175604105, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-2.5288949012756348, rank=3, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0012215065071359277, rank=1, decoded_token=None)
For token 5154, log_prob: Logprob(logprob=-5.727021217346191, rank=71, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.49432677030563354, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.005106738768517971, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.000403084559366107, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0903244018554688, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.23497126996517181, rank=1, decoded_token=None)
For token 23956, log_prob: Logprob(logprob=-3.718066692352295, rank=5, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-2.335458755493164, rank=3, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-1.303149938583374, rank=1, decoded_token=None)
For token 13890, log_prob: Logprob(logprob=-0.3004732131958008, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.004260392393916845, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5732686519622803, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.590839147567749, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-3.827090263366699, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.22617821395397186, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-3.2456188201904297, rank=8, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.9588005542755127, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.026078294962644577, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0019421778852120042, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.9211294651031494, rank=2, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3348463177680969, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7776240110397339, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01911025308072567, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.888803005218506, rank=6, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.054509516805410385, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7908403277397156, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-1.7093759775161743, rank=2, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-4.15236234664917, rank=6, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.05701907351613045, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006355076562613249, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.6023101806640625, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.06791981309652328, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0033156678546220064, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002029928145930171, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.5973119735717773, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3241466283798218, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.18300116062164307, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.11992660909891129, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2516236305236816, rank=4, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.24058884382247925, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-4.195656776428223, rank=3, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.4392582178115845, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.5084874629974365, rank=3, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.012086370028555393, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.020088670775294304, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-1.0653190612792969, rank=1, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.1461433619260788, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013424679636955261, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013040646445006132, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.36163878440856934, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.1781444400548935, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.15448440611362457, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.06548036634922028, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.4418625831604004, rank=3, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.10001654922962189, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-0.7548537254333496, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.39578503370285034, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5675726532936096, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.03172972798347473, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.059371717274188995, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-1.1219673156738281, rank=2, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.014431270770728588, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0009012927766889334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00019727191829588264, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.1902770847082138, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.08072244375944138, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.11521956324577332, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.035654667764902115, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-0.6550530791282654, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.02330426312983036, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-4.384681224822998, rank=4, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.05364048480987549, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.8038601875305176, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.02270464599132538, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.002600504318252206, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-4.947210788726807, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.018018605187535286, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004600179847329855, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0003252692404203117, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0266454219818115, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.1865871399641037, rank=1, decoded_token=None)
For token 83445, log_prob: Logprob(logprob=-9.417522430419922, rank=611, decoded_token=None)
For token 25173, log_prob: Logprob(logprob=-6.057499885559082, rank=17, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.606786012649536, rank=4, decoded_token=None)
For token 2120, log_prob: Logprob(logprob=-4.803981304168701, rank=15, decoded_token=None)
For token 25173, log_prob: Logprob(logprob=-1.608124017715454, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.11478708684444427, rank=1, decoded_token=None)
For token 18, log_prob: Logprob(logprob=-1.447336196899414, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.7482445240020752, rank=1, decoded_token=None)
For token 369, log_prob: Logprob(logprob=-2.2536251544952393, rank=3, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-1.3945178985595703, rank=2, decoded_token=None)
For token 284, log_prob: Logprob(logprob=-0.05774757266044617, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5983477830886841, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-1.9999263286590576, rank=3, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.5314874053001404, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.042273957282304764, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002056509256362915, rank=1, decoded_token=None)
For token 25173, log_prob: Logprob(logprob=-0.5108471512794495, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.122591257095337, rank=6, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.006182474084198475, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0008985534077510238, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010907054820563644, rank=1, decoded_token=None)
For token 25173, log_prob: Logprob(logprob=-0.40825405716896057, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-1.7694283723831177, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.01909996196627617, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0010840974282473326, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010549465514486656, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5568356513977051, rank=1, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-5.176999092102051, rank=9, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0042177774012088776, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0008438840159215033, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00021598390594590455, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.1352090835571289, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.669875144958496, rank=4, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0732363685965538, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004061426967382431, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0003469580551609397, rank=1, decoded_token=None)
For token 356, log_prob: Logprob(logprob=-1.7217726707458496, rank=3, decoded_token=None)
tokens length:  489
output logprobs length:  489
ctxlen:  488
For token 791, log_prob: Logprob(logprob=-3.6213459968566895, rank=4, decoded_token=None)
For token 2768, log_prob: Logprob(logprob=-4.259817600250244, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-2.991230010986328, rank=3, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-9.332494735717773, rank=699, decoded_token=None)
For token 5873, log_prob: Logprob(logprob=-1.0538994073867798, rank=1, decoded_token=None)
For token 4860, log_prob: Logprob(logprob=-0.15532542765140533, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.4161324501037598, rank=9, decoded_token=None)
For token 4291, log_prob: Logprob(logprob=-3.5592703819274902, rank=2, decoded_token=None)
For token 11503, log_prob: Logprob(logprob=-0.9168203473091125, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.4131229519844055, rank=1, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.8898773193359375, rank=4, decoded_token=None)
For token 36256, log_prob: Logprob(logprob=-8.741050720214844, rank=635, decoded_token=None)
For token 38696, log_prob: Logprob(logprob=-3.7625539302825928, rank=8, decoded_token=None)
For token 382, log_prob: Logprob(logprob=-5.573415279388428, rank=19, decoded_token=None)
For token 791, log_prob: Logprob(logprob=-3.544070243835449, rank=4, decoded_token=None)
For token 7187, log_prob: Logprob(logprob=-7.385589122772217, rank=164, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.11412940919399261, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.8478307723999023, rank=2, decoded_token=None)
For token 3363, log_prob: Logprob(logprob=-1.8618664741516113, rank=1, decoded_token=None)
For token 1405, log_prob: Logprob(logprob=-5.9992265701293945, rank=13, decoded_token=None)
For token 33126, log_prob: Logprob(logprob=-9.025006294250488, rank=320, decoded_token=None)
For token 574, log_prob: Logprob(logprob=-5.349676132202148, rank=8, decoded_token=None)
For token 9405, log_prob: Logprob(logprob=-0.4107400178909302, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.5750153660774231, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.7413759231567383, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-7.208454132080078, rank=134, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.7163258790969849, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-8.746551513671875, rank=551, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.46054989099502563, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-4.115103721618652, rank=8, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.2959842085838318, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.1604301482439041, rank=1, decoded_token=None)
For token 907, log_prob: Logprob(logprob=-5.730544567108154, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.036400843411684036, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.9913142323493958, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.306947708129883, rank=14, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.463329553604126, rank=3, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-6.80005407333374, rank=33, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.502928614616394, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.8077549934387207, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.794535756111145, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-0.4624699354171753, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.35287705063819885, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-0.04949808493256569, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-3.705009937286377, rank=5, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.00704288482666, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.2554558217525482, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.19919312000274658, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.9839682579040527, rank=1, decoded_token=None)
For token 9214, log_prob: Logprob(logprob=-7.269443511962891, rank=42, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.3192760646343231, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0035969815216958523, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0006814065272919834, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021883098408579826, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.1909081935882568, rank=1, decoded_token=None)
For token 11758, log_prob: Logprob(logprob=-1.8936516046524048, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00804623682051897, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.001649211160838604, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000596107158344239, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006301296874880791, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.09370359778404236, rank=1, decoded_token=None)
For token 22781, log_prob: Logprob(logprob=-0.7115755081176758, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.007358944974839687, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002253137994557619, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000610999355558306, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.019312677904963493, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.06189332529902458, rank=1, decoded_token=None)
For token 6305, log_prob: Logprob(logprob=-0.6310369372367859, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.25910231471061707, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.9596242904663086, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.060119159519672394, rank=1, decoded_token=None)
For token 362, log_prob: Logprob(logprob=-1.2652478218078613, rank=2, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-1.2315428256988525, rank=2, decoded_token=None)
For token 43819, log_prob: Logprob(logprob=-12.279776573181152, rank=2720, decoded_token=None)
For token 21475, log_prob: Logprob(logprob=-0.6679940819740295, rank=1, decoded_token=None)
For token 1511, log_prob: Logprob(logprob=-6.589616775512695, rank=49, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.3157753944396973, rank=3, decoded_token=None)
For token 6037, log_prob: Logprob(logprob=-6.093387603759766, rank=53, decoded_token=None)
For token 330, log_prob: Logprob(logprob=-3.6796159744262695, rank=9, decoded_token=None)
For token 2261, log_prob: Logprob(logprob=-4.342022895812988, rank=15, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.6981703042984009, rank=1, decoded_token=None)
For token 806, log_prob: Logprob(logprob=-4.951969146728516, rank=18, decoded_token=None)
For token 1, log_prob: Logprob(logprob=-1.3567357063293457, rank=2, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.559495747089386, rank=1, decoded_token=None)
For token 1893, log_prob: Logprob(logprob=-6.321759223937988, rank=44, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-1.3698585033416748, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3447837829589844, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-6.439241409301758, rank=23, decoded_token=None)
For token 6982, log_prob: Logprob(logprob=-3.0471701622009277, rank=5, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-0.703130304813385, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.47134995460510254, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.5008544921875, rank=9, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-4.440498352050781, rank=13, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.9463624954223633, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.14101086556911469, rank=1, decoded_token=None)
For token 1691, log_prob: Logprob(logprob=-0.807411789894104, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0075277951546013355, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01632852479815483, rank=1, decoded_token=None)
For token 843, log_prob: Logprob(logprob=-0.12699167430400848, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.03602903336286545, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2054326832294464, rank=1, decoded_token=None)
For token 3391, log_prob: Logprob(logprob=-0.025190236046910286, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.08179139345884323, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3728283941745758, rank=1, decoded_token=None)
For token 4370, log_prob: Logprob(logprob=-0.015932045876979828, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-9.9160795211792, rank=121, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-4.163404941558838, rank=8, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.451625347137451, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.517742395401001, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.110421895980835, rank=3, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.476434588432312, rank=2, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.23249292373657227, rank=1, decoded_token=None)
For token 837, log_prob: Logprob(logprob=-0.6536205410957336, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.36460936069488525, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.07394429296255112, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.009883278980851173, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.6059339046478271, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-2.450810432434082, rank=5, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.049487829208374, rank=2, decoded_token=None)
For token 339, log_prob: Logprob(logprob=-0.6980368494987488, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.139958381652832, rank=2, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.1722527742385864, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.015046435408294201, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.19619299471378326, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.604534864425659, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.20953349769115448, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-4.28965425491333, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.45435839891433716, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.02163873240351677, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.2181992381811142, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.001948483637534082, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0003895000845659524, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.05843179672956467, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.4078903198242188, rank=4, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.5167269706726074, rank=4, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.789426326751709, rank=1, decoded_token=None)
For token 2646, log_prob: Logprob(logprob=-3.07065749168396, rank=8, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-2.406424045562744, rank=3, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.64980149269104, rank=7, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-2.804396629333496, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.07326694577932358, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-3.0780837535858154, rank=4, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.01376998983323574, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-0.044610776007175446, rank=1, decoded_token=None)
For token 1023, log_prob: Logprob(logprob=-0.0030948857311159372, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.03554227203130722, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.011711414903402328, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00024434918304905295, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.1415383219718933, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-5.144501686096191, rank=9, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.4923019409179688, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.1131657212972641, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.29162850975990295, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.007929631508886814, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.020741933956742287, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.09790364652872086, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.5009815692901611, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-3.012348175048828, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.7491417527198792, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.07769384235143661, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-7.595197677612305, rank=29, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.1537325382232666, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.010177383199334145, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.005346049088984728, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.0328480489552021, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.024808069691061974, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00047052756417542696, rank=1, decoded_token=None)
For token 1442, log_prob: Logprob(logprob=-4.929317474365234, rank=7, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.5717543363571167, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3725956678390503, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.2139285802841187, rank=1, decoded_token=None)
For token 3940, log_prob: Logprob(logprob=-4.185582160949707, rank=14, decoded_token=None)
For token 449, log_prob: Logprob(logprob=-0.05743381381034851, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.9012429714202881, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.6468750238418579, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.008982133120298386, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-2.8201804161071777, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.6609485149383545, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.6036994457244873, rank=3, decoded_token=None)
For token 1053, log_prob: Logprob(logprob=-2.095855951309204, rank=2, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-3.041916847229004, rank=6, decoded_token=None)
For token 1193, log_prob: Logprob(logprob=-3.4329066276550293, rank=7, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.34858348965644836, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.016673851758241653, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-2.831927537918091, rank=2, decoded_token=None)
For token 433, log_prob: Logprob(logprob=-0.3648470342159271, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.21367542445659637, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.02570355497300625, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0026745761279016733, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.1849979162216187, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.18910124897956848, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.310189723968506, rank=2, decoded_token=None)
For token 2860, log_prob: Logprob(logprob=-5.869146347045898, rank=56, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.027346676215529442, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2362522929906845, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-4.086330413818359, rank=4, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-6.07204008102417, rank=49, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.5300240516662598, rank=7, decoded_token=None)
For token 1514, log_prob: Logprob(logprob=-1.5933805704116821, rank=2, decoded_token=None)
For token 19794, log_prob: Logprob(logprob=-4.322381496429443, rank=6, decoded_token=None)
For token 520, log_prob: Logprob(logprob=-2.5797297954559326, rank=4, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.8274871110916138, rank=1, decoded_token=None)
For token 6246, log_prob: Logprob(logprob=-5.394405841827393, rank=25, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.8071932196617126, rank=1, decoded_token=None)
For token 2684, log_prob: Logprob(logprob=-3.05216908454895, rank=7, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.6914281249046326, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.022183140739798546, rank=1, decoded_token=None)
For token 7041, log_prob: Logprob(logprob=-3.9680607318878174, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3262915313243866, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2028698921203613, rank=1, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-0.6208716034889221, rank=1, decoded_token=None)
For token 389, log_prob: Logprob(logprob=-2.077561855316162, rank=3, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-1.246550440788269, rank=2, decoded_token=None)
For token 2128, log_prob: Logprob(logprob=-0.10005613416433334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.14739106595516205, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-2.883037567138672, rank=4, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-1.1887978315353394, rank=2, decoded_token=None)
For token 12722, log_prob: Logprob(logprob=-4.796601295471191, rank=9, decoded_token=None)
For token 15100, log_prob: Logprob(logprob=-4.097357749938965, rank=7, decoded_token=None)
For token 1268, log_prob: Logprob(logprob=-0.9826016426086426, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.8719936609268188, rank=3, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-1.8892854452133179, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.10686607658863068, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.29455244541168213, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.010281220078468323, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.8527332544326782, rank=1, decoded_token=None)
For token 4460, log_prob: Logprob(logprob=-3.4623050689697266, rank=3, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-1.0008432865142822, rank=2, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.03988252580165863, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002444852376356721, rank=1, decoded_token=None)
For token 2758, log_prob: Logprob(logprob=-3.4538803100585938, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.37787938117980957, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.939903974533081, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.39280885457992554, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.3244531154632568, rank=2, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.10098931938409805, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.7775647640228271, rank=2, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.4539406895637512, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.811513423919678, rank=4, decoded_token=None)
For token 1758, log_prob: Logprob(logprob=-0.7816817164421082, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.9299181699752808, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.44691434502601624, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0014972201315686107, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001538873475510627, rank=1, decoded_token=None)
For token 64002, log_prob: Logprob(logprob=-2.5435791015625, rank=3, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04151042550802231, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.13028867542743683, rank=1, decoded_token=None)
For token 555, log_prob: Logprob(logprob=-0.033352263271808624, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.004435819108039141, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.01422715000808239, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.0882897675037384, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.06284724175930023, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.23540009558200836, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-0.04173900932073593, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.009144803509116173, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.061586808413267136, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013944911770522594, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010585224663373083, rank=1, decoded_token=None)
For token 72159, log_prob: Logprob(logprob=-1.4160566329956055, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021862106397747993, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.14335329830646515, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-5.759881019592285, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005048384889960289, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.10374521464109421, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.17173078656196594, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.02425275556743145, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.045896414667367935, rank=1, decoded_token=None)
For token 3965, log_prob: Logprob(logprob=-0.1629486083984375, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.11125016212463379, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.008519258350133896, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002081372309476137, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00037245964631438255, rank=1, decoded_token=None)
For token 94310, log_prob: Logprob(logprob=-0.7335497140884399, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.02491365373134613, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5532340407371521, rank=1, decoded_token=None)
For token 505, log_prob: Logprob(logprob=-0.10938028991222382, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.010903777554631233, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.055021319538354874, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.02717730961740017, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.014209168031811714, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04492345079779625, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.008596202358603477, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.019180072471499443, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.05701299384236336, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.0044067418202757835, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0004991239402443171, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.3356616497039795, rank=3, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.2321207970380783, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-1.9457459449768066, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-5.169647216796875, rank=25, decoded_token=None)
For token 31878, log_prob: Logprob(logprob=-1.6065828800201416, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.7340887784957886, rank=1, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-8.43447208404541, rank=182, decoded_token=None)
For token 2204, log_prob: Logprob(logprob=-2.5959243774414062, rank=2, decoded_token=None)
For token 8146, log_prob: Logprob(logprob=-5.7852783203125, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.028130831196904182, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-4.079294681549072, rank=13, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.363671213388443, rank=1, decoded_token=None)
For token 2435, log_prob: Logprob(logprob=-4.852097988128662, rank=13, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.3592950105667114, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.8471036553382874, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-4.368374824523926, rank=20, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-4.802444934844971, rank=13, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.16641685366630554, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-2.103876829147339, rank=2, decoded_token=None)
For token 1933, log_prob: Logprob(logprob=-0.12087968736886978, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-3.4264016151428223, rank=5, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-7.156714916229248, rank=17, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.11071085929870605, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-2.5686776638031006, rank=5, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.808468818664551, rank=3, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.08335965126752853, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.6839105486869812, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.7509100437164307, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-2.0333144664764404, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-3.4627275466918945, rank=6, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.025303103029727936, rank=1, decoded_token=None)
For token 706, log_prob: Logprob(logprob=-0.38641905784606934, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.6944231986999512, rank=2, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.2304867058992386, rank=1, decoded_token=None)
For token 649, log_prob: Logprob(logprob=-2.619453191757202, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.055597249418497086, rank=1, decoded_token=None)
For token 1766, log_prob: Logprob(logprob=-2.600069999694824, rank=4, decoded_token=None)
For token 1701, log_prob: Logprob(logprob=-2.2944202423095703, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.4182531535625458, rank=1, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-3.653362512588501, rank=7, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-4.6120195388793945, rank=15, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.18519794940948486, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.9661778211593628, rank=2, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-0.45861148834228516, rank=1, decoded_token=None)
For token 25800, log_prob: Logprob(logprob=-3.94254732131958, rank=9, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.1716657280921936, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.07201958447694778, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-2.19677996635437, rank=3, decoded_token=None)
For token 2650, log_prob: Logprob(logprob=-2.998732566833496, rank=3, decoded_token=None)
For token 1690, log_prob: Logprob(logprob=-0.08345484733581543, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.7078306674957275, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.1414029747247696, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-0.18299917876720428, rank=1, decoded_token=None)
For token 1587, log_prob: Logprob(logprob=-0.9597219228744507, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.0231848806142807, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.0032851321157068014, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-0.10467099398374557, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.15210722386837006, rank=1, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.03904413804411888, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.10596451908349991, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.08106350153684616, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002707508159801364, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.022244233638048172, rank=1, decoded_token=None)
For token 25541, log_prob: Logprob(logprob=-10.945005416870117, rank=916, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.6583459973335266, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0010521834483370185, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001486429391661659, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0014629386132583022, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-4.006361961364746, rank=7, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.023395448923110962, rank=1, decoded_token=None)
For token 21129, log_prob: Logprob(logprob=-5.530216217041016, rank=44, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00830328743904829, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0003693613689392805, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013433984713628888, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0016192194307222962, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.299423933029175, rank=2, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.006571113597601652, rank=1, decoded_token=None)
For token 24599, log_prob: Logprob(logprob=-6.174839973449707, rank=81, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.004514620639383793, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0005022218101657927, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002609150833450258, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.003974872175604105, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-2.5288949012756348, rank=3, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0012215065071359277, rank=1, decoded_token=None)
For token 5154, log_prob: Logprob(logprob=-5.727021217346191, rank=71, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.49432677030563354, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.005106738768517971, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.000403084559366107, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0903244018554688, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.23497126996517181, rank=1, decoded_token=None)
For token 23956, log_prob: Logprob(logprob=-3.718066692352295, rank=5, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-2.335458755493164, rank=3, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-1.303149938583374, rank=1, decoded_token=None)
For token 13890, log_prob: Logprob(logprob=-0.3004732131958008, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.004260392393916845, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5732686519622803, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.590839147567749, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-3.827090263366699, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.22617821395397186, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-3.2456188201904297, rank=8, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.9588005542755127, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.026078294962644577, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0019421778852120042, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.9211294651031494, rank=2, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3348463177680969, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7776240110397339, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01911025308072567, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.888803005218506, rank=6, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.054509516805410385, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7908403277397156, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-1.7093759775161743, rank=2, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-4.15236234664917, rank=6, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.05701907351613045, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006355076562613249, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.6023101806640625, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.06791981309652328, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0033156678546220064, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002029928145930171, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.5973119735717773, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3241466283798218, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.18300116062164307, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.11992660909891129, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2516236305236816, rank=4, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.24058884382247925, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-4.195656776428223, rank=3, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.4392582178115845, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.5084874629974365, rank=3, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.012086370028555393, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.020088670775294304, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-1.0653190612792969, rank=1, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.1461433619260788, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013424679636955261, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013040646445006132, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.36163878440856934, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.1781444400548935, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.15448440611362457, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.06548036634922028, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.4418625831604004, rank=3, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.10001654922962189, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-0.7548537254333496, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.39578503370285034, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5675726532936096, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.03172972798347473, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.059371717274188995, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-1.1219673156738281, rank=2, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.014431270770728588, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0009012927766889334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00019727191829588264, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.1902770847082138, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.08072244375944138, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.11521956324577332, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.035654667764902115, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-0.6550530791282654, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.02330426312983036, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-4.384681224822998, rank=4, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.05364048480987549, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.8038601875305176, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.02270464599132538, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.002600504318252206, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-4.947210788726807, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.018018605187535286, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004600179847329855, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0003252692404203117, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0266454219818115, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.1865871399641037, rank=1, decoded_token=None)
For token 83445, log_prob: Logprob(logprob=-9.417522430419922, rank=611, decoded_token=None)
For token 25173, log_prob: Logprob(logprob=-6.057499885559082, rank=17, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.606786012649536, rank=4, decoded_token=None)
For token 2120, log_prob: Logprob(logprob=-4.803981304168701, rank=15, decoded_token=None)
For token 25173, log_prob: Logprob(logprob=-1.608124017715454, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.11478708684444427, rank=1, decoded_token=None)
For token 18, log_prob: Logprob(logprob=-1.447336196899414, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.7482445240020752, rank=1, decoded_token=None)
For token 369, log_prob: Logprob(logprob=-2.2536251544952393, rank=3, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-1.3945178985595703, rank=2, decoded_token=None)
For token 284, log_prob: Logprob(logprob=-0.05774757266044617, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5983477830886841, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-1.9999263286590576, rank=3, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.5314874053001404, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.042273957282304764, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002056509256362915, rank=1, decoded_token=None)
For token 25173, log_prob: Logprob(logprob=-0.5108471512794495, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.122591257095337, rank=6, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.006182474084198475, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0008985534077510238, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010907054820563644, rank=1, decoded_token=None)
For token 25173, log_prob: Logprob(logprob=-0.40825405716896057, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-1.7694283723831177, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.01909996196627617, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0010840974282473326, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010549465514486656, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5568356513977051, rank=1, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-5.176999092102051, rank=9, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0042177774012088776, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0008438840159215033, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00021598390594590455, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.1352090835571289, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.669875144958496, rank=4, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0732363685965538, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004061426967382431, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0003469580551609397, rank=1, decoded_token=None)
For token 362, log_prob: Logprob(logprob=-1.0967726707458496, rank=2, decoded_token=None)
tokens length:  489
output logprobs length:  489
ctxlen:  488
For token 791, log_prob: Logprob(logprob=-3.6213459968566895, rank=4, decoded_token=None)
For token 2768, log_prob: Logprob(logprob=-4.259817600250244, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-2.991230010986328, rank=3, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-9.332494735717773, rank=699, decoded_token=None)
For token 5873, log_prob: Logprob(logprob=-1.0538994073867798, rank=1, decoded_token=None)
For token 4860, log_prob: Logprob(logprob=-0.15532542765140533, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.4161324501037598, rank=9, decoded_token=None)
For token 4291, log_prob: Logprob(logprob=-3.5592703819274902, rank=2, decoded_token=None)
For token 11503, log_prob: Logprob(logprob=-0.9168203473091125, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.4131229519844055, rank=1, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.8898773193359375, rank=4, decoded_token=None)
For token 36256, log_prob: Logprob(logprob=-8.741050720214844, rank=635, decoded_token=None)
For token 38696, log_prob: Logprob(logprob=-3.7625539302825928, rank=8, decoded_token=None)
For token 382, log_prob: Logprob(logprob=-5.573415279388428, rank=19, decoded_token=None)
For token 791, log_prob: Logprob(logprob=-3.544070243835449, rank=4, decoded_token=None)
For token 7187, log_prob: Logprob(logprob=-7.385589122772217, rank=164, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.11412940919399261, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.8478307723999023, rank=2, decoded_token=None)
For token 3363, log_prob: Logprob(logprob=-1.8618664741516113, rank=1, decoded_token=None)
For token 1405, log_prob: Logprob(logprob=-5.9992265701293945, rank=13, decoded_token=None)
For token 33126, log_prob: Logprob(logprob=-9.025006294250488, rank=320, decoded_token=None)
For token 574, log_prob: Logprob(logprob=-5.349676132202148, rank=8, decoded_token=None)
For token 9405, log_prob: Logprob(logprob=-0.4107400178909302, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.5750153660774231, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.7413759231567383, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-7.208454132080078, rank=134, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.7163258790969849, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-8.746551513671875, rank=551, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.46054989099502563, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-4.115103721618652, rank=8, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.2959842085838318, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.1604301482439041, rank=1, decoded_token=None)
For token 907, log_prob: Logprob(logprob=-5.730544567108154, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.036400843411684036, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.9913142323493958, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.306947708129883, rank=14, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.463329553604126, rank=3, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-6.80005407333374, rank=33, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.502928614616394, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.8077549934387207, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.794535756111145, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-0.4624699354171753, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.35287705063819885, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-0.04949808493256569, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-3.705009937286377, rank=5, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.00704288482666, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.2554558217525482, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.19919312000274658, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.9839682579040527, rank=1, decoded_token=None)
For token 9214, log_prob: Logprob(logprob=-7.269443511962891, rank=42, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.3192760646343231, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0035969815216958523, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0006814065272919834, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021883098408579826, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.1909081935882568, rank=1, decoded_token=None)
For token 11758, log_prob: Logprob(logprob=-1.8936516046524048, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00804623682051897, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.001649211160838604, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000596107158344239, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006301296874880791, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.09370359778404236, rank=1, decoded_token=None)
For token 22781, log_prob: Logprob(logprob=-0.7115755081176758, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.007358944974839687, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002253137994557619, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000610999355558306, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.019312677904963493, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.06189332529902458, rank=1, decoded_token=None)
For token 6305, log_prob: Logprob(logprob=-0.6310369372367859, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.25910231471061707, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.9596242904663086, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.060119159519672394, rank=1, decoded_token=None)
For token 362, log_prob: Logprob(logprob=-1.2652478218078613, rank=2, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-1.2315428256988525, rank=2, decoded_token=None)
For token 43819, log_prob: Logprob(logprob=-12.279776573181152, rank=2720, decoded_token=None)
For token 21475, log_prob: Logprob(logprob=-0.6679940819740295, rank=1, decoded_token=None)
For token 1511, log_prob: Logprob(logprob=-6.589616775512695, rank=49, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.3157753944396973, rank=3, decoded_token=None)
For token 6037, log_prob: Logprob(logprob=-6.093387603759766, rank=53, decoded_token=None)
For token 330, log_prob: Logprob(logprob=-3.6796159744262695, rank=9, decoded_token=None)
For token 2261, log_prob: Logprob(logprob=-4.342022895812988, rank=15, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.6981703042984009, rank=1, decoded_token=None)
For token 806, log_prob: Logprob(logprob=-4.951969146728516, rank=18, decoded_token=None)
For token 1, log_prob: Logprob(logprob=-1.3567357063293457, rank=2, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.559495747089386, rank=1, decoded_token=None)
For token 1893, log_prob: Logprob(logprob=-6.321759223937988, rank=44, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-1.3698585033416748, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3447837829589844, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-6.439241409301758, rank=23, decoded_token=None)
For token 6982, log_prob: Logprob(logprob=-3.0471701622009277, rank=5, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-0.703130304813385, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.47134995460510254, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.5008544921875, rank=9, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-4.440498352050781, rank=13, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.9463624954223633, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.14101086556911469, rank=1, decoded_token=None)
For token 1691, log_prob: Logprob(logprob=-0.807411789894104, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0075277951546013355, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01632852479815483, rank=1, decoded_token=None)
For token 843, log_prob: Logprob(logprob=-0.12699167430400848, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.03602903336286545, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2054326832294464, rank=1, decoded_token=None)
For token 3391, log_prob: Logprob(logprob=-0.025190236046910286, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.08179139345884323, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3728283941745758, rank=1, decoded_token=None)
For token 4370, log_prob: Logprob(logprob=-0.015932045876979828, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-9.9160795211792, rank=121, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-4.163404941558838, rank=8, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.451625347137451, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.517742395401001, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.110421895980835, rank=3, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.476434588432312, rank=2, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.23249292373657227, rank=1, decoded_token=None)
For token 837, log_prob: Logprob(logprob=-0.6536205410957336, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.36460936069488525, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.07394429296255112, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.009883278980851173, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.6059339046478271, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-2.450810432434082, rank=5, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.049487829208374, rank=2, decoded_token=None)
For token 339, log_prob: Logprob(logprob=-0.6980368494987488, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.139958381652832, rank=2, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.1722527742385864, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.015046435408294201, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.19619299471378326, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.604534864425659, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.20953349769115448, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-4.28965425491333, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.45435839891433716, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.02163873240351677, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.2181992381811142, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.001948483637534082, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0003895000845659524, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.05843179672956467, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.4078903198242188, rank=4, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.5167269706726074, rank=4, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.789426326751709, rank=1, decoded_token=None)
For token 2646, log_prob: Logprob(logprob=-3.07065749168396, rank=8, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-2.406424045562744, rank=3, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.64980149269104, rank=7, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-2.804396629333496, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.07326694577932358, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-3.0780837535858154, rank=4, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.01376998983323574, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-0.044610776007175446, rank=1, decoded_token=None)
For token 1023, log_prob: Logprob(logprob=-0.0030948857311159372, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.03554227203130722, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.011711414903402328, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00024434918304905295, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.1415383219718933, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-5.144501686096191, rank=9, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.4923019409179688, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.1131657212972641, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.29162850975990295, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.007929631508886814, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.020741933956742287, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.09790364652872086, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.5009815692901611, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-3.012348175048828, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.7491417527198792, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.07769384235143661, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-7.595197677612305, rank=29, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.1537325382232666, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.010177383199334145, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.005346049088984728, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.0328480489552021, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.024808069691061974, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00047052756417542696, rank=1, decoded_token=None)
For token 1442, log_prob: Logprob(logprob=-4.929317474365234, rank=7, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.5717543363571167, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3725956678390503, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.2139285802841187, rank=1, decoded_token=None)
For token 3940, log_prob: Logprob(logprob=-4.185582160949707, rank=14, decoded_token=None)
For token 449, log_prob: Logprob(logprob=-0.05743381381034851, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.9012429714202881, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.6468750238418579, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.008982133120298386, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-2.8201804161071777, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.6609485149383545, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.6036994457244873, rank=3, decoded_token=None)
For token 1053, log_prob: Logprob(logprob=-2.095855951309204, rank=2, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-3.041916847229004, rank=6, decoded_token=None)
For token 1193, log_prob: Logprob(logprob=-3.4329066276550293, rank=7, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.34858348965644836, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.016673851758241653, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-2.831927537918091, rank=2, decoded_token=None)
For token 433, log_prob: Logprob(logprob=-0.3648470342159271, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.21367542445659637, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.02570355497300625, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0026745761279016733, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.1849979162216187, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.18910124897956848, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.310189723968506, rank=2, decoded_token=None)
For token 2860, log_prob: Logprob(logprob=-5.869146347045898, rank=56, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.027346676215529442, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2362522929906845, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-4.086330413818359, rank=4, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-6.07204008102417, rank=49, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.5300240516662598, rank=7, decoded_token=None)
For token 1514, log_prob: Logprob(logprob=-1.5933805704116821, rank=2, decoded_token=None)
For token 19794, log_prob: Logprob(logprob=-4.322381496429443, rank=6, decoded_token=None)
For token 520, log_prob: Logprob(logprob=-2.5797297954559326, rank=4, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.8274871110916138, rank=1, decoded_token=None)
For token 6246, log_prob: Logprob(logprob=-5.394405841827393, rank=25, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.8071932196617126, rank=1, decoded_token=None)
For token 2684, log_prob: Logprob(logprob=-3.05216908454895, rank=7, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.6914281249046326, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.022183140739798546, rank=1, decoded_token=None)
For token 7041, log_prob: Logprob(logprob=-3.9680607318878174, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3262915313243866, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2028698921203613, rank=1, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-0.6208716034889221, rank=1, decoded_token=None)
For token 389, log_prob: Logprob(logprob=-2.077561855316162, rank=3, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-1.246550440788269, rank=2, decoded_token=None)
For token 2128, log_prob: Logprob(logprob=-0.10005613416433334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.14739106595516205, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-2.883037567138672, rank=4, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-1.1887978315353394, rank=2, decoded_token=None)
For token 12722, log_prob: Logprob(logprob=-4.796601295471191, rank=9, decoded_token=None)
For token 15100, log_prob: Logprob(logprob=-4.097357749938965, rank=7, decoded_token=None)
For token 1268, log_prob: Logprob(logprob=-0.9826016426086426, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.8719936609268188, rank=3, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-1.8892854452133179, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.10686607658863068, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.29455244541168213, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.010281220078468323, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.8527332544326782, rank=1, decoded_token=None)
For token 4460, log_prob: Logprob(logprob=-3.4623050689697266, rank=3, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-1.0008432865142822, rank=2, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.03988252580165863, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002444852376356721, rank=1, decoded_token=None)
For token 2758, log_prob: Logprob(logprob=-3.4538803100585938, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.37787938117980957, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.939903974533081, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.39280885457992554, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.3244531154632568, rank=2, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.10098931938409805, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.7775647640228271, rank=2, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.4539406895637512, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.811513423919678, rank=4, decoded_token=None)
For token 1758, log_prob: Logprob(logprob=-0.7816817164421082, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.9299181699752808, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.44691434502601624, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0014972201315686107, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001538873475510627, rank=1, decoded_token=None)
For token 64002, log_prob: Logprob(logprob=-2.5435791015625, rank=3, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04151042550802231, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.13028867542743683, rank=1, decoded_token=None)
For token 555, log_prob: Logprob(logprob=-0.033352263271808624, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.004435819108039141, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.01422715000808239, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.0882897675037384, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.06284724175930023, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.23540009558200836, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-0.04173900932073593, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.009144803509116173, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.061586808413267136, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013944911770522594, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010585224663373083, rank=1, decoded_token=None)
For token 72159, log_prob: Logprob(logprob=-1.4160566329956055, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021862106397747993, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.14335329830646515, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-5.759881019592285, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005048384889960289, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.10374521464109421, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.17173078656196594, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.02425275556743145, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.045896414667367935, rank=1, decoded_token=None)
For token 3965, log_prob: Logprob(logprob=-0.1629486083984375, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.11125016212463379, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.008519258350133896, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002081372309476137, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00037245964631438255, rank=1, decoded_token=None)
For token 94310, log_prob: Logprob(logprob=-0.7335497140884399, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.02491365373134613, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5532340407371521, rank=1, decoded_token=None)
For token 505, log_prob: Logprob(logprob=-0.10938028991222382, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.010903777554631233, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.055021319538354874, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.02717730961740017, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.014209168031811714, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04492345079779625, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.008596202358603477, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.019180072471499443, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.05701299384236336, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.0044067418202757835, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0004991239402443171, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.3356616497039795, rank=3, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.2321207970380783, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-1.9457459449768066, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-5.169647216796875, rank=25, decoded_token=None)
For token 31878, log_prob: Logprob(logprob=-1.6065828800201416, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.7340887784957886, rank=1, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-8.43447208404541, rank=182, decoded_token=None)
For token 2204, log_prob: Logprob(logprob=-2.5959243774414062, rank=2, decoded_token=None)
For token 8146, log_prob: Logprob(logprob=-5.7852783203125, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.028130831196904182, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-4.079294681549072, rank=13, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.363671213388443, rank=1, decoded_token=None)
For token 2435, log_prob: Logprob(logprob=-4.852097988128662, rank=13, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.3592950105667114, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.8471036553382874, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-4.368374824523926, rank=20, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-4.802444934844971, rank=13, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.16641685366630554, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-2.103876829147339, rank=2, decoded_token=None)
For token 1933, log_prob: Logprob(logprob=-0.12087968736886978, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-3.4264016151428223, rank=5, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-7.156714916229248, rank=17, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.11071085929870605, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-2.5686776638031006, rank=5, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.808468818664551, rank=3, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.08335965126752853, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.6839105486869812, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.7509100437164307, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-2.0333144664764404, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-3.4627275466918945, rank=6, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.025303103029727936, rank=1, decoded_token=None)
For token 706, log_prob: Logprob(logprob=-0.38641905784606934, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.6944231986999512, rank=2, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.2304867058992386, rank=1, decoded_token=None)
For token 649, log_prob: Logprob(logprob=-2.619453191757202, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.055597249418497086, rank=1, decoded_token=None)
For token 1766, log_prob: Logprob(logprob=-2.600069999694824, rank=4, decoded_token=None)
For token 1701, log_prob: Logprob(logprob=-2.2944202423095703, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.4182531535625458, rank=1, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-3.653362512588501, rank=7, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-4.6120195388793945, rank=15, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.18519794940948486, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.9661778211593628, rank=2, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-0.45861148834228516, rank=1, decoded_token=None)
For token 25800, log_prob: Logprob(logprob=-3.94254732131958, rank=9, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.1716657280921936, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.07201958447694778, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-2.19677996635437, rank=3, decoded_token=None)
For token 2650, log_prob: Logprob(logprob=-2.998732566833496, rank=3, decoded_token=None)
For token 1690, log_prob: Logprob(logprob=-0.08345484733581543, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.7078306674957275, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.1414029747247696, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-0.18299917876720428, rank=1, decoded_token=None)
For token 1587, log_prob: Logprob(logprob=-0.9597219228744507, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.0231848806142807, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.0032851321157068014, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-0.10467099398374557, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.15210722386837006, rank=1, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.03904413804411888, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.10596451908349991, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.08106350153684616, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002707508159801364, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.022244233638048172, rank=1, decoded_token=None)
For token 25541, log_prob: Logprob(logprob=-10.945005416870117, rank=916, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.6583459973335266, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0010521834483370185, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001486429391661659, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0014629386132583022, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-4.006361961364746, rank=7, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.023395448923110962, rank=1, decoded_token=None)
For token 21129, log_prob: Logprob(logprob=-5.530216217041016, rank=44, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00830328743904829, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0003693613689392805, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013433984713628888, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0016192194307222962, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.299423933029175, rank=2, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.006571113597601652, rank=1, decoded_token=None)
For token 24599, log_prob: Logprob(logprob=-6.174839973449707, rank=81, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.004514620639383793, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0005022218101657927, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002609150833450258, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.003974872175604105, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-2.5288949012756348, rank=3, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0012215065071359277, rank=1, decoded_token=None)
For token 5154, log_prob: Logprob(logprob=-5.727021217346191, rank=71, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.49432677030563354, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.005106738768517971, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.000403084559366107, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0903244018554688, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.23497126996517181, rank=1, decoded_token=None)
For token 23956, log_prob: Logprob(logprob=-3.718066692352295, rank=5, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-2.335458755493164, rank=3, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-1.303149938583374, rank=1, decoded_token=None)
For token 13890, log_prob: Logprob(logprob=-0.3004732131958008, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.004260392393916845, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5732686519622803, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.590839147567749, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-3.827090263366699, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.22617821395397186, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-3.2456188201904297, rank=8, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.9588005542755127, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.026078294962644577, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0019421778852120042, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.9211294651031494, rank=2, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3348463177680969, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7776240110397339, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01911025308072567, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.888803005218506, rank=6, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.054509516805410385, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7908403277397156, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-1.7093759775161743, rank=2, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-4.15236234664917, rank=6, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.05701907351613045, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006355076562613249, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.6023101806640625, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.06791981309652328, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0033156678546220064, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002029928145930171, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.5973119735717773, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3241466283798218, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.18300116062164307, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.11992660909891129, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2516236305236816, rank=4, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.24058884382247925, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-4.195656776428223, rank=3, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.4392582178115845, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.5084874629974365, rank=3, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.012086370028555393, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.020088670775294304, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-1.0653190612792969, rank=1, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.1461433619260788, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013424679636955261, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013040646445006132, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.36163878440856934, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.1781444400548935, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.15448440611362457, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.06548036634922028, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.4418625831604004, rank=3, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.10001654922962189, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-0.7548537254333496, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.39578503370285034, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5675726532936096, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.03172972798347473, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.059371717274188995, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-1.1219673156738281, rank=2, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.014431270770728588, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0009012927766889334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00019727191829588264, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.1902770847082138, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.08072244375944138, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.11521956324577332, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.035654667764902115, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-0.6550530791282654, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.02330426312983036, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-4.384681224822998, rank=4, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.05364048480987549, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.8038601875305176, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.02270464599132538, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.002600504318252206, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-4.947210788726807, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.018018605187535286, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004600179847329855, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0003252692404203117, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0266454219818115, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.1865871399641037, rank=1, decoded_token=None)
For token 83445, log_prob: Logprob(logprob=-9.417522430419922, rank=611, decoded_token=None)
For token 25173, log_prob: Logprob(logprob=-6.057499885559082, rank=17, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.606786012649536, rank=4, decoded_token=None)
For token 2120, log_prob: Logprob(logprob=-4.803981304168701, rank=15, decoded_token=None)
For token 25173, log_prob: Logprob(logprob=-1.608124017715454, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.11478708684444427, rank=1, decoded_token=None)
For token 18, log_prob: Logprob(logprob=-1.447336196899414, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.7482445240020752, rank=1, decoded_token=None)
For token 369, log_prob: Logprob(logprob=-2.2536251544952393, rank=3, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-1.3945178985595703, rank=2, decoded_token=None)
For token 284, log_prob: Logprob(logprob=-0.05774757266044617, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5983477830886841, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-1.9999263286590576, rank=3, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.5314874053001404, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.042273957282304764, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002056509256362915, rank=1, decoded_token=None)
For token 25173, log_prob: Logprob(logprob=-0.5108471512794495, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.122591257095337, rank=6, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.006182474084198475, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0008985534077510238, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010907054820563644, rank=1, decoded_token=None)
For token 25173, log_prob: Logprob(logprob=-0.40825405716896057, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-1.7694283723831177, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.01909996196627617, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0010840974282473326, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010549465514486656, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5568356513977051, rank=1, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-5.176999092102051, rank=9, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0042177774012088776, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0008438840159215033, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00021598390594590455, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.1352090835571289, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.669875144958496, rank=4, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0732363685965538, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004061426967382431, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0003469580551609397, rank=1, decoded_token=None)
For token 423, log_prob: Logprob(logprob=-2.8467726707458496, rank=4, decoded_token=None)
tokens length:  489
output logprobs length:  489
ctxlen:  488
For token 791, log_prob: Logprob(logprob=-3.6213459968566895, rank=4, decoded_token=None)
For token 2768, log_prob: Logprob(logprob=-4.259817600250244, rank=2, decoded_token=None)
For token 527, log_prob: Logprob(logprob=-2.991230010986328, rank=3, decoded_token=None)
For token 5361, log_prob: Logprob(logprob=-9.332494735717773, rank=699, decoded_token=None)
For token 5873, log_prob: Logprob(logprob=-1.0538994073867798, rank=1, decoded_token=None)
For token 4860, log_prob: Logprob(logprob=-0.15532542765140533, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.4161324501037598, rank=9, decoded_token=None)
For token 4291, log_prob: Logprob(logprob=-3.5592703819274902, rank=2, decoded_token=None)
For token 11503, log_prob: Logprob(logprob=-0.9168203473091125, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.4131229519844055, rank=1, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.8898773193359375, rank=4, decoded_token=None)
For token 36256, log_prob: Logprob(logprob=-8.741050720214844, rank=635, decoded_token=None)
For token 38696, log_prob: Logprob(logprob=-3.7625539302825928, rank=8, decoded_token=None)
For token 382, log_prob: Logprob(logprob=-5.573415279388428, rank=19, decoded_token=None)
For token 791, log_prob: Logprob(logprob=-3.544070243835449, rank=4, decoded_token=None)
For token 7187, log_prob: Logprob(logprob=-7.385589122772217, rank=164, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.11412940919399261, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.8478307723999023, rank=2, decoded_token=None)
For token 3363, log_prob: Logprob(logprob=-1.8618664741516113, rank=1, decoded_token=None)
For token 1405, log_prob: Logprob(logprob=-5.9992265701293945, rank=13, decoded_token=None)
For token 33126, log_prob: Logprob(logprob=-9.025006294250488, rank=320, decoded_token=None)
For token 574, log_prob: Logprob(logprob=-5.349676132202148, rank=8, decoded_token=None)
For token 9405, log_prob: Logprob(logprob=-0.4107400178909302, rank=1, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.5750153660774231, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.7413759231567383, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-7.208454132080078, rank=134, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.7163258790969849, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-8.746551513671875, rank=551, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.46054989099502563, rank=1, decoded_token=None)
For token 3639, log_prob: Logprob(logprob=-4.115103721618652, rank=8, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.2959842085838318, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.1604301482439041, rank=1, decoded_token=None)
For token 907, log_prob: Logprob(logprob=-5.730544567108154, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.036400843411684036, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.9913142323493958, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.306947708129883, rank=14, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-3.463329553604126, rank=3, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-6.80005407333374, rank=33, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.502928614616394, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.8077549934387207, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.794535756111145, rank=1, decoded_token=None)
For token 9591, log_prob: Logprob(logprob=-0.4624699354171753, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.35287705063819885, rank=1, decoded_token=None)
For token 23038, log_prob: Logprob(logprob=-0.04949808493256569, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-3.705009937286377, rank=5, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.00704288482666, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.2554558217525482, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.19919312000274658, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.9839682579040527, rank=1, decoded_token=None)
For token 9214, log_prob: Logprob(logprob=-7.269443511962891, rank=42, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.3192760646343231, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0035969815216958523, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0006814065272919834, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021883098408579826, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.1909081935882568, rank=1, decoded_token=None)
For token 11758, log_prob: Logprob(logprob=-1.8936516046524048, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00804623682051897, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.001649211160838604, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000596107158344239, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006301296874880791, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.09370359778404236, rank=1, decoded_token=None)
For token 22781, log_prob: Logprob(logprob=-0.7115755081176758, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.007358944974839687, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002253137994557619, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.000610999355558306, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.019312677904963493, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.06189332529902458, rank=1, decoded_token=None)
For token 6305, log_prob: Logprob(logprob=-0.6310369372367859, rank=1, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.25910231471061707, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.9596242904663086, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.060119159519672394, rank=1, decoded_token=None)
For token 362, log_prob: Logprob(logprob=-1.2652478218078613, rank=2, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-1.2315428256988525, rank=2, decoded_token=None)
For token 43819, log_prob: Logprob(logprob=-12.279776573181152, rank=2720, decoded_token=None)
For token 21475, log_prob: Logprob(logprob=-0.6679940819740295, rank=1, decoded_token=None)
For token 1511, log_prob: Logprob(logprob=-6.589616775512695, rank=49, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-2.3157753944396973, rank=3, decoded_token=None)
For token 6037, log_prob: Logprob(logprob=-6.093387603759766, rank=53, decoded_token=None)
For token 330, log_prob: Logprob(logprob=-3.6796159744262695, rank=9, decoded_token=None)
For token 2261, log_prob: Logprob(logprob=-4.342022895812988, rank=15, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.6981703042984009, rank=1, decoded_token=None)
For token 806, log_prob: Logprob(logprob=-4.951969146728516, rank=18, decoded_token=None)
For token 1, log_prob: Logprob(logprob=-1.3567357063293457, rank=2, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.559495747089386, rank=1, decoded_token=None)
For token 1893, log_prob: Logprob(logprob=-6.321759223937988, rank=44, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-1.3698585033416748, rank=2, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3447837829589844, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-6.439241409301758, rank=23, decoded_token=None)
For token 6982, log_prob: Logprob(logprob=-3.0471701622009277, rank=5, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-0.703130304813385, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.47134995460510254, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.5008544921875, rank=9, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-4.440498352050781, rank=13, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.9463624954223633, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.14101086556911469, rank=1, decoded_token=None)
For token 1691, log_prob: Logprob(logprob=-0.807411789894104, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0075277951546013355, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01632852479815483, rank=1, decoded_token=None)
For token 843, log_prob: Logprob(logprob=-0.12699167430400848, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.03602903336286545, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2054326832294464, rank=1, decoded_token=None)
For token 3391, log_prob: Logprob(logprob=-0.025190236046910286, rank=1, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.08179139345884323, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3728283941745758, rank=1, decoded_token=None)
For token 4370, log_prob: Logprob(logprob=-0.015932045876979828, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-9.9160795211792, rank=121, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-4.163404941558838, rank=8, decoded_token=None)
For token 922, log_prob: Logprob(logprob=-2.451625347137451, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.517742395401001, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.110421895980835, rank=3, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.476434588432312, rank=2, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-0.23249292373657227, rank=1, decoded_token=None)
For token 837, log_prob: Logprob(logprob=-0.6536205410957336, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.36460936069488525, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.07394429296255112, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.009883278980851173, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.6059339046478271, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-2.450810432434082, rank=5, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-2.049487829208374, rank=2, decoded_token=None)
For token 339, log_prob: Logprob(logprob=-0.6980368494987488, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.139958381652832, rank=2, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.1722527742385864, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.015046435408294201, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.19619299471378326, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.604534864425659, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.20953349769115448, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-4.28965425491333, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.45435839891433716, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.02163873240351677, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.2181992381811142, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.001948483637534082, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0003895000845659524, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.05843179672956467, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-3.4078903198242188, rank=4, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.5167269706726074, rank=4, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.789426326751709, rank=1, decoded_token=None)
For token 2646, log_prob: Logprob(logprob=-3.07065749168396, rank=8, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-2.406424045562744, rank=3, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.64980149269104, rank=7, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-2.804396629333496, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.07326694577932358, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-3.0780837535858154, rank=4, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.01376998983323574, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-0.044610776007175446, rank=1, decoded_token=None)
For token 1023, log_prob: Logprob(logprob=-0.0030948857311159372, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.03554227203130722, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.011711414903402328, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00024434918304905295, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-0.1415383219718933, rank=1, decoded_token=None)
For token 1828, log_prob: Logprob(logprob=-5.144501686096191, rank=9, decoded_token=None)
For token 1403, log_prob: Logprob(logprob=-3.4923019409179688, rank=4, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.1131657212972641, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.29162850975990295, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.007929631508886814, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-0.020741933956742287, rank=1, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.09790364652872086, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.5009815692901611, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-3.012348175048828, rank=6, decoded_token=None)
For token 1524, log_prob: Logprob(logprob=-0.7491417527198792, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.07769384235143661, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-7.595197677612305, rank=29, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.1537325382232666, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.010177383199334145, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.005346049088984728, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.0328480489552021, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.024808069691061974, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00047052756417542696, rank=1, decoded_token=None)
For token 1442, log_prob: Logprob(logprob=-4.929317474365234, rank=7, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.5717543363571167, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-1.3725956678390503, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-1.2139285802841187, rank=1, decoded_token=None)
For token 3940, log_prob: Logprob(logprob=-4.185582160949707, rank=14, decoded_token=None)
For token 449, log_prob: Logprob(logprob=-0.05743381381034851, rank=1, decoded_token=None)
For token 459, log_prob: Logprob(logprob=-0.9012429714202881, rank=1, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.6468750238418579, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.008982133120298386, rank=1, decoded_token=None)
For token 1243, log_prob: Logprob(logprob=-2.8201804161071777, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.6609485149383545, rank=1, decoded_token=None)
For token 5497, log_prob: Logprob(logprob=-2.6036994457244873, rank=3, decoded_token=None)
For token 1053, log_prob: Logprob(logprob=-2.095855951309204, rank=2, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-3.041916847229004, rank=6, decoded_token=None)
For token 1193, log_prob: Logprob(logprob=-3.4329066276550293, rank=7, decoded_token=None)
For token 10535, log_prob: Logprob(logprob=-0.34858348965644836, rank=1, decoded_token=None)
For token 5219, log_prob: Logprob(logprob=-0.016673851758241653, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-2.831927537918091, rank=2, decoded_token=None)
For token 433, log_prob: Logprob(logprob=-0.3648470342159271, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.21367542445659637, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.02570355497300625, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0026745761279016733, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.1849979162216187, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.18910124897956848, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-2.310189723968506, rank=2, decoded_token=None)
For token 2860, log_prob: Logprob(logprob=-5.869146347045898, rank=56, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.027346676215529442, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.2362522929906845, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-4.086330413818359, rank=4, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-6.07204008102417, rank=49, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-3.5300240516662598, rank=7, decoded_token=None)
For token 1514, log_prob: Logprob(logprob=-1.5933805704116821, rank=2, decoded_token=None)
For token 19794, log_prob: Logprob(logprob=-4.322381496429443, rank=6, decoded_token=None)
For token 520, log_prob: Logprob(logprob=-2.5797297954559326, rank=4, decoded_token=None)
For token 264, log_prob: Logprob(logprob=-0.8274871110916138, rank=1, decoded_token=None)
For token 6246, log_prob: Logprob(logprob=-5.394405841827393, rank=25, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.8071932196617126, rank=1, decoded_token=None)
For token 2684, log_prob: Logprob(logprob=-3.05216908454895, rank=7, decoded_token=None)
For token 690, log_prob: Logprob(logprob=-0.6914281249046326, rank=1, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.022183140739798546, rank=1, decoded_token=None)
For token 7041, log_prob: Logprob(logprob=-3.9680607318878174, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.3262915313243866, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2028698921203613, rank=1, decoded_token=None)
For token 4311, log_prob: Logprob(logprob=-0.6208716034889221, rank=1, decoded_token=None)
For token 389, log_prob: Logprob(logprob=-2.077561855316162, rank=3, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-1.246550440788269, rank=2, decoded_token=None)
For token 2128, log_prob: Logprob(logprob=-0.10005613416433334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.14739106595516205, rank=1, decoded_token=None)
For token 16299, log_prob: Logprob(logprob=-2.883037567138672, rank=4, decoded_token=None)
For token 5224, log_prob: Logprob(logprob=-1.1887978315353394, rank=2, decoded_token=None)
For token 12722, log_prob: Logprob(logprob=-4.796601295471191, rank=9, decoded_token=None)
For token 15100, log_prob: Logprob(logprob=-4.097357749938965, rank=7, decoded_token=None)
For token 1268, log_prob: Logprob(logprob=-0.9826016426086426, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.8719936609268188, rank=3, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-1.8892854452133179, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.10686607658863068, rank=1, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-0.29455244541168213, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.010281220078468323, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.8527332544326782, rank=1, decoded_token=None)
For token 4460, log_prob: Logprob(logprob=-3.4623050689697266, rank=3, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-1.0008432865142822, rank=2, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.03988252580165863, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002444852376356721, rank=1, decoded_token=None)
For token 2758, log_prob: Logprob(logprob=-3.4538803100585938, rank=8, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.37787938117980957, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.939903974533081, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.39280885457992554, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.3244531154632568, rank=2, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.10098931938409805, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-1.7775647640228271, rank=2, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.4539406895637512, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-4.811513423919678, rank=4, decoded_token=None)
For token 1758, log_prob: Logprob(logprob=-0.7816817164421082, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.9299181699752808, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.44691434502601624, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0014972201315686107, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001538873475510627, rank=1, decoded_token=None)
For token 64002, log_prob: Logprob(logprob=-2.5435791015625, rank=3, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04151042550802231, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.13028867542743683, rank=1, decoded_token=None)
For token 555, log_prob: Logprob(logprob=-0.033352263271808624, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.004435819108039141, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.01422715000808239, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.0882897675037384, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.06284724175930023, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.23540009558200836, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-0.04173900932073593, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.009144803509116173, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.061586808413267136, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013944911770522594, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010585224663373083, rank=1, decoded_token=None)
For token 72159, log_prob: Logprob(logprob=-1.4160566329956055, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.021862106397747993, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.14335329830646515, rank=1, decoded_token=None)
For token 323, log_prob: Logprob(logprob=-5.759881019592285, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.005048384889960289, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.10374521464109421, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.17173078656196594, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.02425275556743145, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.045896414667367935, rank=1, decoded_token=None)
For token 3965, log_prob: Logprob(logprob=-0.1629486083984375, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.11125016212463379, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.008519258350133896, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.002081372309476137, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00037245964631438255, rank=1, decoded_token=None)
For token 94310, log_prob: Logprob(logprob=-0.7335497140884399, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.02491365373134613, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5532340407371521, rank=1, decoded_token=None)
For token 505, log_prob: Logprob(logprob=-0.10938028991222382, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.010903777554631233, rank=1, decoded_token=None)
For token 966, log_prob: Logprob(logprob=-0.055021319538354874, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.02717730961740017, rank=1, decoded_token=None)
For token 1505, log_prob: Logprob(logprob=-0.014209168031811714, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.04492345079779625, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.008596202358603477, rank=1, decoded_token=None)
For token 7411, log_prob: Logprob(logprob=-0.019180072471499443, rank=1, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.05701299384236336, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.0044067418202757835, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0004991239402443171, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.3356616497039795, rank=3, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.2321207970380783, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-1.9457459449768066, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-5.169647216796875, rank=25, decoded_token=None)
For token 31878, log_prob: Logprob(logprob=-1.6065828800201416, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.7340887784957886, rank=1, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-8.43447208404541, rank=182, decoded_token=None)
For token 2204, log_prob: Logprob(logprob=-2.5959243774414062, rank=2, decoded_token=None)
For token 8146, log_prob: Logprob(logprob=-5.7852783203125, rank=26, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.028130831196904182, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-4.079294681549072, rank=13, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.363671213388443, rank=1, decoded_token=None)
For token 2435, log_prob: Logprob(logprob=-4.852097988128662, rank=13, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-1.3592950105667114, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.8471036553382874, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-4.368374824523926, rank=20, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-4.802444934844971, rank=13, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.16641685366630554, rank=1, decoded_token=None)
For token 1855, log_prob: Logprob(logprob=-2.103876829147339, rank=2, decoded_token=None)
For token 1933, log_prob: Logprob(logprob=-0.12087968736886978, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-3.4264016151428223, rank=5, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-7.156714916229248, rank=17, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.11071085929870605, rank=1, decoded_token=None)
For token 578, log_prob: Logprob(logprob=-2.5686776638031006, rank=5, decoded_token=None)
For token 1396, log_prob: Logprob(logprob=-2.808468818664551, rank=3, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.08335965126752853, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.6839105486869812, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.7509100437164307, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-2.0333144664764404, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-3.4627275466918945, rank=6, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.025303103029727936, rank=1, decoded_token=None)
For token 706, log_prob: Logprob(logprob=-0.38641905784606934, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-1.6944231986999512, rank=2, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.2304867058992386, rank=1, decoded_token=None)
For token 649, log_prob: Logprob(logprob=-2.619453191757202, rank=2, decoded_token=None)
For token 387, log_prob: Logprob(logprob=-0.055597249418497086, rank=1, decoded_token=None)
For token 1766, log_prob: Logprob(logprob=-2.600069999694824, rank=4, decoded_token=None)
For token 1701, log_prob: Logprob(logprob=-2.2944202423095703, rank=2, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.4182531535625458, rank=1, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-3.653362512588501, rank=7, decoded_token=None)
For token 3770, log_prob: Logprob(logprob=-4.6120195388793945, rank=15, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.18519794940948486, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-1.9661778211593628, rank=2, decoded_token=None)
For token 7699, log_prob: Logprob(logprob=-0.45861148834228516, rank=1, decoded_token=None)
For token 25800, log_prob: Logprob(logprob=-3.94254732131958, rank=9, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.1716657280921936, rank=1, decoded_token=None)
For token 914, log_prob: Logprob(logprob=-0.07201958447694778, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-2.19677996635437, rank=3, decoded_token=None)
For token 2650, log_prob: Logprob(logprob=-2.998732566833496, rank=3, decoded_token=None)
For token 1690, log_prob: Logprob(logprob=-0.08345484733581543, rank=1, decoded_token=None)
For token 43732, log_prob: Logprob(logprob=-0.7078306674957275, rank=1, decoded_token=None)
For token 315, log_prob: Logprob(logprob=-0.1414029747247696, rank=1, decoded_token=None)
For token 6308, log_prob: Logprob(logprob=-0.18299917876720428, rank=1, decoded_token=None)
For token 1587, log_prob: Logprob(logprob=-0.9597219228744507, rank=1, decoded_token=None)
For token 279, log_prob: Logprob(logprob=-0.0231848806142807, rank=1, decoded_token=None)
For token 3637, log_prob: Logprob(logprob=-0.0032851321157068014, rank=1, decoded_token=None)
For token 617, log_prob: Logprob(logprob=-0.10467099398374557, rank=1, decoded_token=None)
For token 304, log_prob: Logprob(logprob=-0.15210722386837006, rank=1, decoded_token=None)
For token 5942, log_prob: Logprob(logprob=-0.03904413804411888, rank=1, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.10596451908349991, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.08106350153684616, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002707508159801364, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.022244233638048172, rank=1, decoded_token=None)
For token 25541, log_prob: Logprob(logprob=-10.945005416870117, rank=916, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.6583459973335266, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0010521834483370185, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0001486429391661659, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0014629386132583022, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-4.006361961364746, rank=7, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.023395448923110962, rank=1, decoded_token=None)
For token 21129, log_prob: Logprob(logprob=-5.530216217041016, rank=44, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.00830328743904829, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0003693613689392805, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013433984713628888, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.0016192194307222962, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.299423933029175, rank=2, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.006571113597601652, rank=1, decoded_token=None)
For token 24599, log_prob: Logprob(logprob=-6.174839973449707, rank=81, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.004514620639383793, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0005022218101657927, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002609150833450258, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.003974872175604105, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-2.5288949012756348, rank=3, decoded_token=None)
For token 11, log_prob: Logprob(logprob=-0.0012215065071359277, rank=1, decoded_token=None)
For token 5154, log_prob: Logprob(logprob=-5.727021217346191, rank=71, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.49432677030563354, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.005106738768517971, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.000403084559366107, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0903244018554688, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.23497126996517181, rank=1, decoded_token=None)
For token 23956, log_prob: Logprob(logprob=-3.718066692352295, rank=5, decoded_token=None)
For token 7645, log_prob: Logprob(logprob=-2.335458755493164, rank=3, decoded_token=None)
For token 374, log_prob: Logprob(logprob=-1.303149938583374, rank=1, decoded_token=None)
For token 13890, log_prob: Logprob(logprob=-0.3004732131958008, rank=1, decoded_token=None)
For token 311, log_prob: Logprob(logprob=-0.004260392393916845, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5732686519622803, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.590839147567749, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-3.827090263366699, rank=6, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.22617821395397186, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-3.2456188201904297, rank=8, decoded_token=None)
For token 5380, log_prob: Logprob(logprob=-0.9588005542755127, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.026078294962644577, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0019421778852120042, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-3.9211294651031494, rank=2, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3348463177680969, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7776240110397339, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.01911025308072567, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.888803005218506, rank=6, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.054509516805410385, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.7908403277397156, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-1.7093759775161743, rank=2, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-4.15236234664917, rank=6, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.05701907351613045, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.006355076562613249, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.6023101806640625, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.06791981309652328, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0033156678546220064, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.0002029928145930171, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.5973119735717773, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.3241466283798218, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.18300116062164307, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.11992660909891129, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-2.2516236305236816, rank=4, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.24058884382247925, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-4.195656776428223, rank=3, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.4392582178115845, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.5084874629974365, rank=3, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.012086370028555393, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.020088670775294304, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-1.0653190612792969, rank=1, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.1461433619260788, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0013424679636955261, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00013040646445006132, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.36163878440856934, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.1781444400548935, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.15448440611362457, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.06548036634922028, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-1.4418625831604004, rank=3, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.10001654922962189, rank=1, decoded_token=None)
For token 489, log_prob: Logprob(logprob=-0.7548537254333496, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.39578503370285034, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.5675726532936096, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.03172972798347473, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.059371717274188995, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-1.1219673156738281, rank=2, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.014431270770728588, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0009012927766889334, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00019727191829588264, rank=1, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.1902770847082138, rank=1, decoded_token=None)
For token 20, log_prob: Logprob(logprob=-0.08072244375944138, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.11521956324577332, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.035654667764902115, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-0.6550530791282654, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.02330426312983036, rank=1, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-4.384681224822998, rank=4, decoded_token=None)
For token 320, log_prob: Logprob(logprob=-0.05364048480987549, rank=1, decoded_token=None)
For token 21, log_prob: Logprob(logprob=-1.8038601875305176, rank=2, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-0.02270464599132538, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.002600504318252206, rank=1, decoded_token=None)
For token 24, log_prob: Logprob(logprob=-4.947210788726807, rank=5, decoded_token=None)
For token 340, log_prob: Logprob(logprob=-0.018018605187535286, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004600179847329855, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0003252692404203117, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-1.0266454219818115, rank=1, decoded_token=None)
For token 271, log_prob: Logprob(logprob=-0.1865871399641037, rank=1, decoded_token=None)
For token 83445, log_prob: Logprob(logprob=-9.417522430419922, rank=611, decoded_token=None)
For token 25173, log_prob: Logprob(logprob=-6.057499885559082, rank=17, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.606786012649536, rank=4, decoded_token=None)
For token 2120, log_prob: Logprob(logprob=-4.803981304168701, rank=15, decoded_token=None)
For token 25173, log_prob: Logprob(logprob=-1.608124017715454, rank=2, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.11478708684444427, rank=1, decoded_token=None)
For token 18, log_prob: Logprob(logprob=-1.447336196899414, rank=1, decoded_token=None)
For token 8, log_prob: Logprob(logprob=-0.7482445240020752, rank=1, decoded_token=None)
For token 369, log_prob: Logprob(logprob=-2.2536251544952393, rank=3, decoded_token=None)
For token 865, log_prob: Logprob(logprob=-1.3945178985595703, rank=2, decoded_token=None)
For token 284, log_prob: Logprob(logprob=-0.05774757266044617, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5983477830886841, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-1.9999263286590576, rank=3, decoded_token=None)
For token 627, log_prob: Logprob(logprob=-0.5314874053001404, rank=1, decoded_token=None)
For token 32, log_prob: Logprob(logprob=-0.042273957282304764, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.002056509256362915, rank=1, decoded_token=None)
For token 25173, log_prob: Logprob(logprob=-0.5108471512794495, rank=1, decoded_token=None)
For token 19, log_prob: Logprob(logprob=-3.122591257095337, rank=6, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.006182474084198475, rank=1, decoded_token=None)
For token 33, log_prob: Logprob(logprob=-0.0008985534077510238, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010907054820563644, rank=1, decoded_token=None)
For token 25173, log_prob: Logprob(logprob=-0.40825405716896057, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-1.7694283723831177, rank=2, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.01909996196627617, rank=1, decoded_token=None)
For token 34, log_prob: Logprob(logprob=-0.0010840974282473326, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00010549465514486656, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.5568356513977051, rank=1, decoded_token=None)
For token 605, log_prob: Logprob(logprob=-5.176999092102051, rank=9, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0042177774012088776, rank=1, decoded_token=None)
For token 35, log_prob: Logprob(logprob=-0.0008438840159215033, rank=1, decoded_token=None)
For token 13, log_prob: Logprob(logprob=-0.00021598390594590455, rank=1, decoded_token=None)
For token 220, log_prob: Logprob(logprob=-0.1352090835571289, rank=1, decoded_token=None)
For token 17, log_prob: Logprob(logprob=-2.669875144958496, rank=4, decoded_token=None)
For token 198, log_prob: Logprob(logprob=-0.0732363685965538, rank=1, decoded_token=None)
For token 16533, log_prob: Logprob(logprob=-0.004061426967382431, rank=1, decoded_token=None)
For token 25, log_prob: Logprob(logprob=-0.0003469580551609397, rank=1, decoded_token=None)
For token 426, log_prob: Logprob(logprob=-0.8467726111412048, rank=1, decoded_token=None)
vllm (pretrained=meta-llama/Llama-3.2-1B,tensor_parallel_size=1,dtype=auto,gpu_memory_utilization=0.25,data_parallel_size=1,max_model_len=8192,add_bos_token=True,seed=42), gen_kwargs: (None), limit: 3.0, num_fewshot: None, batch_size: auto
|  Tasks  |Version|Filter|n-shot| Metric |   |Value|   |Stderr|
|---------|------:|------|-----:|--------|---|----:|---|-----:|
|meta_mmlu|      1|none  |     0|acc     |↑  |    0|±  |     0|
|         |       |none  |     0|acc_norm|↑  |    0|±  |     0|

[rank0]:[W1123 03:37:40.202792761 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
end: Sat Nov 23 03:37:43 UTC 2024
